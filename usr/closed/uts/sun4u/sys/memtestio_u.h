/*
 * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
 * Use is subject to license terms.
 */

#ifndef _MEMTESTIO_U_H
#define	_MEMTESTIO_U_H

#pragma ident	"%Z%%M%	%I%	%E% SMI"

#ifdef	__cplusplus
extern "C" {
#endif

#include <sys/spitregs.h>
#include <sys/cheetahregs.h>

/*
 * The following definitions are used to encode all the supported sun4u errors
 * that can be injected.  Errors are encoded using the following fields:
 *
 *	CPU | CLASS | SUBCLASS | TRAP | PROT | MODE | ACCESS | MISC
 */

/*
 * The cpu field defines the type of cpus on which the command is supported.
 */
#define	ERR_CPU_SF		UINT64_C(ERR_CPU_GENMAX + 0x1)	/* Spitfire */
#define	ERR_CPU_BB		UINT64_C(ERR_CPU_GENMAX + 0x2)	/* Blackbird */
#define	ERR_CPU_SA		UINT64_C(ERR_CPU_GENMAX + 0x3)	/* Saphire */
#define	ERR_CPU_HB		UINT64_C(ERR_CPU_GENMAX + 0x4)	/* Hummbird */
#define	ERR_CPU_CH		UINT64_C(ERR_CPU_GENMAX + 0x5)	/* Cheetah */
#define	ERR_CPU_CHP		UINT64_C(ERR_CPU_GENMAX + 0x6)	/* Cheetah+ */
#define	ERR_CPU_JA		UINT64_C(ERR_CPU_GENMAX + 0x7)  /* Jalapeno */
#define	ERR_CPU_JG		UINT64_C(ERR_CPU_GENMAX + 0x8)	/* Jaguar */
#define	ERR_CPU_PN		UINT64_C(ERR_CPU_GENMAX + 0x9)	/* Panther */
#define	ERR_CPU_SR		UINT64_C(ERR_CPU_GENMAX + 0xa)	/* Serrano */
#define	ERR_CPU_OC		UINT64_C(ERR_CPU_GENMAX + 0xb)	/* Olympus C */
#define	ERR_CPU_JP		UINT64_C(ERR_CPU_GENMAX + 0xc)	/* Jupiter */

/*
 * The cpu macros look in the system info structure to determine the cpu type.
 */
#define	CPU_ISSPITFIRE(cip)	(CPU_IMPL((cip)->c_cpuver) == SPITFIRE_IMPL)
#define	CPU_ISBLACKBIRD(cip)	(CPU_IMPL((cip)->c_cpuver) == BLACKBIRD_IMPL)
#define	CPU_ISSABRE(cip)	(CPU_IMPL((cip)->c_cpuver) == SABRE_IMPL)
#define	CPU_ISHUMMINGBIRD(cip)	(CPU_IMPL((cip)->c_cpuver) == HUMMBRD_IMPL)
#define	CPU_ISCHEETAH(cip)	(CPU_IMPL((cip)->c_cpuver) == CHEETAH_IMPL)
#define	CPU_ISCHEETAH_PLUS(cip)	(CPU_IMPL((cip)->c_cpuver) == CHEETAH_PLUS_IMPL)
#define	CPU_ISJAGUAR(cip)	(CPU_IMPL((cip)->c_cpuver) == JAGUAR_IMPL)
#define	CPU_ISPANTHER(cip)	(CPU_IMPL((cip)->c_cpuver) == PANTHER_IMPL)
#define	CPU_ISSERRANO(cip)	(CPU_IMPL((cip)->c_cpuver) == SERRANO_IMPL)
#define	CPU_ISOLYMPUSC(cip)	(CPU_IMPL((cip)->c_cpuver) == OLYMPUS_C_IMPL)
#define	CPU_ISJUPITER(cip)	(CPU_IMPL((cip)->c_cpuver) == JUPITER_IMPL)

/*
 * The class field splits up all errors into basic error classes.
 *
 * These are fully defined for sun4u in the common memtestio.h file.
 */


/*
 * The sub-class field further defines the error within its class.
 */
#define	ERR_SUBCL_STAG		(ERR_SUBCL_GENMAX + 0x1) /* snoop tag errs */
#define	ERR_SUBCL_MTAG		(ERR_SUBCL_GENMAX + 0x2) /* M tag errs */
#define	ERR_SUBCL_ADDR		(ERR_SUBCL_GENMAX + 0x3) /* address errs */
#define	ERR_SUBCL_REFSH		(ERR_SUBCL_GENMAX + 0x4) /* address errs */

#define	ERR_SUBCLASS_ISSTAG(x)	(ERR_SUBCLASS(x) == ERR_SUBCL_STAG)
#define	ERR_SUBCLASS_ISMTAG(x)	(ERR_SUBCLASS(x) == ERR_SUBCL_MTAG)
#define	ERR_SUBCLASS_ISADDR(x)	(ERR_SUBCLASS(x) == ERR_SUBCL_ADDR)
#define	ERR_SUBCLASS_ISREFSH(x)	(ERR_SUBCLASS(x) == ERR_SUBCL_REFSH)

/*
 * The trap field defines the type of trap that is generated by the error.
 *
 * These are fully defined for sun4u in the common memtestio.h file.
 */


/*
 * The protection field defines the type of protection that is triggered
 * by the error.
 *
 * These are fully defined for sun4u in the common memtestio.h file.
 */


/*
 * The mode field defines what is accessing the data and how.
 *
 * These are fully defined for sun4u in the common memtestio.h file.
 */


/*
 * The access field defines the type of access that generates the error.
 *
 * These are fully defined for sun4u in the common memtestio.h file.
 */


/*
 * The miscellaneous field helps to further encode commands that
 * could not be encoded with just the other fields.  Note that the MISC
 * field is encoded as a bit-field unlike the other command fields.
 *
 * These are fully defined for sun4u in the common memtestio.h file.
 */


/*
 * Short definitions to help make the command encodings more readable.
 */
#define	SF	(ERR_CPU_SF	 << ERR_CPU_SHIFT)
#define	BB	(ERR_CPU_BB	 << ERR_CPU_SHIFT)
#define	SAB	(ERR_CPU_SA	 << ERR_CPU_SHIFT)
#define	HB	(ERR_CPU_HB	 << ERR_CPU_SHIFT)
#define	CH	(ERR_CPU_CH	 << ERR_CPU_SHIFT)
#define	CHP	(ERR_CPU_CHP	 << ERR_CPU_SHIFT)
#define	JA	(ERR_CPU_JA	 << ERR_CPU_SHIFT)
#define	JG	(ERR_CPU_JG	 << ERR_CPU_SHIFT)
#define	PN	(ERR_CPU_PN	 << ERR_CPU_SHIFT)
#define	SR	(ERR_CPU_SR	 << ERR_CPU_SHIFT)
#define	OC	(ERR_CPU_OC	 << ERR_CPU_SHIFT)
#define	JP	(ERR_CPU_JP	 << ERR_CPU_SHIFT)

#define	STAG	(ERR_SUBCL_STAG	 << ERR_SUBCL_SHIFT)
#define	MTAG	(ERR_SUBCL_MTAG	 << ERR_SUBCL_SHIFT)
#define	ADDR	(ERR_SUBCL_ADDR	 << ERR_SUBCL_SHIFT)
#define	REFSH	(ERR_SUBCL_REFSH << ERR_SUBCL_SHIFT)

/*
 * The following defines apply to the choice of E$:{L2,L3}
 * for E$ injection errors in multilevel E$ like Panther.
 *
 * XXX	so far these are panther only and I think they may have
 *	been removed in a recent panther putback.  Check/move.
 *	Otherwise move to common code so that they are not duplicated later.
 */
#define	EC_TYPE_L2		0
#define	EC_TYPE_L3		1

#define	ERR_LEVEL_L2(C)	\
	(ERR_CLASS_ISL2(C) || ERR_CLASS_ISL2WB(C) || ERR_CLASS_ISL2CP(C) || \
	ERR_CLASS_ISINT(C))

#define	ERR_LEVEL_L3(C)	\
	(ERR_CLASS_ISL3(C) || ERR_CLASS_ISL3WB(C) || ERR_CLASS_ISL3CP(C))

/*
 * Used by common code for shared cache specifics like parking core
 * As other CMP chips with shared caches get added, just OR with existing
 * AND clause below: example: ( CPU_IS_PANTHER | CPU_IS_XXX).
 * There are some CMP chips like Jaguar that do not have shared L2/L3
 * caches. The CPU_IMPL_IS_CMP check may be unnecessary but is provided
 * as an extra sanity check.
 */
#define	CPU_SHARED_CACHE(cip)  (CPU_IMPL_IS_CMP(CPU_IMPL((cip)->c_cpuver)) && \
			((CPU_ISPANTHER(cip)) || (CPU_ISOLYMPUSC(cip)) || \
			(CPU_ISJUPITER(cip))))

/*
 * Sun4u generic error command definitions (for sun4u_generic_cmds array).
 */

/*
 * System bus memory errors.
 *			 CPU  CLASS  SUBCL  TRAP PROT  MODE  ACCESS  MISC
 */
#define	G4U_KD_UE	(GEN | MEM | DATA | DEF | UE | KERN | LOAD | NA0)
#define	G4U_KI_UE	(GEN | MEM | DATA | DEF | UE | KERN | FETC | NA0)
#define	G4U_UD_UE	(GEN | MEM | DATA | DEF | UE | USER | LOAD | NA0)
#define	G4U_UI_UE	(GEN | MEM | DATA | DEF | UE | USER | FETC | NA0)
#define	G4U_IO_UE	(GEN | MEM | DATA | DEF | UE | DMA  | LOAD | NA0)
#define	G4U_KD_CE	(GEN | MEM | DATA | DEF | CE | KERN | LOAD | NA0)
#define	G4U_KD_CETL1	(GEN | MEM | DATA | DEF | CE | KERN | LOAD | TL1)
#define	G4U_KD_CESTORM	(GEN | MEM | DATA | DEF | CE | KERN | LOAD | STORM)
#define	G4U_KI_CE	(GEN | MEM | DATA | DEF | CE | KERN | FETC | NA0)
#define	G4U_KI_CETL1	(GEN | MEM | DATA | DEF | CE | KERN | FETC | TL1)
#define	G4U_UD_CE	(GEN | MEM | DATA | DEF | CE | USER | LOAD | NA0)
#define	G4U_UI_CE	(GEN | MEM | DATA | DEF | CE | USER | FETC | NA0)
#define	G4U_IO_CE	(GEN | MEM | DATA | DEF | CE | DMA  | LOAD | NA0)
#define	G4U_MPHYS	(GEN | MEM | DATA | DEF | NA3| NA2  | NA1  | PHYS)
#define	G4U_KMVIRT	(GEN | MEM | DATA | DEF | NA3| KERN | NA1  | VIRT)
#define	G4U_UMVIRT	(GEN | MEM | DATA | DEF | NA3| USER | NA1  | VIRT | NI)
#define	G4U_KMPEEK	(GEN | MEM | DATA | NA4 | NA3| KERN | LOAD | PEEK)
#define	G4U_KMPOKE	(GEN | MEM | DATA | NA4 | NA3| KERN | LOAD | POKE)

/*
 * L2$ physical and virtual errors.
 *			 CPU  CLASS  SUBCL  TRAP PROT  MODE  ACCESS  MISC
 */
#define	G4U_L2PHYS	(GEN | L2  | DATA | NA4 | NA3| NA2  | NA1  | PHYS)
#define	G4U_KL2VIRT	(GEN | L2  | DATA | NA4 | NA3| KERN | NA1  | VIRT)
#define	G4U_UL2VIRT	(GEN | L2  | DATA | NA4 | NA3| USER | NA1  | VIRT | NI)
#define	G4U_L2TPHYS	(GEN | L2  | TAG  | NA4 | NA3| NA2  | NA1  | PHYS)
#define	G4U_KL2TVIRT	(GEN | L2  | TAG  | NA4 | NA3| KERN | NA1  | VIRT | NS)
#define	G4U_UL2TVIRT	(GEN | L2  | TAG  | NA4 | NA3| USER | NA1  | VIRT | NS)

/*
 * D$ physical and virtual errors.
 *			 CPU  CLASS  SUBCL  TRAP PROT  MODE  ACCESS  MISC
 */
#define	G4U_DPHYS	(GEN | DC  | DATA | NA4 | NA3| NA2  | NA1  | PHYS)
#define	G4U_KDVIRT	(GEN | DC  | DATA | NA4 | NA3| KERN | NA1  | VIRT | NS)
#define	G4U_UDVIRT	(GEN | DC  | DATA | NA4 | NA3| USER | NA1  | VIRT | NS)
#define	G4U_DTPHYS	(GEN | DC  | TAG  | NA4 | NA3| NA2  | NA1  | PHYS)
#define	G4U_KDTVIRT	(GEN | DC  | TAG  | NA4 | NA3| KERN | NA1  | VIRT | NS)
#define	G4U_UDTVIRT	(GEN | DC  | TAG  | NA4 | NA3| USER | NA1  | VIRT | NS)

/*
 * I$ physical and virtual errors.
 *			 CPU  CLASS  SUBCL  TRAP PROT  MODE  ACCESS  MISC
 */
#define	G4U_IPHYS	(GEN | IC  | DATA | NA4 | NA3| NA2  | NA1  | PHYS)
#define	G4U_KIVIRT	(GEN | IC  | DATA | NA4 | NA3| KERN | NA1  | VIRT | NS)
#define	G4U_UIVIRT	(GEN | IC  | DATA | NA4 | NA3| USER | NA1  | VIRT | NS)
#define	G4U_ITPHYS	(GEN | IC  | TAG  | NA4 | NA3| NA2  | NA1  | PHYS)
#define	G4U_KITVIRT	(GEN | IC  | TAG  | NA4 | NA3| KERN | NA1  | VIRT | NS)
#define	G4U_UITVIRT	(GEN | IC  | TAG  | NA4 | NA3| USER | NA1  | VIRT | NS)

#ifdef	__cplusplus
}
#endif

#endif	/* _MEMTESTIO_U_H */
