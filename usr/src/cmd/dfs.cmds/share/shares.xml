<?xml version="1.0"?>
<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
<!--
    CDDL HEADER START

    The contents of this file are subject to the terms of the
    Common Development and Distribution License (the "License").
    You may not use this file except in compliance with the License.

    You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
    or http://www.opensolaris.org/os/licensing.
    See the License for the specific language governing permissions
    and limitations under the License.

    When distributing Covered Code, include this CDDL HEADER in each
    file and include the License file at usr/src/OPENSOLARIS.LICENSE.
    If applicable, add the following below this CDDL HEADER, with the
    fields enclosed by brackets "[]" replaced with your own identifying
    information: Portions Copyright [yyyy] [name of copyright owner]

    CDDL HEADER END

    Copyright (c) 2004, 2011, Oracle and/or its affiliates. All rights reserved.

    NOTE:  This service manifest is not editable; its contents will
    be overwritten by package or patch operations, including
    operating system upgrade.  Make customizations in a different
    file.
-->

<service_bundle type='manifest' name='SUNWcs:shares'>

<service
	name='network/shares'
	type='service'
	version='1'>

	<create_default_instance enabled='true' />

	<!-- Must have all local filesystems mounted before we share them -->
	<dependency name='filesystem-local'
	    grouping='require_all'
	    restart_on='error'
	    type='service'>
	    	<service_fmri value='svc:/system/filesystem/local' />
	</dependency>
	<!-- Also want to have some form of networking up -->
	<dependency name='network'
	    grouping='require_any'
	    restart_on='error'
	    type='service'>
		<service_fmri value='svc:/milestone/network' />
	</dependency>
	<!--
	  SMB is optional_all so that we don't have to have SMB
	  enabled to work, but if it is, we want to run "after" the
	  smb/service starts.
	-->
	<dependency name='smb'
	    grouping='optional_all'
	    restart_on='error'
	    type='service'>
		<service_fmri value='svc:/network/smb/server' />
	</dependency>

	<!--
	  The start method will cause each share group to be
	  activated. since these are done in parallel and have been
	  pre-checked for sanity, the shareall equivalent should not
	  take overly long, but be prepared.
	 -->

	 <exec_method
	    type='method'
	    name='start'
	    exec='/usr/sbin/share -F all -a'
	    timeout_seconds='3600' />

	 <exec_method
	    type='method'
	    name='stop'
	    exec='/usr/sbin/unshare -F all -a'
	    timeout_seconds='3600' />

	 <exec_method
	    type='method'
	    name='restart'
	    exec='/usr/sbin/share -F all -a'
	    timeout_seconds='3600' />

	 <exec_method
	    type='method'
	    name='refresh'
	    exec='/usr/sbin/share -F all -a'
	    timeout_seconds='3600' />

	 <property_group name='shares' type='framework'>
		<!-- place to store the shares -->
	 </property_group>

	 <property_group name='general' type='framework'>
		<!-- to start/stop service -->
		<propval name='action_authorization' type='astring'
                        value='solaris.smf.manage.shares' />
		<propval name='value_authorization' type='astring'
                        value='solaris.smf.manage.shares' />
	 </property_group>
	<property_group name='startd' type='framework'>
		<propval name='duration' type='astring'
			value='transient' />
	</property_group>
	<template>
		<common_name>
			<loctext xml:lang='C'>
			Share Group
			</loctext>
		</common_name>
		<documentation>
			<manpage title='share' section='1M'
				 manpath='/usr/share/man' />
		</documentation>
	</template>

</service>

</service_bundle>
