#!/sbin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright (c) 2010, 2011, Oracle and/or its affiliates. All rights reserved.
#

. /lib/svc/share/smf_include.sh

#
# Establish PATH for non-built in commands
#
export PATH=/sbin:/usr/bin:/usr/sbin

# Usage
USAGE="Usage: $0 start"

TMP_DIR=/system/volatile

# name of profile generated by System Configuration Interactive (SCI) tool
SCIT_PROFILE="scit_profile.xml"

# path to SC profile generated by SCI tool
SCIT_PROFILE_SRC="${TMP_DIR}/${SCIT_PROFILE}"

# smf profile directory
SMF_PROFILE_DIR=/etc/svc/profile/site

# target destination for SC profile generated by SCI tool
SCIT_PROFILE_DST="${SMF_PROFILE_DIR}/${SCIT_PROFILE}"

# smf profile customizing process of configuration
CONFIG_XML="enable_sci.xml"
CONFIG_XML_DEST="${SMF_PROFILE_DIR}/${CONFIG_XML}"

# system configuration process control
PG_CONFIGURATION="sysconfig"

#
# List of configuration screens which are applicable
# to particular running environment:
#  - global zone: all screens
#  - non-global zone with exclusive IP stack:
#    skip configuration of date and time, keyboard layout
#  - non-global zone with shared IP stack:
#    skip configuration of date and time, keyboard layout, networking
#
SCI_SCREENS_GZ="system"
SCI_SCREENS_NGZ_IP_EXCLUSIVE="identity,network,naming_services,location,users"
SCI_SCREENS_NGZ_IP_SHARED="identity,naming_services,location,users"

# configuration properties
# enable system configuration
PROP_CONFIGURE="$PG_CONFIGURATION/configure"

# bring up System Configuration Interactive tool
PROP_INTERACTIVE_CONFIG="$PG_CONFIGURATION/interactive_config"

# list of groups to be configured
PROP_CONFIG_GROUPS="$PG_CONFIGURATION/config_groups"

# default value for unconfigured properties
SMF_UNCONFIGURED_VALUE=""

#
# Binary tested for determining if we are in ROZR zone booted in ready-only
# mode.
#
ROZR_TEST_BINARY="/sbin/sh"
# ROZR error message
ROZR_ERR_MSG="\nDetected ROZR zone booted in read-only mode. System \
Configuration not permitted.\nPlease refer to mwac(5) man page \
for additional information.\n"

#
# clean_up_configuration()
#
# Description:
#     Clean up configuration by deleting configuration site-profile.
#     Site-profile configuration is unrolled by subsequent manifest-import.
#     Abort in case of failure.
#
clean_up_configuration()
{
        if [[ -f $CONFIG_XML_DEST ]]; then
            rm $CONFIG_XML_DEST
        fi

        if (( $? != 0 )) ; then
            print -u2 "Could not remove $CONFIG_XML_DEST profile, aborting."
            exit $SMF_EXIT_ERR_FATAL
        fi
}


#
# clean_up_and_abort()
#
# Description:
#     Ran into fatal error. Clean up configuration by deleting
#     configuration site-profile and abort. site-profile configuration
#     is unrolled by subsequent manifest-import.
#
clean_up_and_abort()
{
	rm $CONFIG_XML_DEST
        if (( $? != 0 )) ; then
            print -u2 "Could not remove $CONFIG_XML_DEST profile."

        fi

	print -u2 "Aborting."
	exit $SMF_EXIT_ERR_FATAL
}


#
# check_rozr_and_abort()
#
# Description:
#     If we are in ROZR non-global zone booted in read-only mode,
#     log the error message and drop service into maintenance mode.
#
# Parameters:
#     $1 - error message emitted if ROZR zone booted in read-only mode
#          is detected.
#
check_rozr_and_abort()
{
	typeset err_msg="$1"

	#
	# Check if specified binary is writable. It is if ROZR zone is booted
	# in writable mode. If that file is read-only, emit error message
	# and drop service into maintenance mode.
	#
	if [[ ! -w "$ROZR_TEST_BINARY" ]] ; then
		print -u1 "$err_msg" | smf_console

		clean_up_and_abort
	fi
}

#
# get_smf_prop()
#
# Description:
#     Retrieve value of SMF property.
#     For 'astring' type of property, take care of removing quoting backslashes,
#     since according to svcprop(1) man page, shell metacharacters
#     (';', '&', '(', ')', '|', '^', '<', '>', newline, space, tab, backslash,
#     '"', single-quote, '`') are quoted by backslashes (\).
#
# Parameters:
#     $1 - SMF property name
#
# Returns:
#     0 - property was configured in SC manifest
#     1 - property was not configured in SC manifest
#
get_smf_prop()
{
	typeset prop_name="$1"
	typeset prop_value
	typeset prop_type

	#
	# If property is not set for service instance (which means it was not
	# defined in SC manifest), return with 'unconfigured' value.
	#
	svcprop -Cq -p "$prop_name" $SMF_FMRI
	if (( $? != 0 )) ; then
		print -u1 $SMF_UNCONFIGURED_VALUE
		return 1
	fi

	#
	# retrieve property.
	#
	prop_value=$(svcprop -p "$prop_name" $SMF_FMRI)
	if (( $? != 0 )) ; then
		print -u2 "Failed to obtain value of <$prop_name> property" \
		    "which is suspicious, defaulting to" \
		    "<$SMF_UNCONFIGURED_VALUE>."

		print -u1 $SMF_UNCONFIGURED_VALUE
		return 1
	fi

	# for 'astring' type, remove backslashes from quoted metacharacters
	prop_type=$(svccfg -s $SMF_FMRI listprop "$prop_name" |
	    nawk '{ print $2 }')

	if [[ $prop_type == "astring" ]] ; then	
		prop_value=$(print "$prop_value" | sed -e 's/\\\(.\)/\1/g')

		if (( $? != 0 )) ; then
			print -u2 "Failed when trying to remove '\' from" \
			    "<$prop_name> property, defaulting to" \
			    "<$SMF_UNCONFIGURED_VALUE>."

			print -u1 $SMF_UNCONFIGURED_VALUE
			return 1
		fi

		#
		# Since according to svcprop(1) man page empty ASCII string
		# value is presented as a pair of double quotes (""), we need
		# to check for this combination and replace it
		# with empty string.
		#
		[[ "$prop_value" == "\"\"" ]] && prop_value=""
	fi

	print -u1 "$prop_value"
	return 0
}


#
# set_terminal_type()
#
# Description:
#     If TERM variable is not defined, set it to:
#      * "sun" if connected to SPARC via keyboard/monitor,
#      * "sun-color" if connected to X86 via keyboard/monitor,
#      * "vt100" otherwise.
#
set_terminal_type()
{
	[[ -n "$TERM" ]] && return

	# start with vt100 as a default value
	TERM=vt100

	arch=$(uname -p)
	if [[ "$arch" == "sparc" ]] ; then
		output_device=$(eeprom output-device | cut -f 2 -d '=')

		[[ -n "$output_device" ]] &&
		    print -u1 " output-device property is set to" \
		        "$output_device." ||
		    print -u1 " output-device property is not configured."

		[[ "$output_device" == "screen" ]] && TERM="sun"
	else
		cons=$(devprop console)
		if (( $? == 0 )) ; then
			if [[ $cons =~ ^tty ]] ; then
				print -u1 " Console redirected to serial port" \
				    "$cons."
			else
				TERM="sun-color"
			fi
		else
		    print -u1 " Could not obtain value of console property."
		fi
	fi

	print -u1 " Setting terminal type to $TERM."

	export TERM
}

#
# run_sci_tool()
#
# Description:
#     Invokes System Configuration Interactive tool.
#     Aborts with SMF_EXIT_ERR_FATAL in case of fatal failure.
#
run_sci_tool()
{
	print -u1 " Interactive configuration requested," \
	    "bringing up System Configuration Interactive tool."

	if [[ -z $(which sysconfig 2>/dev/null) ]] ; then
		print -u1 " SCI tool not found," \
		    "skipping interactive configuration."

		return
	fi

	#
	# First make sure terminal type is configured. That's required by curses
	# module which SCI tool consumes.
	#
	set_terminal_type

	#
	# Construct list of configuration screens which are applicable
	# to current running environment.
	# Initially assume that we are in global zone.
	#
	typeset sci_screens=$SCI_SCREENS_GZ

	if smf_is_nonglobalzone; then
		typeset zone_type=$(zonename -t)

		if (( $? != 0 )) ; then
			print -u2 "Could not detect type of non-global zone," \
			    "aborting."
			exit $SMF_EXIT_ERR_FATAL
		fi

		print -u1 " Detected running environment: non-global zone" \
		    "with <$zone_type> IP stack."

		if [[ "$zone_type" == "shared" ]]; then
			sci_screens=$SCI_SCREENS_NGZ_IP_SHARED
		else
			sci_screens=$SCI_SCREENS_NGZ_IP_EXCLUSIVE
		fi
	else
		# global zone and IP_EXCLUSIVE zone share the same groups
		# that need to be configured
		print -u1 " Detected running environment: global zone."
		sci_screens=$SCI_SCREENS_NGZ_IP_EXCLUSIVE

	fi

        # filter out groups which are not subject of configuration
        typeset config_groups=$(get_smf_prop $PROP_CONFIG_GROUPS)

        # if there is nothing to configure, skip invoking SCI tool
        if [[ -z "$config_groups" ]] ; then
                print -u1 " $PROP_CONFIG_GROUPS property not set," \
                    "skipping interactive configuration."

                return
        fi

        print -u1 " Groups to be configured: <$config_groups>"

        # if there is nothing to configure, skip invoking SCI tool
        if [[ -z "$sci_screens" ]] ; then
                print -u1 " There are no SCI screens to be displayed," \
                    "skipping interactive configuration."

                return
        fi

        print -u1 " SCI screens to be displayed: <$sci_screens>"

	sysconfig create-profile -g $sci_screens -o $SCIT_PROFILE_SRC \
	    < /dev/console > /dev/console 2>&1
	typeset -i ret=$?

	# if SCI tool failed to create SC profile, abort
	if [[ $ret != 0 ]] ; then
		print -u2 -f "%s%d%s\n" \
		    "SCI tool failed to create SC profile, (ret=" \
		    $ret \
		    "), aborting."

		exit $SMF_EXIT_ERR_FATAL
	fi

	#
	# If SCI tool didn't generate SC profile (for instance when user
	# prematurely quit the application), drop service to maintenance mode.
	#
	if [[ ! -r $SCIT_PROFILE_SRC ]] ; then
		print -u1 " SCI tool did not create SC profile," \
		    "skipping the rest of interactive configuration." \
		    "Interactive configuration will resume on next " \
		    "boot." | smf_console
		exit $SMF_EXIT_ERR_FATAL
	fi

	# move created SC profile to the directory dedicated for smf profiles
	mv $SCIT_PROFILE_SRC $SCIT_PROFILE_DST

	if (( $? != 0 )) ; then
		print -u2 "Failed to move $SCIT_PROFILE_SRC" \
                    "to $SCIT_PROFILE_DST, aborting."

		exit $SMF_EXIT_ERR_FATAL
	fi
}

#
# configure_system()
#
# Description:
#     Takes care of generic System Configuration tasks:
#      - in case of interactive configuration scenario, invokes
#        System Configuration Interactive tool
#      - applies generated System Configuration profile
#
configure_system()
{
	# Check if system configuration should be carried out
	enable_configuration=$(get_smf_prop $PROP_CONFIGURE)
	if [[ "$enable_configuration" == "true" ]]; then

	        #
	        # Running configuration process is not permitted in ROZR
		# non-global zone booted in read-only mode.
	        #

	        check_rozr_and_abort "$ROZR_ERR_MSG"

		#
		# Check if System Configuration Interactive tool should be
		# invoked to carry out interactive system configuration.
		#
		interactive_config=$(get_smf_prop $PROP_INTERACTIVE_CONFIG)
		if [[ "$interactive_config" == "true" ]]; then
			run_sci_tool
		fi

		#
		# System configuration succeeded, clean up configuration
		# properties.
		#
		print -u1 " Cleaning up configuration by removing" \
		    "$CONFIG_XML_DEST profile."

		clean_up_configuration

		#
		# Changes in SC profiles will be applied by manifest-import
		# which for this purpose depends on this service.
		#
		# manifest-import is expected to:
		#  * apply System Configuration profiles residing
		#       in /etc/svc/profile/site/ directory.
		#  * clean up configuration of this service (as related smf
		#    profile was removed.
		#
		print -u1 "System successfully configured."
	fi
}


## Main ##
#
# Usage: /lib/svc/method/milestone-config start
#
if (( $# != 1 )) ; then
	print -u2 "$USAGE"
	exit $SMF_EXIT_ERR_FATAL
fi

# only 'start' method is supported
case "$1" in
'start')
	# take care of generic System Configuration tasks
	configure_system
	;;

*)
	print -u2 "$USAGE"
	exit $SMF_EXIT_ERR_FATAL
	;;
esac

exit $SMF_EXIT_OK

