#!/usr/bin/ksh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License, Version 1.0 only
# (the "License").  You may not use this file except in compliance
# with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
#ident	"%Z%%M%	%I%	%E% SMI"
#
# Copyright (c) 2001 by Sun Microsystems, Inc.
# All rights reserved.
#

#
# Source the utilities.
#
DIRNAME=`dirname $0`
. ${DIRNAME}/utilities.san

#
# Process the input arguments.
#
VALIDOPTS=dr:p:
process_args $@

#
# Set variables.
#
TESTNAME=`basename $0`
if [ ! -z "${DEBUG}" ]
then
    OUTFILE=/tmp/${TESTNAME}.$$
    echo "Output from test: ${TESTNAME}" >${OUTFILE}
    echo >>${OUTFILE}
    echo "debug output can be found at ${OUTFILE}"
else
    OUTFILE=/dev/null
fi

#
# Display the table.
#
DATAFILE=/tmp/${TESTNAME}.data.$$
/usr/sbin/dhtadm -r ${DHCPRSRC} -p ${DHCPPATH} -P >${DATAFILE} 2>>${OUTFILE}
RET=$?
if [ "${RET}" != "0" ]
then
    rm ${DATAFILE}
    echo "Error displaying dhcptab = ${RET}"
    echo "${TESTNAME} - Test failed!"
    exit 1
fi

#
# Verify that the option is in the displayed output.
#
OPTION=`grep "^TestOpt" ${DATAFILE}`
if [ -z "${OPTION}" ]
then
    rm ${DATAFILE}
    echo "Option, TestOpt, not found in dhcptab"
    echo "${TESTNAME} - Test failed!"
    exit 1
fi

#
# Verify that the defintion was defined correctly
#
OPTION_DEFINITION=$(get_value ${OPTION})
if [ "${OPTION_DEFINITION}" != "Site,130,IP,1,0" ]
then
    echo "Option definition is not valid: ${OPTION_DEFINITION}"
    echo "${TESTNAME} - Test failed!"
    exit 1
fi

#
# Verify that the macro is in the displayed output.
#
MACRO=`grep "^TestMac" ${DATAFILE}`
if [ -z "${MACRO}" ]
then
    rm ${DATAFILE}
    echo "Macro, TestMac, not found in dhcptab"
    echo "${TESTNAME} - Test failed!"
    exit 1
fi
rm ${DATAFILE}

#
# Verify that the defintion was defined correctly
#
MACRO_DEFINITION=$(get_value ${MACRO})
SRCH=":TestOpt=129.148.11.240:"
macro_find_and_replace

#
# Verify that there was nothing else in the definition
#
if [ "${MACRO_DEFINITION}" != ":" ]
then
    echo "Macro definition has invalid extra symbols: ${MACRO_DEFINITION}"
    echo "${TESTNAME} - Test failed!"
    exit 1
fi

echo "${TESTNAME} - Test passed."
exit 0
