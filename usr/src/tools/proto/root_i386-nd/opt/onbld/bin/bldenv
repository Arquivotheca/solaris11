#!/usr/bin/ksh93
#
# 
#

#
# Copyright (c) 1999, 2011, Oracle and/or its affiliates. All rights reserved.
#
# Uses supplied "env" file, based on /opt/onbld/etc/env, to set shell variables
# before spawning a shell for doing a release-style builds interactively
# and incrementally.
#

function usage
{
    OPTIND=0
    getopts -a "${progname}" "${USAGE}" OPT '-?'
    exit 2
}

function is_source_build
{
	"${flags.s.e}" || "${flags.s.d}" || "${flags.s.h}" || "${flags.s.o}"
	return $?
}

#
# single function for setting -S flag and doing error checking.
# usage: set_S_flag <type>
# where <type> is the source build type ("E", "D", ...).
#
function set_S_flag
{
	if is_source_build; then
		print 'Can only build one source variant at a time.'
		exit 1
	fi
	
	case "$1" in
		"E") flags.s.e=true ;;
		"D") flags.s.d=true ;;
		"H") flags.s.h=true ;;
		"O") flags.s.o=true ;;
		*)   usage ;;
	esac
}

typeset -r USAGE=$'+
[-?\n@(#)\$Id: bldenv (OS/Net) 2008-04-06 \$\n]
[-author?OS/Net community <tools-discuss@opensolaris.org>]
[+NAME?bldenv - spawn shell for interactive incremental OS-Net
    consolidation builds]
[+DESCRIPTION?bldenv is a useful companion to the nightly(1) script for
    doing interactive and incremental builds in a workspace
    already built with nightly(1). bldenv spawns a shell set up
    with the same environment variables taken from an env_file,
    as prepared for use with nightly(1).]
[+?In addition to running a shell for interactive use, bldenv
    can optionally run a single command in the given environment,
    in the vein of sh -c or su -c. This is useful for
    scripting, when an interactive shell would not be. If the
    command is composed of multiple shell words or contains
    other shell metacharacters, it must be quoted appropriately.]
[+?bldenv is particularly useful for testing Makefile targets
    like clobber, install and _msg, which otherwise require digging
    through large build logs to figure out what is being
    done.]
[+?bldenv is also useful if you run into build issues with the
    source product or when generating OpenSolaris deliverables.
    If a source product build is flagged, the environment is set
    up for building the indicated source product tree, which is
    assumed to have already been created. If the OpenSolaris
    deliverables flag (-O) is set in NIGHTLY_OPTIONS, the
    environment is set up for building just the open source.
    This includes using an alternate proto area, as well as
    using the closed binaries in $CODEMGR_WS/closed.skel (which
    is assumed to already exist).]
[+?By default, bldenv will invoke the shell specified in
    $SHELL. If $SHELL is not set or is invalid, csh will be
    used.]
[c?force the use of csh, regardless of the  value  of $SHELL.]
[f?invoke csh with the -f (fast-start) option. This option is valid
    only if $SHELL is unset or if it points to csh.]
[d?set up environment for doing DEBUG builds (default is non-DEBUG)]
[t?set up environment to use the tools in usr/src/tools (this is the
    default, use +t to use the tools from /opt/onbld)]
[S]:[option?Build a variant of the source product.
The value of \aoption\a must be one of the following:]{
       [+E?build the exportable source variant of the source product.]
       [+D?build the domestic  source  (exportable + crypt) variant of
	   the source product.]
       [+H?build hybrid source (binaries + deleted source).]
       [+O?simulate an OpenSolaris (open source only) build.]
}

<env_file> [command]

[+EXAMPLES]{
    [+?Example 1: Interactive use]{
	[+?Use bldenv to spawn a shell to perform  a  DEBUG  build  and
	    testing of the  Makefile  targets  clobber and install for
	    usr/src/cmd/true.]
	[+\n% rlogin wopr-2 -l gk
{root::wopr-2::49} bldenv -d /export0/jg/on10-se.env
Build type   is  DEBUG
RELEASE      is  5.10
VERSION      is  wopr-2::on10-se::11/01/2001
RELEASE_DATE is  May 2004
The top-level `setup\' target is available to build headers
and tools.
Using /usr/bin/tcsh as shell.
{root::wopr-2::49}
{root::wopr-2::49} cd $SRC/cmd/true
{root::wopr-2::50} make
{root::wopr-2::51} make clobber
/usr/bin/rm -f true true.po
{root::wopr-2::52} make
/usr/bin/rm -f true
cat true.sh > true
chmod +x true
{root::wopr-2::53} make install
install -s -m 0555 -u root -g bin -f /export0/jg/on10-se/proto/root_sparc/usr/bin true
`install\' is up to date.]
    }
    [+?Example 2: Non-interactive use]{
	[+?Invoke bldenv to create SUNWonbld with a single command:]
	[+\nexample% bldenv onnv_06 \'cd $SRC/tools && make pkg\']
	}
}
[+SEE ALSO?\bnightly\b(1)]
'

# main

# boolean flags (true/false)
typeset flags=(
	typeset c=false
	typeset f=false
	typeset d=false
	typeset O=false
	typeset P=false
	typeset o=false
	typeset t=true
	typeset s=(
		typeset e=false
		typeset h=false
		typeset d=false
		typeset o=false
	)
)

typeset progname="$(basename "${0}")"

OPTIND=1
SUFFIX="-nd"

while getopts -a "${progname}" "${USAGE}" OPT ; do 
    case ${OPT} in
	  c)	flags.c=true  ;;
	  +c)	flags.c=false ;;
	  f)	flags.f=true  ;;
	  +f)	flags.f=false ;;
	  d)	flags.d=true  SUFFIX=""    ;;
	  +d)	flags.d=false SUFFIX="-nd" ;;
	  t)	flags.t=true  ;;
	  +t)	flags.t=false ;;
	  S)	set_S_flag "$OPTARG" ;;
	  \?)	usage ;;
    esac
done
shift $((OPTIND-1))

# test that the path to the environment-setting file was given
if (( $# < 1 )) ; then
	usage
fi

# force locale to C
export \
	LC_COLLATE=C \
	LC_CTYPE=C \
	LC_MESSAGES=C \
	LC_MONETARY=C \
	LC_NUMERIC=C \
	LC_TIME=C

# clear environment variables we know to be bad for the build
unset \
	LD_OPTIONS \
	LD_LIBRARY_PATH \
	LD_AUDIT \
	LD_BIND_NOW \
	LD_BREADTH \
	LD_CONFIG \
	LD_DEBUG \
	LD_FLAGS \
	LD_LIBRARY_PATH_64 \
	LD_NOVERSION \
	LD_ORIGIN \
	LD_LOADFLTR \
	LD_NOAUXFLTR \
	LD_NOCONFIG \
	LD_NODIRCONFIG \
	LD_NOOBJALTER \
	LD_PRELOAD \
	LD_PROFILE \
	CONFIG \
	GROUP \
	OWNER \
	REMOTE \
	ENV \
	ARCH \
	CLASSPATH

#
# Setup environment variables
#
if [[ -f /etc/nightly.conf ]]; then
	source /etc/nightly.conf
fi

if [[ -f "$1" ]]; then
	if [[ "$1" == */* ]]; then
		source "$1"
	else
		source "./$1"
	fi
else
	if [[ -f "/opt/onbld/env/$1" ]]; then
		source "/opt/onbld/env/$1"
	else
		printf \
		    'Cannot find env file as either %s or /opt/onbld/env/%s\n' \
		    "$1" "$1"
		exit 1
	fi
fi
shift

# STUBROOT is derived from ROOT. ROOT is defined by the environment file
STUBROOT="${ROOT}_stub";	export STUBROOT

# contents of stdenv.sh inserted after next line:
# STDENV_START
#
#

#
# Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
# ident	"%Z%%M%	%I%	%E% SMI"
#

#
# Shell script fragment to set standard build environment variables,
# for use by bldenv(1) and nightly(1).  Can be overridden by the
# user's environment file.  Because bldenv and nightly are both ksh
# scripts, we can use ksh syntax here.
#

#
# the source product has no SCCS history, and is modified to remove source
# that cannot be shipped. EXPORT_SRC is where the clear files are copied, then
# modified with 'make EXPORT_SRC'.
#
[ -n "$EXPORT_SRC" ] || export EXPORT_SRC="$CODEMGR_WS/export_src"

#
# CRYPT_SRC is similar to EXPORT_SRC, but after 'make CRYPT_SRC' the files in
# xmod/cry_files are saved. They are dropped on the exportable source to create
# the domestic build.
#
[ -n "$CRYPT_SRC" ] || export CRYPT_SRC="$CODEMGR_WS/crypt_src"

#
# OPEN_SRCDIR is where we copy the open tree to so that we can be sure
# we don't have a hidden dependency on closed code.  The name ends in
# "DIR" to avoid confusion with the flags related to open source
# builds.
#
[ -n "$OPEN_SRCDIR" ] || export OPEN_SRCDIR="$CODEMGR_WS/open_src"

#
# Flag to enable creation of per-build-type proto areas.  If "yes",
# more proto areas are created, which speeds up incremental builds but
# increases storage consumption.  Will be forced to "yes" for
# OpenSolaris deliveries.
#
[ -n "$MULTI_PROTO" ] || export MULTI_PROTO=no
# STDENV_END

#MACH=$(uname -p)

# must match the getopts in nightly.sh
OPTIND=1
NIGHTLY_OPTIONS="-${NIGHTLY_OPTIONS#-}"
while getopts '+0AaBCDdFfGIilMmNnOoPpRrS:tUuWwXxz' FLAG $NIGHTLY_OPTIONS
do
	case "$FLAG" in
	  O)    flags.O=true  ;;
	  +O)   flags.O=false ;;
	  o)	flags.o=true  ;;
	  +o)	flags.o=false ;;
	  P)	flags.P=true  ;;
	  t)	flags.t=true  ;;
	  +t)	flags.t=false ;;
	  S)	set_S_flag "$OPTARG" ;;
	  *)	;;
	esac
done

POUND_SIGN="#"
# have we set RELEASE_DATE in our env file?
if [ -z "$RELEASE_DATE" ]; then
	RELEASE_DATE=$(LC_ALL=C date +"%B %Y")
fi
BUILD_DATE=$(LC_ALL=C date +%Y-%b-%d)
BASEWSDIR=$(basename $CODEMGR_WS)
DEV_CM="\"@(#)SunOS Internal Development: $LOGNAME $BUILD_DATE [$BASEWSDIR]\""
export DEV_CM RELEASE_DATE POUND_SIGN

export INTERNAL_RELEASE_BUILD=

print 'Build type   is  \c'
if ${flags.d} ; then
	print 'DEBUG'
	unset RELEASE_BUILD
	unset EXTRA_OPTIONS
	unset EXTRA_CFLAGS
else
	# default is a non-DEBUG build
	print 'non-DEBUG'
	export RELEASE_BUILD=
	unset EXTRA_OPTIONS
	unset EXTRA_CFLAGS
fi

[[ "${flags.O}" || "${flags.P}" ]] && export MULTI_PROTO="yes"

# update build-type variables
PKGARCHIVE="${PKGARCHIVE}${SUFFIX}"

# Append source version
if "${flags.s.e}" ; then
	VERSION+=":EXPORT"
	SRC="${EXPORT_SRC}/usr/src"
fi
 
if "${flags.s.d}" ; then
	VERSION+=":DOMESTIC"
	SRC="${EXPORT_SRC}/usr/src"
fi

if "${flags.s.h}" ; then
	VERSION+=":HYBRID"
	SRC="${EXPORT_SRC}/usr/src"
fi
 
if "${flags.s.o}" ; then
	VERSION+=":OPEN_ONLY"
	SRC="${OPEN_SRCDIR}/usr/src"
fi
 
#
# Keep track of this now, before we manipulate $PATH
#
WHICH_SCM=$(dirname $(whence $0))/which_scm
if [[ ! -x $WHICH_SCM ]]; then
	WHICH_SCM=which_scm
fi
$WHICH_SCM | read SCM_TYPE junk


# 	Set PATH for a build
PATH="/opt/onbld/bin:/opt/onbld/bin/${MACH}:/usr/bin:/usr/sbin:/usr/openwin/bin:/usr/sfw/bin:."

[[ -n "${SUNWSPRO}" ]] && export PATH="${SUNWSPRO}/bin:$PATH" 

if [[ -z "$CLOSED_IS_PRESENT" ]]; then
	if [[ -d $SRC/../closed ]]; then
		export CLOSED_IS_PRESENT="yes"
	else
		export CLOSED_IS_PRESENT="no"
	fi
fi

TOOLS="${SRC}/tools"
TOOLS_PROTO="${TOOLS}/proto/root_${MACH}-nd" ; export TOOLS_PROTO

if "${flags.t}" ; then
	export ONBLD_TOOLS="${ONBLD_TOOLS:=${TOOLS_PROTO}/opt/onbld}"

	export STABS="${TOOLS_PROTO}/opt/onbld/bin/${MACH}/stabs"
	export CTFSTABS="${TOOLS_PROTO}/opt/onbld/bin/${MACH}/ctfstabs"
	export GENOFFSETS="${TOOLS_PROTO}/opt/onbld/bin/genoffsets"

	export CTFCONVERT="${TOOLS_PROTO}/opt/onbld/bin/${MACH}/ctfconvert"
	export CTFMERGE="${TOOLS_PROTO}/opt/onbld/bin/${MACH}/ctfmerge"

	PATH="${TOOLS_PROTO}/opt/onbld/bin/${MACH}:${PATH}"
	PATH="${TOOLS_PROTO}/opt/onbld/bin:${PATH}"
	export PATH
fi

export DMAKE_MODE=${DMAKE_MODE:-parallel}

if "${flags.o}" ; then
	export CH=
else
	unset CH
fi
DEF_STRIPFLAG="-s"

TMPDIR="/tmp"

# "o_FLAG" is used by "nightly.sh" (it may be useful to rename this
# variable using a more descriptive name later)
export o_FLAG="$(${flags.o} && print 'y' || print 'n')"

export \
	PATH TMPDIR \
	POUND_SIGN \
	DEF_STRIPFLAG \
	RELEASE_DATE
unset \
	CFLAGS \
	LD_LIBRARY_PATH

# a la ws
ENVLDLIBS1=
ENVLDLIBS2=
ENVLDLIBS3=
STUBENVLDLIBS1=
STUBENVLDLIBS2=
STUBENVLDLIBS3=
ENVCPPFLAGS1=
ENVCPPFLAGS2=
ENVCPPFLAGS3=
ENVCPPFLAGS4=
PARENT_ROOT=
PARENT_TOOLS_ROOT=

if [[ "$MULTI_PROTO" != "yes" && "$MULTI_PROTO" != "no" ]]; then
	printf \
	    'WARNING: invalid value for MULTI_PROTO (%s); setting to "no".\n' \
	    "$MULTI_PROTO"
	export MULTI_PROTO="no"
fi

if [[ "$MULTI_PROTO" == "yes" ]]; then
	export ROOT="${ROOT}${SUFFIX}"
	export STUBROOT="${STUBROOT}${SUFFIX}"
fi

export TONICBUILD="#"

if [[ "${flags.O}" == "true" ]]; then 
	if [[ "$CLOSED_IS_PRESENT" != "yes" ]]; then
		print "OpenSolaris closed binary generation requires "
		print "closed tree"
		exit 1
	fi
	print "Generating OpenSolaris deliverables"
	# We only need CLOSEDROOT in the env for convenience. Makefile.master
	# figures out what it needs when it matters.
	export CLOSEDROOT="${ROOT}-closed"
	export TONICBUILD=""

	# Incompatible with a Parfait build
	flags.P=false
fi

# This should match the settings in nightly.sh's parfait_setup()
if [[ "${flags.P}" == "true" ]]; then
	PARFAIT_BUILD="" ; export PARFAIT_BUILD
	PARFAIT_HOME=${PARFAIT_HOME:-"${BUILD_TOOLS}/parfait/latest"}
	if [ ! -f $PARFAIT_HOME/bin/parfait-cc ]; then
		# Fallback to /ws/onnv-tools if local copy not found
		if [ ! -f /ws/onnv-tools/parfait/latest/bin/parfait-cc ]; then
			# we need these tools!
			echo "\nERROR: parfait-cc was not found! Please " \
				"check that ${PARFAIT_HOME}/bin/parfait-cc " \
				"exists. Do you need to set PARFAIT_HOME " \
				"in your env file?" \
				| tee -a $mail_msg_file >> $LOGFILE
			exit 1
		else
			PARFAIT_HOME="/ws/onnv-tools/parfait/latest/"
		fi
	fi

	CW_CC=$PARFAIT_HOME/bin/parfait-cc
	CW_GCC=$PARFAIT_HOME/bin/parfait-gcc
	CW_CPLUSPLUS=$PARFAIT_HOME/bin/parfait-CC
	CW_GPLUSPLUS=$PARFAIT_HOME/bin/parfait-g++
	AW_AS=$PARFAIT_HOME/bin/parfait-gas
	AW_AS64=$PARFAIT_HOME/bin/parfait-gas
	if [ $MACH = "i386" ]; then
		i386_AS=$PARFAIT_HOME/bin/parfait-as
		i386_LD=$PARFAIT_HOME/bin/parfait-ld
		amd64_LD=$PARFAIT_HOME/bin/parfait-ld
		export i386_AS i386_LD amd64_LD 
	else
		sparc_AS="$PARFAIT_HOME/bin/parfait-as -xregsym=no"
		sparcv9_AS="$PARFAIT_HOME/bin/parfait-as -xregsym=no"
		sparc_LD=$PARFAIT_HOME/bin/parfait-ld
		sparcv9_LD=$PARFAIT_HOME/bin/parfait-ld
		export sparc_AS sparcv9_AS sparc_LD sparcv9_LD
	fi

	export PARFAIT_HOME CW_CC CW_GCC CW_GPLUSPLUS CW_CPLUSPLUS
	export AW_AS AW_AS64
fi


ENVLDLIBS1="-L$ROOT/lib -L$ROOT/usr/lib"
STUBENVLDLIBS1="-L$STUBROOT/lib -L$STUBROOT/usr/lib"
ENVCPPFLAGS1="-I$ROOT/usr/include"
MAKEFLAGS=e

export \
	ENVLDLIBS1 \
	ENVLDLIBS2 \
	ENVLDLIBS3 \
	STUBENVLDLIBS1 \
	STUBENVLDLIBS2 \
	STUBENVLDLIBS3 \
	ENVCPPFLAGS1 \
	ENVCPPFLAGS2 \
	ENVCPPFLAGS3 \
	ENVCPPFLAGS4 \
	MAKEFLAGS \
	PARENT_ROOT \
	PARENT_TOOLS_ROOT \
	SCM_TYPE

printf 'RELEASE      is %s\n'   "$RELEASE"
printf 'VERSION      is %s\n'   "$VERSION"
printf 'RELEASE_DATE is %s\n\n' "$RELEASE_DATE"

if [[ -f "$SRC/Makefile" ]] && egrep -s '^setup:' "$SRC/Makefile" ; then
	print "The top-level 'setup' target is available \c"
	print "to build headers and tools."
	print ""

elif "${flags.t}" ; then
	printf \
	    'The tools can be (re)built with the install target in %s.\n\n' \
	    "${TOOLS}"
fi

[[ "${flags.P}" == "true" ]] && printf 'PARFAIT tools activated.\n'


#
# place ourselves in a new task, respecting BUILD_PROJECT if set.
#
/usr/bin/newtask -c $$ ${BUILD_PROJECT:+-p$BUILD_PROJECT}

if [[ "${flags.c}" == "false" && -x "$SHELL" && \
    "$(basename "${SHELL}")" != "csh" ]]; then
	# $SHELL is set, and it's not csh.

	if "${flags.f}" ; then
		print 'WARNING: -f is ignored when $SHELL is not csh'
	fi

	printf 'Using %s as shell.\n' "$SHELL"
	exec "$SHELL" ${@:+-c "$@"}

elif "${flags.f}" ; then
	print 'Using csh -f as shell.'
	exec csh -f ${@:+-c "$@"}

else
	print 'Using csh as shell.'
	exec csh ${@:+-c "$@"}
fi

# not reached
