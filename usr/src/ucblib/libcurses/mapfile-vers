#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright (c) 2006, 2011, Oracle and/or its affiliates. All rights reserved.
#

#
# MAPFILE HEADER START
#
# WARNING:  STOP NOW.  DO NOT MODIFY THIS FILE.
# Object versioning must comply with the rules detailed in
#
#	usr/src/lib/README.mapfiles
#
# You should not be making modifications here until you've read the most current
# copy of that file. If you need help, contact a gatekeeper for guidance.
#
# MAPFILE HEADER END
#

$mapfile_version 2

STUB_OBJECT;

SYMBOL_VERSION SUNW_1.1 {
    global:
	AL		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	AL_PARM		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	AM		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	BC		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	box;
	BS		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	BT		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	CA		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	CD		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	CE		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	CL		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	CM		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	COLS		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=4 } };
	CR		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	CS		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	curscr		{
				ASSERT {
					TYPE=data;
$if __GNUC
					SH_ATTR=nobits;
$endif
					SIZE=addrsize;
				};
			};
	DA		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	DB		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	DC		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	Def_term	{ ASSERT { TYPE=data; SIZE=addrsize } };
	delwin;
	DL		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	DL_PARM		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	DM		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	DO		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	DOWN_PARM	{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	_echoit		{ ASSERT { TYPE=data; SIZE=1 } };
	ED		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	EI		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	endwin;
	_endwin		{
				ASSERT {
					TYPE=data;
$if __GNUC
					SH_ATTR=nobits;
$endif
					SIZE=1;
				};
			};
	EO		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	getcap;
	gettmode;
	GT		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	HC		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	HO		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	HZ		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	IC		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	idlok;
	IM		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	IN		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	initscr;
	IP		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	K0		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	K1		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	K2		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	K3		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	K4		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	K5		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	K6		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	K7		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	K8		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	K9		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	KD		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	KE		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	KH		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	KL		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	KR		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	KS		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	KU		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	LEFT_PARM	{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	LINES		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=4 } };
	LL		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	longname;
	MA		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	MI		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	MS		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	mvcur;
	mvprintw;
	mvscanw;
	mvwin;
	mvwprintw;
	mvwscanw;
	My_term		{
				ASSERT {
					TYPE=data;
$if __GNUC
					SH_ATTR=nobits;
$endif
					SIZE=1;
				};
			};
	NC		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	ND		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	newwin;
	NL		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	NONL		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	normtty		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	NS		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	OS		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	overlay;
	overwrite;
	PC		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	_pfast		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	printw;
	_rawmode	{
				ASSERT {
					TYPE=data;
$if __GNUC
					SH_ATTR=nobits;
$endif
					SIZE=1;
				};
			};
	RC		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	_res_flg	{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=4 } };
	RIGHT_PARM	{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	SC		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	scanw;
	scroll;
	SE		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	setterm;
	SF		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	SO		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	SR		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	stdscr		{
				ASSERT {
					TYPE=data;
$if __GNUC
					SH_ATTR=nobits;
$endif
					SIZE=addrsize;
				};
			};
	subwin;
	TA		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	TE		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	TI		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	touchline;
	touchwin;
	_tty		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=8 } };
	_tty_ch		{ ASSERT { TYPE=data; SIZE=4 } };
	ttytype		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=0x32 } };
	UC		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	UE		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	UL		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	_unctrl		{ ASSERT { TYPE=data; SIZE=addrsize[128] } };
	UP		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	UP_PARM		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	UPPERCASE	{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	US		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	VB		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	VE		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	VS		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	waddch;
	waddstr;
	wclear;
	wclrtobot;
	wclrtoeol;
	wdelch;
	wdeleteln;
	werase;
	wgetch;
	wgetstr;
	winsch;
	winsertln;
	wmove;
	wprintw;
	wrefresh;
	wscanw;
	wstandend;
	wstandout;
	XB		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	XN		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	XS		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	XT		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
	XX		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=1 } };
};

SYMBOL_VERSION SUNWprivate_1.1 {
    global:
	_putchar;
    local:
	*;
};
