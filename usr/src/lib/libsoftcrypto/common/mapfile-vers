#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 2008, 2011, Oracle and/or its affiliates. All rights reserved.
#

#
# MAPFILE HEADER START
#
# WARNING:  STOP NOW.  DO NOT MODIFY THIS FILE.
# Object versioning must comply with the rules detailed in
#
#	usr/src/lib/README.mapfiles
#
# You should not be making modifications here until you've read the most current
# copy of that file. If you need help, contact a gatekeeper for guidance.
#
# MAPFILE HEADER END
#


$mapfile_version 2

STUB_OBJECT;

SYMBOL_VERSION SUNWprivate {
    global:
	aes_alloc_keysched;
	aes_cbcmac_multiblock;
	aes_common_init_ctx;
	aes_copy_block;
	aes_decrypt_block;
	aes_decrypt_contiguous_blocks;
	aes_encrypt_block;
	aes_encrypt_contiguous_blocks;
	aes_init_keysched;
	arcfour_crypt;
	arcfour_key_init;
	big_One			{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x14;
$elif _ELF64
						SIZE=0x18;
$else
$error unknown ELFCLASS
$endif
					};
				};
	big_Two			{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x14;
$elif _ELF64
						SIZE=0x18;
$else
$error unknown ELFCLASS
$endif
					};
				};
	big_add;
	big_bitlength;
	big_cmp_abs;
	big_copy;
	big_div_pos;
	big_ext_gcd_pos;
	big_extend;
	big_finish;
	big_init1;
	big_init;
	big_modexp;
	big_modexp_crt;
	big_mont_mul;
	big_mul;
	big_n0;
	big_nextprime_pos;
	big_random;
	big_sub;
	big_sub_pos;
	bignum2bytestring;
	blowfish_alloc_keysched;
	blowfish_decrypt_contiguous_blocks;
	blowfish_encrypt_contiguous_blocks;
	blowfish_init_keysched;
	bytestring2bignum;
	ctr_init_ctx;
	des_alloc_keysched;
	des_decrypt_contiguous_blocks;
	des_encrypt_contiguous_blocks;
	des_init_keysched;
	des_keycheck;
	dh_genkey_pair;
	dh_key_derive;
	dsa_genkey_pair;
	dsa_sign;
	dsa_verify;
	EC_CopyParams;
	EC_DecodeParams;
	EC_FreeDerivedKey;
	EC_FreeParams;
	EC_FreePrivateKey;
	EC_FreePublicKey;
	EC_NewKey;
	EC_NewKeyFromSeed;
	EC_ValidatePublicKey;
	ECDH_Derive;
	ECDSA_SignDigest;
	ECDSA_SignDigestWithSeed;
	ECDSA_VerifyDigest;
	gcm_mul;
	ghash_multiblock;
	pkcs1_decode;
	pkcs1_encode;
	pkcs7_decode;
	pkcs7_encode;
	rsa_decrypt;
	rsa_encrypt;
	rsa_genkey_pair;
	rsaprov_common_init;
	rsaprov_decrypt;
	rsaprov_decrypt_atomic;
	rsaprov_encrypt;
	rsaprov_encrypt_atomic;
	rsaprov_free_context;
	rsaprov_sign;
	rsaprov_sign_atomic;
	rsaprov_sign_final;
	rsaprov_sign_update;
	rsaprov_sign_verify_common_init;
	rsaprov_verify;
	rsaprov_verify_atomic;
	rsaprov_verify_final;
	rsaprov_verify_recover;
	rsaprov_verify_recover_atomic;
	rsaprov_verify_update;
        ucrypto_encrypt;
        ucrypto_encrypt_init;
        ucrypto_encrypt_update;
        ucrypto_encrypt_final;
        ucrypto_decrypt;
        ucrypto_decrypt_init;
        ucrypto_decrypt_update;
        ucrypto_decrypt_final;
	ucrypto_get_mechlist;
	ucrypto_id2mech;
	ucrypto_mech2id;
	ucrypto_sign;
	ucrypto_sign_init;
	ucrypto_sign_update;
	ucrypto_sign_final;
	ucrypto_verify;
	ucrypto_verify_init;
	ucrypto_verify_update;
	ucrypto_verify_final;
	ucrypto_version;
	DEFAULT_PUB_EXPO	{ ASSERT { TYPE=data; SIZE=3 } };
	MD5_DER_PREFIX		{ ASSERT { TYPE=data; SIZE=0x12 } };
	SECITEM_CopyItem;
	SECITEM_FreeItem;
	SECITEM_ZfreeItem;
	SHA1_DER_PREFIX		{ ASSERT { TYPE=data; SIZE=0xf } };
	SHA1_DER_PREFIX_OID	{ ASSERT { TYPE=data; SIZE=0xd } };
	SHA256_DER_PREFIX	{ ASSERT { TYPE=data; SIZE=0x13 } };
	SHA384_DER_PREFIX	{ ASSERT { TYPE=data; SIZE=0x13 } };
	SHA512_DER_PREFIX	{ ASSERT { TYPE=data; SIZE=0x13 } };
    local:
	*;
};
