/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").
 * You may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
 * or http://www.opensolaris.org/os/licensing.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at usr/src/OPENSOLARIS.LICENSE.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright (c) 1997, 2011, Oracle and/or its affiliates. All rights reserved.
 */

/* LINTLIBRARY */
/* PROTOLIB1 */

#include <sys/types.h>
#include <des/softdes.h>
#include <des/desdata.h>
#include <sys/des.h>

/*
 * usr/src/lib/libcrypt
 */

/* crypt.c */
void setkey(const char *key);
void encrypt(char *block, int edflag);
char *crypt(const char *pw, const char *salt);

/* des.c */
int cbc_crypt(char *key, char *buf, size_t len, unsigned int mode, char *ivec);
int ecb_crypt(char *key, char *buf, size_t len, unsigned int mode);

/* des_crypt.c */
void _des_setkey(const char *key);
void des_setkey(const char *key);
void _des_encrypt(char *block, int edflag);
void des_encrypt(char *block, int edflag);
char *des_crypt(const char *pw, const char *salt);

/* des_decrypt.c */
void _des_decrypt1(char *block, char *L, char *IP, char *R, char *preS,
			char *E, char KS[][48], char S[][64], char *f,
			char *tempL, char *P, char *FP);

/* des_encrypt.c */
void des_encrypt1(char *block, char *L, char *IP, char *R, char *preS,
			char *E, char KS[][48], char S[][64], char *f,
			char *tempL, char *P, char *FP);
void _des_encrypt1(char *block, char *L, char *IP, char *R, char *preS,
			char *E, char KS[][48], char S[][64], char *f,
			char *tempL, char *P, char *FP);

/* des_soft.c */
void des_setparity(char *p);
int __des_crypt(char *buf, unsigned len, struct desparams *desp);
