#
# Copyright 2003 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
# ident	"%Z%%M%	%I%	%E% SMI"
#
# lib/libsasl/README
#

libsasl and its plugins is based on the Project Cyrus open source libsasl
	http://asg.web.cmu.edu/sasl

Additionally, the SunONE consolidation maintains libsasl also based on
the Project Cyrus open source libsasl. Inevitibly, these code bases will
go their separate ways. In order to assist with resynchronization, some
conventions are used. The version of the Cyrus libsasl code base that
has most recently been synched with can be found in <sasl/sasl.h> -
<SASL_VERSION_MAJOR>.<SASL_VERSION_MINOR>.<SASL_VERSION_STEP>.

For changes that are particular to the Solaris code base, the
conditional _INTEGRATED_SOLARIS_ is used.  For other Sun generated
change from the Project Cyrus code base common to both SunONE and
Solaris, the conditional _SUN_SDK_ is used.  Both of these are defined
in include/config.h.  Additionally, the Cyrus code base is not cstyle or
lint-clean except where noted.

The public header files <sasl/sasl.h>, <sasl/saslplug.h>, <sasl/saslutil.h>
and <sasl/prop.h> are the exception. These are both hdrchk and cstyle clean
and do not use the above conditional lablels.

Any changes in this code base are additive. This will ease merging changes
to and from other code bases. One unfortunate side effect is that this
introduces many conditional compile blocks.

You will notice that there will be reference to other platforms that Solaris
in this code. This is due to the open source roots of the code. This is
also retained to ease merges.

For globalization, it should be noted that there are three classes of strings
that need to be i18n'ed. The first are the error strings returned by
sasl_errstring(), the second are the strings returned by sasl_errdetail(),
and third are the prompts returned to the client in sasl_interact_t or
in sasl_chalprompt_t. The error strings returned by sasl_errdetail() are
generated by calls to sasl_seterror() or the sasl_utils_t seterror().
It should be noted that libsasl requires better support from Solaris to
be able to support multiple different locales on different threads.

On the other hand, the logged messages should not be i18n'ed.

Note that some public functions in the Cyrus distribution are not included
in the Solaris libsasl API: sasl_mkchal(), sasl_randcreate(), sasl_randfree(),
sasl_randseed(), sasl_rand(), and sasl_churn(). These functions are used
in sasl_util_t as part of the SPI.

include/config.h was originally generated by autoconfiguration tools, but
has customized to contain both autoconfiguration information and additional
library specific defines such as _INTEGRATE_SOLARIS_ and _SUN_SDK_. 
