#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright (c) 2011, Oracle and/or its affiliates. All rights reserved.
#

#
# MAPFILE HEADER START
#
# WARNING:  STOP NOW.  DO NOT MODIFY THIS FILE.
# Object versioning must comply with the rules detailed in
#
#	usr/src/lib/README.mapfiles
#
# You should not be making modifications here until you've read the most current
# copy of that file. If you need help, contact a gatekeeper for guidance.
#
# MAPFILE HEADER END
#

$mapfile_version 2

STUB_OBJECT;

# Note: This object exists to provide private ZFS interfaces to
# commands such as ztest, zdb, and zinject. We only list the
# symbols actually used by those tools in this mapfile.

SYMBOL_VERSION SUNWprivate_1.1 	{
    global:
	aok				{
						ASSERT {
							TYPE=data;
							SH_ATTR=NOBITS;
							SIZE=4;
						};
					};
	arc_free_ref;
	arc_getref_func;
	arc_read;
	bp_get_dsize_sync;
	bpobj_iterate_nofree;
	byteswap_uint64_array;
	cv_wait;
	ddt_bp_create;
	ddt_enter;
	ddt_entry_compare;
	ddt_exit;
	ddt_get_dedup_histogram;
	ddt_get_dedup_stats;
	ddt_histogram_stat;
	ddt_key_fill;
	ddt_lookup;
	ddt_object_count;
	ddt_object_info;
	ddt_object_name;
	ddt_object_walk;
	ddt_phys_decref;
	ddt_phys_select;
	ddt_phys_total_refcnt;
	ddt_remove;
	ddt_select;
	ddt_stat_add;
	ddt_walk;
	dmu_assign_arcbuf;
	dmu_bonus_hold;
	dmu_bonus_max;
	dmu_buf_hold;
	dmu_buf_rele;
	dmu_buf_will_dirty;
	dmu_buf_will_fill;
	dmu_free_long_range;
	dmu_free_range;
	dmu_object_alloc;
	dmu_object_claim;
	dmu_object_free;
	dmu_object_info;
	dmu_object_info_from_db;
	dmu_object_info_from_dnode;
	dmu_object_next;
	dmu_object_set_blocksize;
	dmu_object_set_checksum;
	dmu_object_set_compress;
	dmu_objset_clone;
	dmu_objset_create;
	dmu_objset_destroy;
	dmu_objset_disown;
	dmu_objset_ds;
	dmu_objset_fast_stat;
	dmu_objset_find;
	dmu_objset_fsid_guid;
	dmu_objset_hold;
	dmu_objset_id;
	dmu_objset_name;
	dmu_objset_own;
	dmu_objset_pool;
	dmu_objset_rele;
	dmu_objset_snapshot;
	dmu_objset_spa;
	dmu_objset_space;
	dmu_objset_zil;
	dmu_ot				{
						ASSERT {
							TYPE=data;
$if _ELF32
							SIZE=0x370;
$elif _ELF64
							SIZE=0x528;
$endif
						};
					};
	dmu_prealloc;
	dmu_prefetch;
	dmu_read;
	dmu_request_arcbuf;
	dmu_release_arcbuf;
	dmu_set_bonus;
	dmu_sync;
	dmu_tx_abort;
	dmu_tx_assign;
	dmu_tx_callback_register;
	dmu_tx_commit;
	dmu_tx_create;
	dmu_tx_get_txg;
	dmu_tx_hold_bonus;
	dmu_tx_hold_free;
	dmu_tx_hold_write;
	dmu_tx_hold_zap;
	dmu_tx_wait;
	dmu_write;
	dnode_hold;
	dnode_next_offset;
	dnode_rele;
	dprintf_setup;
	dsl_crypto_key_change;
	dsl_crypto_key_load;
	dsl_dataset_disown;
	dsl_dataset_keystatus_byname;
	dsl_dataset_own;
	dsl_dataset_promote;
	dsl_dataset_user_hold;
	dsl_dataset_user_release;
	dsl_pool_tmp_uref_barrier;
	dsl_prop_get;
	dsl_prop_set;
	highbit;
	io_mvector_tracking_enable	{ ASSERT { TYPE=data; SIZE=4 } };
	kernel_fini;
	kernel_init;
	metaslab_class_get_alloc;
	metaslab_class_get_space;
	metaslab_df_alloc_threshold	{ ASSERT { TYPE=data; SIZE=8 } };
	metaslab_gang_threshold		{ ASSERT { TYPE=data; SIZE=8 } };
	mutex_enter;
	mutex_exit;
	nicenum;
	sa_bulk_lookup;
	sa_handle_destroy;
	sa_handle_get;
	sa_lookup;
	sa_setup;
	show_pool_stats;
	spa_close;
	spa_config_enter;
	spa_config_exit;
	spa_config_held;
	spa_config_path			{ ASSERT { TYPE=data; SIZE=addrsize } };
	spa_create;
	spa_dedup_checksum;
	spa_destroy;
	spa_export;
	spa_first_txg;
	spa_freeze;
	spa_get_dsl;
	spa_get_log_state;
	spa_guid;
	spa_has_slogs;
	spa_history_get;
	spa_import;
	spa_last_synced_txg;
	spa_log_class;
	spa_lookup;
	spa_max_block_size;
	spa_name;
	spa_namespace_lock		{
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
$if _ELF32
							SIZE=0x20;
$elif _ELF64
							SIZE=0x28;
$endif
						};
					};
	spa_next;
	spa_normal_class;
	spa_open;
	spa_open_policy;
	spa_prop_get;
	spa_prop_set;
	spa_rename;
	spa_scan;
	spa_set_log_state;
	spa_suspended;
	spa_tryimport;
	spa_upgrade;
	spa_vdev_add;
	spa_vdev_attach;
	spa_vdev_detach;
	spa_vdev_remove;
	spa_vdev_split_mirror;
	spa_vdev_state_enter;
	spa_vdev_state_exit;
	spa_version;
	space_map_load;
	space_map_load_wait;
	space_map_maxsize;
	space_map_unload;
	space_map_vacate;
	space_map_walk;
	sprintf_blkptr;
	traverse_pool;
	txg_wait_open;
	txg_wait_synced;
	uberblock_verify;
	vdev_clear;
	vdev_dtl_required;
	vdev_get_min_asize;
	vdev_hole_ops			{
						ASSERT {
							TYPE=data;
$if _ELF32
							SIZE=0x38;
$elif _ELF64
							SIZE=0x60;
$endif
						};
					};
	vdev_label_offset;
	vdev_mirror_ops			{
						ASSERT {
							TYPE=data;
$if _ELF32
							SIZE=0x38;
$elif _ELF64
							SIZE=0x60;
$endif
						};
					};
	vdev_offline;
	vdev_online;
	vdev_psize_to_asize;
	vdev_raidz_ops			{
						ASSERT {
							TYPE=data;
$if _ELF32
							SIZE=0x38;
$elif _ELF64
							SIZE=0x60;
$endif
						};
					};
	vdev_replacing_ops		{
						ASSERT {
							TYPE=data;
$if _ELF32
							SIZE=0x38;
$elif _ELF64
							SIZE=0x60;
$endif
						};
					};
	vdev_root_ops			{
						ASSERT {
							TYPE=data;
$if _ELF32
							SIZE=0x38;
$elif _ELF64
							SIZE=0x60;
$endif
						};
					};
	vdev_spare_ops			{
						ASSERT {
							TYPE=data;
$if _ELF32
							SIZE=0x38;
$elif _ELF64
							SIZE=0x60;
$endif
						};
					};
	zap_add;
	zap_count;
	zap_create;
	zap_create_claim;
	zap_cursor_advance;
	zap_cursor_fini;
	zap_cursor_init;
	zap_cursor_retrieve;
	zap_destroy;
	zap_get_stats;
	zap_length;
	zap_lookup;
	zap_remove;
	zap_update;
	zcrypt_key_allocate;
	zcrypt_key_gen;
	zfs_attr_table			{
						ASSERT {
							TYPE=data;
$if _ELF32
							SIZE=16[21];
$elif _ELF64
							SIZE=24[21];
$endif
						};
					};
	zfs_fuid_avl_tree_create;
	zfs_fuid_idx_domain;
	zfs_fuid_table_destroy;
	zfs_fuid_table_load;
	zfs_metaslab_ops		{ ASSERT { TYPE=data; SIZE=addrsize } };
	zfs_obj_to_path;
	zfs_prop_index_to_string;
	zfs_prop_random_value;
	zfs_prop_to_name;
	zfs_recover			{
						ASSERT {
							TYPE=data;
$if __GNUC
							SH_ATTR=nobits;
$endif
							SIZE=4;
						};
					};
	zfs_vdev_enable_mvector		{
						ASSERT {
							TYPE=data;
$if __GNUC && _sparc && _ELF64
							SH_ATTR=nobits;
$endif
							SIZE=4;
						};
					};
	zil_add_block;
	zil_bp_tree_add;
	zil_close;
	zil_commit;
	zil_itx_assign;
	zil_itx_create;
	zil_itx_destroy;
	zil_open;
	zil_parse;
	zil_replay;
	zil_replaying;
	zio_buf_alloc;
	zio_buf_free;
	zio_checksum_table		{
						ASSERT {
							TYPE=data;
$if _ELF32
							SIZE=0x134;
$elif _ELF64
							SIZE=0x1b8;
$endif
						};
					};
	zio_claim;
	zio_compress_data;
	zio_compress_table		{
						ASSERT {
							TYPE=data;
$if _ELF32
							SIZE=0xf0;
$elif _ELF64
							SIZE=0x1e0;
$endif
						};
					};
	zio_crypt_table			{
						ASSERT {
							TYPE=data;
$if _ELF32
							SIZE=0x208;
$elif _ELF64
							SIZE=0x2d0;
$endif
						};
					};
	zio_decompress_data;
	zio_nowait;
	zio_priority_table		{ ASSERT { TYPE=data; SIZE=0xc } };
	zio_read;
	zio_resume;
	zio_rewrite;
	zio_root;
	zio_vdev_child_io;
	zio_wait;
	zpool_prop_to_name;

    local:
	*;
};
