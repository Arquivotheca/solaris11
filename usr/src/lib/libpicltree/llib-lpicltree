/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
 * or http://www.opensolaris.org/os/licensing.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at usr/src/OPENSOLARIS.LICENSE.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */
/*LINTLIBRARY*/
/*PROTOLIB1*/

/*
 * Copyright (c) 1999-2000 by Sun Microsystems, Inc.
 * All rights reserved.
 */

#pragma ident	"%Z%%M%	%I%	%E% SMI"

#include <synch.h>
#include <picl.h>
#include <picltree.h>
#include "ptree_impl.h"

int     ptree_get_root(picl_nodehdl_t *nodeh);
int     ptree_create_node(const char *name, const char *clname,
                        picl_nodehdl_t *nodeh);
int     ptree_destroy_node(picl_nodehdl_t nodeh);
int     ptree_add_node(picl_nodehdl_t parh, picl_nodehdl_t chdh);
int     ptree_delete_node(picl_nodehdl_t nodeh);

int     ptree_create_prop(const ptree_propinfo_t *pi, const void *vbuf,
                        picl_prophdl_t *proph);
int     ptree_destroy_prop(picl_prophdl_t proph);
int     ptree_delete_prop(picl_prophdl_t proph);
int     ptree_add_prop(picl_nodehdl_t nodeh, picl_prophdl_t proph);
int     ptree_create_table(picl_prophdl_t *tbl_hdl);
int     ptree_add_row_to_table(picl_prophdl_t tbl, int nprops,
                        const picl_prophdl_t *props);
int     ptree_update_propval_by_name(picl_nodehdl_t nodeh, const char *name,
                        const void *vbuf, unsigned int sz);
int     ptree_update_propval(picl_prophdl_t proph, const void *buf,
                        unsigned int sz);
int     ptree_get_propval(picl_prophdl_t proph, void *buf, unsigned int sz);
int     ptree_get_propval_by_name(picl_nodehdl_t nodeh, const char *name,
                        void *buf, unsigned int sz);
int     ptree_get_propinfo(picl_prophdl_t proph, ptree_propinfo_t *pi);
int     ptree_get_first_prop(picl_nodehdl_t nodeh, picl_prophdl_t *proph);
int     ptree_get_next_prop(picl_prophdl_t thish, picl_prophdl_t *proph);
int     ptree_get_prop_by_name(picl_nodehdl_t nodeh, const char *name,
                        picl_prophdl_t *proph);
int     ptree_get_next_by_row(picl_prophdl_t proph, picl_prophdl_t *rowh);
int     ptree_get_next_by_col(picl_prophdl_t proph, picl_prophdl_t *colh);

int	ptree_get_node_by_path(const char *prl, picl_nodehdl_t *nodeh);
int	picld_plugin_register(picld_plugin_reg_t *infop);
int	ptree_init_propinfo(ptree_propinfo_t *infop, int version, int ptype,
			int pmode, size_t psize, char *pname,
			int (*readfn)(ptree_rarg_t *, void *),
			int (*writefn)(ptree_warg_t *, const void *));
int	ptree_create_and_add_prop(picl_nodehdl_t nodeh,
			ptree_propinfo_t *infop, void *vbuf,
			picl_prophdl_t *proph);
int	ptree_create_and_add_node(picl_nodehdl_t rooth, const char *name,
			const char *classname, picl_nodehdl_t *nodeh);

int	ptree_walk_tree_by_class(picl_nodehdl_t rooth, const char *classname,
	void *c_args, int (*callback_fn)(picl_nodehdl_t hdl, void *args));

int	ptree_find_node(picl_nodehdl_t rooth, char *pname,
		picl_prop_type_t ptype, void *pval, size_t valsize,
		picl_nodehdl_t *retnodeh);
int	ptree_post_event(const char *ename, const void *earg,
			size_t size, void (*completion_handler)(char *ename,
			void *earg, size_t size));
int	ptree_register_handler(const char *ename,
			void (*evt_handler)(const char *ename, const void *earg,
			size_t size, void *cookie), void *cookie);
void	ptree_unregister_handler(const char *ename,
			void (*evt_handler)(const char *ename, const void *earg,
			size_t size, void *cookie), void *cookie);
