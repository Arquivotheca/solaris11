#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
#

#
# MAPFILE HEADER START
#
# WARNING:  STOP NOW.  DO NOT MODIFY THIS FILE.
# Object versioning must comply with the rules detailed in
#
#	usr/src/lib/README.mapfiles
#
# You should not be making modifications here until you've read the most current
# copy of that file. If you need help, contact a gatekeeper for guidance.
#
# MAPFILE HEADER END
#

$mapfile_version 2

STUB_OBJECT;

# functions
SYMBOL_VERSION SUNWprivate_1.1 {
    global:
	_Sfextern		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x64;
$elif _ELF64
						SIZE=0xb8;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_Sfi			{ ASSERT { TYPE=data; SIZE=addrsize } };
	_Sfmaxr			{ ASSERT { TYPE=data; SIZE=addrsize } };
	_Sftable		{
					ASSERT {
						TYPE=data;
$if _ELF32 && _sparc
						SIZE=0x4e0;
$elif _ELF32 && _x86
						SIZE=0x4a8;
$elif _ELF64
						SIZE=0x510;
$else
$error unknown platform
$endif
					};
				};
	_Vmextern		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x24;
$elif _ELF64
						SIZE=0x40;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_Vmheap			{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x38;
$elif _ELF64
						SIZE=0x70;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_ast___getdelim;
	_ast__filbuf;
	_ast_asprintf;
	_ast_basename;
	_ast_calloc;
	_ast_catclose;
	_ast_catgets;
	_ast_catopen;
	_ast_cfree;
	_ast_clearerr;
	_ast_clearerr_unlocked;
	_ast_dirname;
	_ast_doprnt;
	_ast_doscan;
	_ast_eaccess;
	_ast_execvpe;
	_ast_fclose;
	_ast_fcloseall;
	_ast_fdopen;
	_ast_feof_unlocked;
	_ast_ferror_unlocked;
	_ast_fflush;
	_ast_fflush_unlocked;
	_ast_fgetc;
	_ast_fgetc_unlocked;
	_ast_fgetpos64;
	_ast_fgetpos;
	_ast_fgets;
	_ast_fgets_unlocked;
	_ast_fgetwc;
	_ast_fgetws;
	_ast_fileno_unlocked;
	_ast_flockfile;
	_ast_fmemopen;
	_ast_fnmatch;
	_ast_fopen;
	_ast_fprintf;
	_ast_fpurge;
	_ast_fputc_unlocked;
	_ast_fputs;
	_ast_fputs_unlocked;
	_ast_fputwc;
	_ast_fputws;
	_ast_fread;
	_ast_fread_unlocked;
	_ast_free;
	_ast_freopen;
	_ast_fscanf;
	_ast_fseek64;
	_ast_fseek;
	_ast_fseeko64;
	_ast_fseeko;
	_ast_fsetpos64;
	_ast_fsetpos;
	_ast_ftell64;
	_ast_ftell;
	_ast_ftello64;
	_ast_ftello;
	_ast_ftrylockfile;
	_ast_fts_children;
	_ast_fts_close;
	_ast_fts_flags;
	_ast_fts_notify;
	_ast_fts_open;
	_ast_fts_read;
	_ast_fts_set;
	_ast_ftw;
	_ast_ftwalk;
	_ast_ftwflags;
	_ast_funlockfile;
	_ast_fwide;
	_ast_fwprintf;
	_ast_fwrite;
	_ast_fwrite_unlocked;
	_ast_fwscanf;
	_ast_getc_unlocked;
	_ast_getchar_unlocked;
	_ast_getcwd;
	_ast_getdate;
	_ast_getdelim;
	_ast_getenv;
	_ast_getline;
	_ast_getopt;
	_ast_getopt_long;
	_ast_getopt_long_only;
	_ast_getpgrp;
	_ast_gets;
	_ast_getsubopt;
	_ast_getw;
	_ast_getwc;
	_ast_getwchar;
	_ast_getwd;
	_ast_getws;
	_ast_glob;
	_ast_globfree;
	_ast_iconv;
	_ast_iconv_close;
	_ast_iconv_list;
	_ast_iconv_move;
	_ast_iconv_name;
	_ast_iconv_open;
	_ast_iconv_write;
	_ast_info		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x3f4;
$elif _ELF64
						SIZE=0x428;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_ast_intercepts		{
					ASSERT {
						TYPE=data;
$if __GNUC
						SH_ATTR=nobits;
$endif
$if _ELF32
						SIZE=0x8;
$elif _ELF64
						SIZE=0x10;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_ast_lc_categories	{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x150;
$elif _ELF64
						SIZE=0x230;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_ast_lc_charsets	{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x120;
$elif _ELF64
						SIZE=0x240;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_ast_lc_languages	{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x11e0;
$elif _ELF64
						SIZE=0x23c0;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_ast_lc_maps		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x8c;
$elif _ELF64
						SIZE=0x118;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_ast_lc_territories	{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0xe34;
$elif _ELF64
						SIZE=0x1c68;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_ast_localeconv;
	_ast_locales		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x38;
$elif _ELF64
						SIZE=0x70;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_ast_malloc;
	_ast_memalign;
	_ast_memdup;
	_ast_memfatal;
	_ast_memhash;
	_ast_memsum;
	_ast_mkstemp;
	_ast_mktemp;
	_ast_mktime;
	_ast_nftw;
	_ast_optarg		{
					ASSERT {
						TYPE=data;
$if __GNUC
						SH_ATTR=nobits;
$endif
						SIZE=addrsize;
					};
				};
	_ast_optctx;
	_ast_opterr		{ ASSERT { TYPE=data; SIZE=4 } };
	_ast_optesc;
	_ast_optget;
	_ast_opthelp;
	_ast_optind		{ ASSERT { TYPE=data; SIZE=4 } };
	_ast_optjoin;
	_ast_optopt		{
					ASSERT {
						TYPE=data;
$if __GNUC
						SH_ATTR=nobits;
$endif
						SIZE=4;
					};
				};
	_ast_optstr;
	_ast_optusage;
	_ast_pathaccess;
	_ast_pathaccess_20100601;
	_ast_pathbin;
	_ast_pathcanon;
	_ast_pathcanon_20100601;
	_ast_pathcat;
	_ast_pathcd;
	_ast_pathcheck;
	_ast_pathexists;
	_ast_pathfind;
	_ast_pathgetlink;
	_ast_pathinclude;
	_ast_pathkey;
	_ast_pathnative;
	_ast_pathpath;
	_ast_pathpath_20100601;
	_ast_pathposix;
	_ast_pathprobe;
	_ast_pathprobe_20100601;
	_ast_pathprog;
	_ast_pathrepl;
	_ast_pathsetlink;
	_ast_pathshell;
	_ast_pathstat;
	_ast_pathtemp;
	_ast_pathtmp;
	_ast_pclose;
	_ast_popen;
	_ast_printf;
	_ast_procclose;
	_ast_procfree;
	_ast_procopen;
	_ast_putc_unlocked;
	_ast_putchar_unlocked;
	_ast_putenv;
	_ast_puts;
	_ast_putw;
	_ast_putwc;
	_ast_putwchar;
	_ast_re_comp;
	_ast_re_exec;
	_ast_realloc;
	_ast_realpath;
	_ast_regaddclass;
	_ast_regalloc;
	_ast_regcache;
	_ast_regclass;
	_ast_regcmp;
	_ast_regcollate;
	_ast_regcomb;
	_ast_regcomp;
	_ast_regdup;
	_ast_regerror;
	_ast_regex;
	_ast_regexec;
	_ast_regfatal;
	_ast_regfatalpat;
	_ast_regfree;
	_ast_regncomp;
	_ast_regnexec;
	_ast_regrecord;
	_ast_regrexec;
	_ast_regstat;
	_ast_regsub;
	_ast_regsubcomp;
	_ast_regsubexec;
	_ast_regsubflags;
	_ast_regsubfree;
	_ast_remove;
	_ast_resolvepath;
	_ast_rewind;
	_ast_scanf;
	_ast_setbuf;
	_ast_setbuffer;
	_ast_setenv;
	_ast_setenviron;
	_ast_setlinebuf;
	_ast_setlocale;
	_ast_setvbuf;
	_ast_sigcritical;
	_ast_signal;
	_ast_sigunblock;
	_ast_snprintf;
	_ast_sprintf;
	_ast_sscanf;
	_ast_sfkeyprintf_20000308;
	_ast_stracmp;
	_ast_strcopy;
	_ast_strdup;
	_ast_strelapsed;
	_ast_strerror;
	_ast_stresc;
	_ast_streval;
	_ast_strexpr;
	_ast_strftime;
	_ast_strgid;
	_ast_strgrpmatch;
	_ast_strhash;
	_ast_strkey;
	_ast_strlcat;
	_ast_strlcpy;
	_ast_strlook;
	_ast_strmatch;
	_ast_strmode;
	_ast_strnacmp;
	_ast_strncopy;
	_ast_strntod;
	_ast_strntol;
	_ast_strntold;
	_ast_strntoll;
	_ast_strntoul;
	_ast_strntoull;
	_ast_stropt;
	_ast_strperm;
	_ast_strpsearch;
	_ast_strptime;
	_ast_strsearch;
	_ast_strsort;
	_ast_strsubmatch;
	_ast_strsum;
	_ast_strtape;
	_ast_strtod;
	_ast_strtoip4;
	_ast_strtol;
	_ast_strtold;
	_ast_strtoll;
	_ast_strton;
	_ast_strtonll;
	_ast_strtoul;
	_ast_strtoull;
	_ast_struid;
	_ast_struniq;
	_ast_swprintf;
	_ast_swscanf;
	_ast_system;
	_ast_tempnam;
	_ast_tmpfile;
	_ast_tmpnam;
	_ast_touch;
	_ast_translate;
	_ast_ungetc;
	_ast_ungetwc;
	_ast_unsetenv;
	_ast_valloc;
	_ast_vasprintf;
	_ast_vfprintf;
	_ast_vfscanf;
	_ast_vfwprintf;
	_ast_vfwscanf;
	_ast_vprintf;
	_ast_vscanf;
	_ast_vsnprintf;
	_ast_vsprintf;
	_ast_vsscanf;
	_ast_vswprintf;
	_ast_vswscanf;
	_ast_vwprintf;
	_ast_vwscanf;
	_ast_wordexp;
	_ast_wordfree;
	_ast_wprintf;
	_ast_wscanf;
	_ccmapcpy;
	_ccmapstr;
	_error_info_		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x78;
$elif _ELF64
						SIZE=0xb0;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_fini;
	_hash_info_		{
					ASSERT {
						TYPE=data;
$if __GNUC
						SH_ATTR=nobits;
$endif
						SIZE=addrsize;
					};
				};
	_iblocks;
	_init;
	_lib_version		{ ASSERT { TYPE=data; SIZE=4 } };
	_mode_permmap_		{ ASSERT { TYPE=data; SIZE=24[4] } };
	_mode_table_		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0xc8;
$elif _ELF64
						SIZE=0xf0;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_opt_info_ 		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x80;
$elif _ELF64
						SIZE=0xb0;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_proc_info_		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x34;
$elif _ELF64
						SIZE=0x48;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_re_comp;
	_re_exec;
	_re_putc;
	_reg_alloc;
	_reg_classfun;
	_reg_drop;
	_reg_fatal;
	_reg_state		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0xae0;
$elif _ELF64
						SIZE=0xf28;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_sfcvt;
	_sfdlen;
	_sfexcept;
	_sffilbuf;
	_sfflsbuf;
	_sfgetl2;
	_sfgetl;
	_sfgetu2;
	_sfgetu;
	_sfllen;
	_sfmode;
	_sfopen;
	_sfpclose;
	_sfpopen;
	_sfputd;
	_sfputl;
	_sfputm;
	_sfputu;
	_sfrsrv;
	_sfsetpool;
	_sfstrtod;
	_sftype;
	_sig_info_		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0xc;
$elif _ELF64
						SIZE=0x18;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_stdgets;
	_stdopen;
	_stdprintf;
	_stdscanf;
	_stdsetvbuf;
	_stdsprintf;
	_stdvsnprintf;
	_stdvsprintf;
	_stdvsscanf;
	_stkseek;
	_vmbestcheck;
	astconf;
	astconfdisc;
	astconflist;
	astcopy;
	astgetconf;
	astintercept;
	astlicense;
	astquery;
	astwinsize;
	base64decode;
	base64encode;
	ccmapid;
	ccmaplist;
	ccmapname;
	ccnative;
	chresc;
	chrexp;
	chrtoi;
	cmdarg;
	cmdclose;
	cmdflush;
	cmdopen;
	conformance;
	dtclose;
	dtdisc;
	dtextract;
	dtflatten;
	dtmethod;
	dtnew;
	dtopen;
	dtrenew;
	dtrestore;
	dtsize;
	dtstat;
	dtstrhash;
	dttreeset;
	dtview;
	dtwalk;
	error;
	error_break;
	errorf;
	errormsg;
	errorv;
	errorx;
	findclose;
	findopen;
	findread;
	findwrite;
	fmtbase;
	fmtbasell;
	fmtbuf;
	fmtclock;
	fmtdev;
	fmtelapsed;
	fmterror;
	fmtesc;
	fmtesq;
	fmtfmt;
	fmtfs;
	fmtgid;
	fmtident;
	fmtip4;
	fmtls;
	fmtmatch;
	fmtmode;
	fmtnesq;
	fmtnum;
	fmtperm;
	fmtquote;
	fmtre;
	fmtrec;
	fmtscale;
	fmtsignal;
	fmttime;
	fmttmx;
	fmttv;
	fmtuid;
	fmtversion;
	fs3d;
	fs3d_mount;
	fts_local;
	hashalloc;
	hashdone;
	hashdump;
	hashfree;
	hashlast;
	hashlook;
	hashnext;
	hashscan;
	hashsize;
	hashview;
	hashwalk;
	lccanon;
	lccategories;
	lcindex;
	lcinfo;
	lcmake;
	lcscan;
	magicclose;
	magiclist;
	magicload;
	magicopen;
	magictype;
	mcclose;
	mcdump;
	mcfind;
	mcget;
	mcindex;
	mcopen;
	mcput;
	mimeclose;
	mimecmp;
	mimehead;
	mimelist;
	mimeload;
	mimeopen;
	mimeset;
	mimetype;
	mimeview;
	mntclose;
	mntopen;
	mntread;
	mntwrite;
	modei;
	modex;
	pvalloc;
	recfmt;
	reclen;
	recstr;
	sfaprints;
	sfclose;
	sfclrerr;
	sfclrlock;
	sfdcdio;
	sfdcdos;
	sfdcfilter;
	sfdcmore;
	sfdcprefix;
	sfdcseekable;
	sfdcslow;
	sfdcsubstream;
	sfdctee;
	sfdcunion;
	sfdisc;
	sfdlen;
	sfecvt;
	sfeof;
	sferror;
	sffcvt;
	sffileno;
	sfgetc;
	sfgetd;
	sfgetl;
	sfgetm;
	sfgetr;
	sfgetu;
	sfkeyprintf;
	sfllen;
	sfmove;
	sfmutex;
	sfnew;
	sfnotify;
	sfnputc;
	sfopen;
	sfpeek;
	sfpkrd;
	sfpoll;
	sfpool;
	sfpopen;
	sfprintf;
	sfprints;
	sfpurge;
	sfputc;
	sfputd;
	sfputl;
	sfputm;
	sfputr;
	sfputu;
	sfraise;
	sfrd;
	sfread;
	sfreserve;
	sfresize;
	sfscanf;
	sfseek;
	sfset;
	sfsetbuf;
	sfsetfd;
	sfsize;
	sfsk;
	sfslen;
	sfsprintf;
	sfsscanf;
	sfstack;
	sfstacked;
	sfswap;
	sfsync;
	sftell;
	sftmp;
	sfulen;
	sfungetc;
	sfvalue;
	sfvaprints;
	sfvprintf;
	sfvprints;
	sfvscanf;
	sfvsprintf;
	sfvsscanf;
	sfwr;
	sfwrite;
	spawnlp;
	spawnve;
	spawnveg;
	spawnvp;
	spawnvpe;
	stackalloc;
	stackclear;
	stackfree;
	stackget;
	stackpop;
	stackpush;
	stacktell;
	stkalloc;
	stkclose;
	stkcopy;
	stkfreeze;
	stkinstall;
	stklink;
	stkopen;
	stkset;
	strvcmp;
	swapget;
	swapmem;
	swapop;
	swapput;
	systrace;
	tmdate;
	tmequiv;
	tmfix;
	tmfmt;
	tmform;
	tmgoff;
	tminit;
	tmleap;
	tmlex;
	tmlocale;
	tmmake;
	tmpoff;
	tmscan;
	tmsleep;
	tmtime;
	tmtype;
	tmweek;
	tmword;
	tmxdate;
	tmxfmt;
	tmxgettime;
	tmxleap;
	tmxmake;
	tmxscan;
	tmxsettime;
	tmxsleep;
	tmxtime;
	tmxtouch;
	tmzone;
	tokclose;
	tokline;
	tokopen;
	tokread;
	tokscan;
	tvcmp;
	tvgettime;
	tvsettime;
	tvsleep;
	tvtouch;
	typefix;
	univ_env		{ ASSERT { TYPE=data; SIZE=0xd } };
	vecargs;
	vecfile;
	vecfree;
	vecload;
	vecstring;
	vmclear;
	vmclose;
	vmdbcheck;
	vmdbwatch;
	vmdebug;
	vmdisc;
	vmgetmem;
	vmmopen;
	vmmset;
	vmopen;
	vmprofile;
	vmregion;
	vmsegment;
	vmset;
	vmstat;
	vmstrdup;
	vmtrace;
	vmtrbusy;
	vmwalk;
	wc2utf8;
    local:
	*;
};

# data
SYMBOL_VERSION SUNWprivate_1.1 {
    global:
	Dtbag			{ ASSERT { TYPE=data; SIZE=addrsize } };
	Dthash			{ ASSERT { TYPE=data; SIZE=addrsize } };
	Dtlist			{ ASSERT { TYPE=data; SIZE=addrsize } };
	Dtobag			{ ASSERT { TYPE=data; SIZE=addrsize } };
	Dtorder			{ ASSERT { TYPE=data; SIZE=addrsize } };
	Dtoset			{ ASSERT { TYPE=data; SIZE=addrsize } };
	Dtqueue			{ ASSERT { TYPE=data; SIZE=addrsize } };
	Dtset			{ ASSERT { TYPE=data; SIZE=addrsize } };
	Dtstack			{ ASSERT { TYPE=data; SIZE=addrsize } };
	Dttree			{ ASSERT { TYPE=data; SIZE=addrsize } };
	Vmbest			{ ASSERT { TYPE=data; SIZE=addrsize } };
	Vmdcheap		{ ASSERT { TYPE=data; SIZE=addrsize } };
	Vmdcsbrk		{ ASSERT { TYPE=data; SIZE=addrsize } };
	Vmdebug			{ ASSERT { TYPE=data; SIZE=addrsize } };
	Vmheap			{ ASSERT { TYPE=data; SIZE=addrsize } };
	Vmlast			{ ASSERT { TYPE=data; SIZE=addrsize } };
	Vmpool			{ ASSERT { TYPE=data; SIZE=addrsize } };
	Vmprofile		{ ASSERT { TYPE=data; SIZE=addrsize } };
	Vmregion		{ ASSERT { TYPE=data; SIZE=addrsize } };
	_DATA_dthash;
	_DATA_dtlist;
	_DATA_dttree;
	_DATA_sigdata;
	_DATA_vmbest;
	_DATA_vmdcheap;
	_DATA_vmdebug;
	_DATA_vmlast;
	_DATA_vmpool;
	_DATA_vmprofile;
	_Dthash			{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x8;
$elif _ELF64
						SIZE=0x10;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_Dtlist			{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x08;
$elif _ELF64
						SIZE=0x10;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_Dtqueue		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x8;
$elif _ELF64
						SIZE=0x10;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_Dtstack		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x8;
$elif _ELF64
						SIZE=0x10;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_Dttree 		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x8;
$elif _ELF64
						SIZE=0x10;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_Sfstderr		{
					ASSERT {
						TYPE=data;
$if _ELF32 && _sparc
						SIZE=0x70;
$elif _ELF32 && _x86
						SIZE=0x68;
$elif _ELF64
						SIZE=0xb0;
$else
$error unknown platform
$endif
					};
				};
	_Sfstdin		{
					ASSERT {
						TYPE=data;
$if _ELF32 && _sparc
						SIZE=0x70;
$elif _ELF32 && _x86
						SIZE=0x68;
$elif _ELF64
						SIZE=0xb0;
$else
$error unknown platform
$endif
					};
				};
	_Sfstdout		{
					ASSERT {
						TYPE=data;
$if _ELF32 && _sparc
						SIZE=0x70;
$elif _ELF32 && _x86
						SIZE=0x68;
$elif _ELF64
						SIZE=0xb0;
$else
$error unknown platform
$endif
					};
				};
	_Stak_data		{
					ASSERT {
						TYPE=data;
$if _ELF32 && _sparc
						SIZE=0x70;
$elif _ELF32 && _x86
						SIZE=0x68;
$elif _ELF64
						SIZE=0xb0;
$else
$error unknown platform
$endif
					};
				};
	_ast_conf_data		{
					ASSERT {
						TYPE=data;
$if _ELF32 && _x86
						SIZE=0x5b1c;
$else
						SIZE=0x6b30;
$endif
					};
				};
	_ast_conf_ndata		{ ASSERT { TYPE=data; SIZE=4 } };
	_ast_conf_nprefix	{ ASSERT { TYPE=data; SIZE=4 } };
	_ast_conf_prefix	{ ASSERT { TYPE=data; SIZE=0x176 } };
	_ccmap;
	_error_infop_		{ ASSERT { TYPE=data; SIZE=addrsize } };
	_opt_infop_		{ ASSERT { TYPE=data; SIZE=addrsize } };
	_tm_data_		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x1c;
$elif _ELF64
						SIZE=0x38;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_tm_datap_		{ ASSERT { TYPE=data; SIZE=addrsize } };
	_tm_info_		{
					ASSERT {
						TYPE=data;
$if __GNUC
						SH_ATTR=nobits;
$endif
$if _ELF32
						SIZE=0x18;
$elif _ELF64
						SIZE=0x30;
$else
$error unknown ELFCLASS
$endif
					};
				};
	_tm_infop_		{ ASSERT { TYPE=data; SIZE=addrsize } };
	sfstderr		{ ASSERT { TYPE=data; SIZE=addrsize } };
	sfstdin			{ ASSERT { TYPE=data; SIZE=addrsize } };
	sfstdout		{ ASSERT { TYPE=data; SIZE=addrsize } };
    local:
	*;
};
