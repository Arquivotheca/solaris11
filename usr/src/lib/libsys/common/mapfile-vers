#
# Copyright (c) 2005, 2011, Oracle and/or its affiliates. All rights reserved.
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# MAPFILE HEADER START
#
# WARNING:  STOP NOW.  DO NOT MODIFY THIS FILE.
# Object versioning must comply with the rules detailed in
#
#	usr/src/lib/README.mapfiles
#
# You should not be making modifications here until you've read the most current
# copy of that file. If you need help, contact a gatekeeper for guidance.
#
# MAPFILE HEADER END
#

$mapfile_version 2

STUB_OBJECT;

$if !_ELF32
$error libsys is only supported in 32-bit form
$endif

$if _sparc
SYMBOL_VERSION SISCD_2.3 {
    global:
	SISCD_2.3;
} SYSVABI_1.3;
$endif

SYMBOL_VERSION SYSVABI_1.3 {
    global:
	_makecontext;
	makecontext;
	_swapcontext;
	swapcontext;
    local:
	*;
} SYSVABI_1.2;

SYMBOL_VERSION SYSVABI_1.2 {
    global:
	_access;
	access;
	_acct;
	acct;
	_alarm;
	alarm;
	_altzone		{
					ASSERT {
						TYPE=data;
$if __GNUC
						SH_ATTR=nobits;
$endif
						SIZE=4;
					}
				};
	atexit;
	calloc;
	_catclose;
	catclose;
	_catgets;
	catgets;
	_catopen;
	catopen;
	_chdir;
	chdir;
	_chmod;
	chmod;
	_chown;
	chown;
	_chroot;
	chroot;
	_close;
	close;
	_closedir;
	closedir;
	_creat;
	creat;
	__ctype			{
					ASSERT {
						TYPE=data;
$if __GNUC
						SH_ATTR=nobits;
$endif
						SIZE=0x209;
					}
				};
	_daylight		{
					ASSERT {
						TYPE=data;
$if __GNUC
						SH_ATTR=nobits;
$endif
						SIZE=4;
					}
				};
	daylight		{ ASSERT { ALIAS=_daylight; BINDING=weak } };
	_dup;
	dup;
	_environ		{
					ASSERT {
						TYPE=data;
$if __GNUC
						SH_ATTR=nobits;
$endif
						SIZE=addrsize;
					}
				};
	environ			{ ASSERT { ALIAS=_environ; BINDING=weak } };
	_execl;
	execl;
	_execle;
	execle;
	_execlp;
	execlp;
	_execv;
	execv;
	_execve;
	execve;
	_execvp;
	execvp;
	_exit;
	exit;
	_fattach;
	fattach;
	_fchdir;
	fchdir;
	_fchmod;
	fchmod;
	_fchown;
	fchown;
	_fcntl;
	fcntl;
	_fdetach;
	fdetach;
	_fork;
	fork;
	_fpathconf;
	fpathconf;
	free;
	_fstat;
	fstat;
	_fstatvfs;
	fstatvfs;
	_fsync;
	fsync;
	_ftok;
	ftok;
	_getcontext;
	getcontext;
	_getcwd;
	getcwd;
	_getegid;
	getegid;
	_geteuid;
	geteuid;
	_getgid;
	getgid;
	_getgrgid;
	getgrgid;
	_getgrnam;
	getgrnam;
	_getgroups;
	getgroups;
	_getlogin;
	getlogin;
	_getmsg;
	getmsg;
	_getpgid;
	getpgid;
	_getpgrp;
	getpgrp;
	_getpid;
	getpid;
	_getpmsg;
	getpmsg;
	_getppid;
	getppid;
	_getpwnam;
	getpwnam;
	_getpwuid;
	getpwuid;
	_getrlimit;
	getrlimit;
	_getsid;
	getsid;
	_gettxt;
	gettxt;
	_getuid;
	getuid;
	_grantpt;
	grantpt;
	__huge_val		{ ASSERT { TYPE=data; SIZE=8} };
	_initgroups;
	initgroups;
	_ioctl;
	ioctl;
	_isastream;
	isastream;
	_kill;
	kill;
	_lchown;
	lchown;
	_link;
	link;
	localeconv;
	_lseek;
	lseek;
	_lstat;
	lstat;
	malloc;
	_memcntl;
	memcntl;
	_mkdir;
	mkdir;
	_mknod;
	mknod;
	_mlock;
	mlock;
	mmap;
	_mount;
	mount;
	_mprotect;
	mprotect;
	_msgctl;
	msgctl;
	_msgget;
	msgget;
	_msgrcv;
	msgrcv;
	_msgsnd;
	msgsnd;
	_msync;
	msync;
	_munlock;
	munlock;
	_munmap;
	munmap;
	_nice;
	nice;
	_numeric		{
					ASSERT {
						TYPE=data;
$if __GNUC
						SH_ATTR=nobits;
$endif
						SIZE=2;
					}
				};
	_open;
	open;
	_opendir;
	opendir;
	_pathconf;
	pathconf;
	_pause;
	pause;
	_pipe;
	pipe;
	_poll;
	poll;
	_profil;
	profil;
	_ptrace;
	ptrace;
	_ptsname;
	ptsname;
	_putmsg;
	putmsg;
	_putpmsg;
	putpmsg;
	_read;
	read;
	_readdir;
	readdir;
	_readlink;
	readlink;
	_readv;
	readv;
	realloc;
	remove;
	_rename;
	rename;
	_rewinddir;
	rewinddir;
	_rmdir;
	rmdir;
	_seekdir;
	seekdir;
	_semctl;
	semctl;
	_semget;
	semget;
	_semop;
	semop;
	_setcontext;
	setcontext;
	_setgid;
	setgid;
	_setgroups;
	setgroups;
	setlocale;
	_setpgid;
	setpgid;
	_setpgrp;
	setpgrp;
	_setrlimit;
	setrlimit;
	_setsid;
	setsid;
	_setuid;
	setuid;
	_shmat;
	shmat;
	_shmctl;
	shmctl;
	_shmdt;
	shmdt;
	_shmget;
	shmget;
	_sigaction;
	sigaction;
	_sigaddset;
	sigaddset;
	_sigaltstack;
	sigaltstack;
	_sigdelset;
	sigdelset;
	_sigemptyset;
	sigemptyset;
	_sigfillset;
	sigfillset;
	_sighold;
	sighold;
	_sigignore;
	sigignore;
	_sigismember;
	sigismember;
	_siglongjmp;
	siglongjmp;
	signal;
	_sigpause;
	sigpause;
	_sigpending;
	sigpending;
	_sigprocmask;
	sigprocmask;
	_sigrelse;
	sigrelse;
	_sigsend;
	sigsend;
	_sigsendset;
	sigsendset;
	_sigset;
	sigset;
	_sigsetjmp;
	sigsetjmp;
	_sigsuspend;
	sigsuspend;
	_stat;
	stat;
	_statvfs;
	statvfs;
	_stime;
	stime;
	strcoll;
	strerror;
	strftime;
	strxfrm;
	_symlink;
	symlink;
	_sync;
	sync;
	_sysconf;
	sysconf;
	system;
	_telldir;
	telldir;
	_time;
	time;
	_times;
	times;
	_timezone		{
					ASSERT {
						TYPE=data;
$if __GNUC
						SH_ATTR=nobits;
$endif
						SIZE=4;
					}
				};
	timezone		{ ASSERT { ALIAS=_timezone; BINDING=weak} };
	_ttyname;
	ttyname;
	_tzname			{
					ASSERT {
						TYPE=data;
$if __GNUC
						SH_ATTR=nobits;
$endif
						SIZE=8;
					}
				};
	tzname			{ ASSERT { ALIAS=_tzname; BINDING=weak} };
	_ulimit;
	ulimit;
	_umask;
	umask;
	_umount;
	umount;
	_uname;
	uname;
	_unlink;
	unlink;
	_unlockpt;
	unlockpt;
	_utime;
	utime;
	_wait;
	wait;
	_waitid;
	waitid;
	_waitpid;
	waitpid;
	_write;
	write;
	_writev;
	writev;

$if _sparc
	# Sparc-only interfaces
	_Q_add;
	_Q_cmp;
	_Q_cmpe;
	_Q_div;
	_Q_dtoq;
	_Q_feq;
	_Q_fge;
	_Q_fgt;
	_Q_fle;
	_Q_flt;
	_Q_fne;
	_Q_itoq;
	_Q_mul;
	_Q_neg;
	_Q_qtod;
	_Q_qtoi;
	_Q_qtos;
	_Q_qtou;
	_Q_sqrt;
	_Q_stoq;
	_Q_sub;
	_Q_utoq;
	.div;
	__dtou;
	__ftou;
	_mmap		{ FLAGS = NODYNSORT };
	.mul;
	.rem;
	.stret1;
	.stret2;
	.stret4;
	.stret8;
	.udiv;
	.umul;
	.urem;
$endif

$if _x86
	# X86-only interfaces
	__flt_rounds		{
					ASSERT {
						TYPE=data;
$if __GNUC
						SH_ATTR=nobits;
$endif
						SIZE=4;
					}
				};
	_fp_hw			{ ASSERT { TYPE=data; SIZE=4} };
	_fpstart;
	_fxstat;
	_lxstat;
	_mmap;
	_nuname;
	nuname;
	_sbrk;
	sbrk;
	_xmknod;
	_xstat;
$endif


};
