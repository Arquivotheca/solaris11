#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright (c) 2006, 2011, Oracle and/or its affiliates. All rights reserved.
#

#
# MAPFILE HEADER START
#
# WARNING:  STOP NOW.  DO NOT MODIFY THIS FILE.
# Object versioning must comply with the rules detailed in
#
#	usr/src/lib/README.mapfiles
#
# You should not be making modifications here until you've read the most current
# copy of that file. If you need help, contact a gatekeeper for guidance.
#
# MAPFILE HEADER END
#

$mapfile_version 2

STUB_OBJECT;

SYMBOL_VERSION SUNWprivate_1.1 {
    global:
	add_key_name;
	add_name;
	add_self_name;
	alloc_newdrvdesc;
	alloc_olddrvdesc;
	allsigs				{
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=0x10;
						};
					};
	blkname;
	Calloc;
	checkdrive_onnode;
	cl_get_setkey;
	clnt_adddrvs;
	clnt_add_drv_sidenms;
	clnt_addhosts;
	clnt_clr_mnsetlock;
	clnt_createset;
	clnt_deldrvs;
	clnt_del_drv_sidenms;
	clnt_delhosts;
	clnt_delset;
	clnt_devid;
	clnt_devinfo;
	clnt_devinfo_by_devid;
	clnt_drvused;
	clnt_getset;
	clnt_gtimeout;
	clnt_hostname;
	clnt_imp_adddrvs;
	clnt_joinset;
	clnt_lock_set;
	clnt_mdcommdctl;
	clnt_med_get_data;
	clnt_med_get_rec;
	clnt_med_hostname;
	clnt_med_null;
	clnt_med_upd_data;
	clnt_med_upd_rec;
	clnt_mncreateset;
	clnt_mngetset;
	clnt_mn_is_stale;
	clnt_mn_mirror_resync_all;
	clnt_mnsetmaster;
	clnt_mn_sp_update_abr;
	clnt_mn_susp_res_io;
	clnt_nullproc;
	clnt_ownset;
	clnt_reset_mirror_owner;
	clnt_setnameok;
	clnt_setnumbusy;
	clnt_stimeout;
	clnt_unlock_set;
	clnt_upd_dr_dbinfo;
	clnt_upd_dr_flags;
	clnt_updmeds;
	clnt_upd_nr_flags;
	clnt_upd_sr_flags;
	clnt_user_med_get_data;
	clnt_user_med_upd_data;
	close_admin;
	close_mnttab;
	cl_set_setkey;
	commd_get_outfile;
	commd_get_verbosity;
	commitset;
	comp_state_to_name;
	copy_msg;
	copy_msg_2;
	copy_result;
	crcfreetab;
	crcfunc;
	ctlr_cache_add;
	ctlr_cache_look;
	dd_list_dup;
	defmhiargs			{ ASSERT { TYPE=data; SIZE=0x10 } };
	del_key_name;
	del_key_names;
	del_name;
	del_self_name;
	do_owner_ioctls;
	dr_cache_add;
	dr_cache_del;
	drdup;
	evdrv2evlib_typetab		{ ASSERT { TYPE=data; SIZE=0x178 } };
	Free;
	free_msg;
	free_newdrvdesc;
	free_olddrvdesc;
	free_result;
	free_sr;
	get_db_rec;
	get_devname;
	getdevstamp;
	getdrvnode;
	get_hspname;
	get_max_meds;
	get_max_sets;
	get_mdname;
	getmyside;
	getnodeside;
	getsetbyname;
	getsetbynum;
	get_ur_rec;
	halt_set;
	hs_state_to_name;
	is_existing_hsp;
	is_existing_metadevice;
	is_hspname;
	is_metaname;
	Malloc;
	mdclrerror;
	mdcomperror;
	md_daemonize;
	mddeverror;
	mddserror;
	mde_perror;
	md_eprintf;
	mderror;
	mderrorextra;
	mde_sperror;
	md_exit;
	md_got_sig;
	mdhserror;
	mdhsperror;
	md_in_daemon			{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
$if __GNUC
							SH_ATTR=nobits;
$endif
							BINDING=weak;
							SIZE=4;
						};
					};
	md_init;
	md_init_daemon;
	md_init_nosig;
	md_logpfx;
	mdmddberror;
	mdmderror;
	md_med_def_timeout		{ ASSERT { TYPE=data; SIZE=8 } };
	md_med_pmap_timeout		{ ASSERT { TYPE=data; SIZE=8 } };
	mdmn_abort;
	mdmn_allocate_changelog;
	mdmn_comm_lock_2;
	mdmn_comm_msglock_2;
	mdmn_comm_reinit_set_2;
	mdmn_comm_resume_2;
	mdmn_comm_suspend_2;
	mdmn_comm_unlock_2;
	mdmn_create_msgid;
	mdmn_get_changelogrec;
	mdmn_get_handler;
	mdmn_get_message_class;
	mdmn_get_submessage_generator;
	mdmn_get_timeout;
	mdmn_log_msg;
	mdmn_msgtype_lock;
	mdmn_reinit_set;
	mdmn_reset_changelog;
	mdmn_resume;
	mdmn_send_2;
	mdmn_send_message;
	mdmn_snarf_changelog;
	mdmn_suspend;
	mdmn_unlog_msg;
	mdmn_update_changelog;
	mdmn_wakeup_initiator_2;
	mdmn_wakeup_master_2;
	mdmn_work_2;
	mdnullerror			{
						ASSERT {
							TYPE=data;
$if _x86
							SIZE=0x20;
$elif _sparc
							SIZE=0x30;
$else
$error unknown ELFCLASS
$endif
						};
					};
	md_perror;
	md_post_sig;
	md_rb_sig_handling_off;
	md_rb_sig_handling_on;
	mdrpc_adddrvs_1;
	mdrpc_adddrvs_2;
	mdrpc_add_drv_sidenms_1;
	mdrpc_add_drv_sidenms_2;
	mdrpc_addhosts_1;
	mdrpc_addhosts_2;
	mdrpc_clr_mnsetlock_2;
	mdrpccreateerror;
	mdrpc_createset_1;
	mdrpc_createset_2;
	mdrpc_deldrvs_1;
	mdrpc_deldrvs_2;
	mdrpc_del_drv_sidenms_1;
	mdrpc_del_drv_sidenms_2;
	mdrpc_delhosts_1;
	mdrpc_delhosts_2;
	mdrpc_delset_1;
	mdrpc_delset_2;
	mdrpc_devinfo_2;
	mdrpc_drvused_1;
	mdrpc_drvused_2;
	mdrpcerror;
	mdrpc_flush_internal_1;
	mdrpc_flush_internal_2;
	mdrpc_getset_1;
	mdrpc_getset_2;
	mdrpc_gtimeout_1;
	mdrpc_gtimeout_2;
	mdrpc_hostname_1;
	mdrpc_hostname_2;
	mdrpc_imp_adddrvs_2;
	mdrpc_lock_set_1;
	mdrpc_lock_set_2;
	mdrpc_mdcommdctl_2;
	mdrpc_mncreateset_2;
	mdrpc_mngetset_2;
	mdrpc_mn_is_stale_2;
	mdrpc_mn_mirror_resync_all_2;
	mdrpc_mnsetmaster_2;
	mdrpc_mn_sp_update_abr_2;
	mdrpc_mn_susp_res_io_2;
	mdrpc_nullproc_1;
	mdrpc_nullproc_2;
	mdrpc_ownset_1;
	mdrpc_ownset_2;
	mdrpc_reset_mirror_owner_2;
	mdrpc_setnameok_1;
	mdrpc_setnameok_2;
	mdrpc_setnumbusy_1;
	mdrpc_setnumbusy_2;
	mdrpc_stimeout_1;
	mdrpc_stimeout_2;
	mdrpc_unlock_set_1;
	mdrpc_unlock_set_2;
	mdrpc_upd_dr_dbinfo_1;
	mdrpc_upd_dr_dbinfo_2;
	mdrpc_upd_dr_flags_1;
	mdrpc_upd_dr_flags_2;
	mdrpc_updmeds_1;
	mdrpc_updmeds_2;
	mdrpc_upd_nr_flags_2;
	mdrpc_upd_sr_flags_1;
	mdrpc_upd_sr_flags_2;
	mdstealerror;
	mdsyserror;
	mduseerror;
	md_which_sig;
	meddstealerror;
	med_errnum_to_str;
	med_get_data_1;
	med_get_rec_1;
	med_hostname_1;
	med_null_1;
	med_null_err			{ ASSERT { TYPE=data; SIZE=0xc } };
	med_upd_data_1;
	med_upd_rec_1;
	meta_adjust_geom;
	meta_canonicalize;
	meta_check_column;
	meta_check_component;
	meta_check_devicesize;
	meta_check_driveinset;
	meta_check_drive_inuse;
	meta_check_drivemounted;
	meta_check_driveswapped;
	meta_check_hotspare;
	meta_check_hsp;
	meta_check_inhsp;
	meta_check_inmeta;
	meta_check_inmirror;
	meta_check_inraid;
	meta_check_inreplica;
	meta_check_inset;
	meta_check_instripe;
	meta_check_intrans;
	meta_check_inuse;
	meta_check_log;
	meta_check_master;
	meta_check_mirror;
	meta_check_overlap;
	meta_check_ownership;
	meta_check_ownership_on_host;
	meta_check_raid;
	meta_check_replica;
	meta_check_root;
	meta_check_samedrive;
	meta_check_stripe;
	meta_check_submirror;
	metachkcomp;
	metachkdisk;
	metachkhsp;
	metachkmeta;
	meta_client_create;
	meta_client_create_retry;
	meta_cmpldev;
	meta_concat_generic;
	meta_concat_parent;
	meta_conv_drvdesc_new2old;
	meta_conv_drvdesc_old2new;
	meta_conv_drvname_new2old;
	meta_conv_drvname_old2new;
	meta_cook_syntax;
	meta_create_hsp;
	meta_create_mirror;
	meta_create_non_dup_list;
	meta_create_raid;
	meta_create_stripe;
	meta_ctds_to_dids;
	meta_db_addsidenms;
	meta_db_attach;
	meta_db_balance;
	meta_db_delsidenm;
	meta_db_detach;
	meta_db_minreplica;
	meta_db_patch;
	meta_default_raid_interlace;
	meta_default_stripe_interlace;
	meta_deviceid_to_nmlist;
	meta_dev_ismeta;
	meta_devid_supported_in_did;
	metadevname;
	metad_getsetbyname;
	metad_getsetbynum;
	metad_isautotakebyname;
	metad_isautotakebynum;
	metadiskname;
	metadrivedesc_append;
	metadrivename;
	metadrivenamelist;
	metadrivenamelist_append;
	meta_drivenamelist_append_wrapper;
	metadrivename_withdrkey;
	meta_drive_to_disk_status_list;
	meta_enable_byname;
	meta_exchange;
	meta_expldev;
	metafakesetname;
	meta_find_erred_comp;
	meta_fixdevid;
	metaflushctlrcache;
	metaflushdrivenames;
	metaflushmetanames;
	metaflushnames;
	metaflushsetname;
	metaflushsetno;
	metaflushsidenames;
	metaflushstatcache;
	meta_free_disk_status_list;
	metafreedrivedesc;
	meta_free_drive_info_list;
	metafreedrivename;
	metafreedrivenamelist;
	meta_free_hsp;
	metafreehspnamelist;
	meta_free_im_set_desc;
	meta_free_mirror;
	metafreenamelist;
	meta_free_nodelist;
	meta_free_raid;
	metafreereplicalist;
	meta_free_sp;
	meta_free_stripe;
	meta_free_trans;
	meta_free_unit;
	metafreevtoc;
	meta_getalldevs;
	meta_get_and_report_set_info;
	metagetcinfo;
	meta_get_current_root;
	meta_get_current_root_dev;
	meta_getdev;
	metagetdevicesname;
	meta_get_devid;
	meta_getdevs;
	meta_getdidbykey;
	meta_getdidminorbykey;
	metaget_drivedesc;
	metaget_drivedesc_fromnamelist;
	metaget_drivedesc_sideno;
	meta_get_drive_names;
	metagetgeom;
	meta_get_hotspare_names;
	meta_get_hsp;
	meta_get_hsp_common;
	meta_get_hsp_names;
	meta_gethspnmentbyid;
	meta_get_hs_state;
	metagetlabel;
	meta_getmajor;
	meta_get_mdunit;
	meta_getminor;
	meta_get_mirror;
	meta_get_mirror_names;
	metagetmiscname;
	meta_get_mountp;
	meta_getnextside_devinfo;
	meta_getnmbykey;
	meta_getnmentbydev;
	meta_getnmentbykey;
	meta_get_nunits;
	metagetpartno;
	meta_get_raid;
	meta_get_raid_col_state;
	meta_get_raid_common;
	meta_get_raid_names;
	meta_get_replica_names;
	meta_get_reserved_names;
	metagetset;
	metaget_setdesc;
	metaget_setownership;
	metagetsize;
	meta_get_sp;
	meta_get_sp_common;
	meta_get_sp_names;
	metagetstart;
	meta_get_stripe;
	meta_get_stripe_common;
	meta_get_stripe_names;
	meta_get_stripe_state;
	meta_gettimeofday;
	meta_get_trans;
	meta_get_trans_common;
	meta_get_trans_names;
	meta_get_tstate;
	meta_get_unit;
	meta_getuserflags;
	meta_getvtoc;
	metagetvtoc;
	meta_h2hi;
	metahasmddb;
	meta_hi2h;
	meta_hs_add;
	meta_hs_delete;
	meta_hs_enable;
	metahsphspname;
	metahspname;
	metahspnamelist;
	metahspnamelist_append;
	meta_hsp_print;
	meta_hsp_reset;
	meta_hs_replace;
	meta_imp_drvused;
	meta_imp_set;
	meta_imp_set_adddrives;
	meta_init_hsp;
	meta_init_make_device;
	meta_init_mirror;
	meta_init_name;
	meta_init_raid;
	meta_init_stripe;
	meta_invalidate_hsp;
	meta_invalidate_name;
	metaioctl;
	meta_is_all;
	meta_is_devid_in_anyset;
	meta_is_devid_in_thisset;
	meta_is_drive_in_anyset;
	meta_is_drive_in_thisset;
	metaislocalset;
	meta_is_member;
	metaismeta;
	meta_is_mn_name;
	meta_is_mn_set;
	meta_is_none;
	meta_isopen;
	metaissameset;
	metakeyname;
	meta_list_disks;
	meta_list_drives;
	meta_lock;
	meta_lock_name;
	meta_lock_nowait;
	meta_lock_status;
	metalogfp			{
						ASSERT {
							TYPE=data;
$if __GNUC
							SH_ATTR=nobits;
$endif
							SIZE=4;
						};
					};
	meta_logs_print;
	metamakedev;
	meta_match_enclosure;
	meta_mc_log;
	meta_med_hnm2ip;
	meta_mediator_info_from_file;
	meta_mirror_anycomp_is_err;
	meta_mirror_attach;
	meta_mirror_detach;
	meta_mirror_enable;
	meta_mirror_get_params;
	meta_mirror_offline;
	meta_mirror_online;
	meta_mirror_print;
	meta_mirror_replace;
	meta_mirror_reset;
	meta_mirror_resync;
	meta_mirror_resync_all;
	meta_mirror_resync_block_all;
	meta_mirror_resync_kill;
	meta_mirror_resync_kill_all;
	meta_mirror_resync_unblock;
	meta_mirror_resync_unblock_all;
	meta_mirror_set_params;
	meta_mn_change_owner;
	meta_mnjoin_all;
	meta_mn_mirror_resync_all;
	meta_mn_send_command;
	meta_mn_send_get_tstate;
	meta_mn_send_metaclear_command;
	meta_mn_send_resync_starting;
	meta_mn_send_setsync;
	meta_mn_send_suspend_writes;
	meta_mn_singlenode;
	meta_mn_sp_update_abr;
	meta_mnsync_diskset_mddbs;
	meta_mnsync_user_records;
	metamnumname;
	metaname;
	metaname_fast;
	meta_name_getname;
	metanamelist;
	metanamelist_append;
	meta_notify_createq;
	meta_notify_deleteq;
	meta_notify_doputev;
	meta_notify_flushq;
	meta_notify_freeevlist;
	meta_notify_getev;
	meta_notify_getevlist;
	meta_notify_listq;
	meta_notify_putev;
	meta_notify_putevlist;
	meta_notify_sendev;
	meta_notify_validq;
	meta_number_to_string;
	meta_patch_fsdev;
	meta_patch_rootdev;
	meta_patch_swapdev;
	meta_patch_vfstab;
	meta_ping_mnset;
	meta_prbits;
	meta_print_all;
	meta_print_devid;
	meta_print_hrtime;
	meta_print_mirror_options;
	meta_print_name;
	meta_print_raid_options;
	meta_print_stripe_options;
	meta_print_time;
	meta_prune_cnames;
	meta_raid_anycomp_is_err;
	meta_raid_attach;
	meta_raid_check_interlace;
	meta_raid_enable;
	meta_raid_get_params;
	meta_raid_print;
	meta_raid_regen_byname;
	meta_raid_replace;
	meta_raid_reset;
	meta_raid_resync;
	meta_raid_resync_all;
	meta_raid_set_params;
	meta_raid_state_cnt;
	meta_raid_valid;
	meta_read_nodelist;
	meta_reconfig_choose_master;
	meta_recover_sp;
	meta_rel_own;
	meta_rename;
	meta_repartition_drive;
	meta_replace_byname;
	metareplicalist;
	meta_replica_quorum;
	meta_replicaslice;
	meta_reset;
	meta_reset_all;
	meta_reset_by_name;
	meta_resync_all;
	meta_resync_byname;
	metarpcclose;
	metarpccloseall;
	metarpcopen;
	meta_set_adddrives;
	meta_set_addhosts;
	meta_set_addmeds;
	meta_set_auto_take;
	meta_set_balance;
	meta_set_checkname;
	meta_set_deletedrives;
	meta_set_deletehosts;
	meta_set_deletemeds;
	meta_set_destroy;
	meta_setdid;
	meta_set_join;
	meta_setmdvtoc;
	metasetname;
	metasetnosetname;
	meta_set_purge;
	meta_set_query;
	meta_set_release;
	meta_set_take;
	meta_setup_db_locations;
	meta_setup_geom;
	meta_setuserflags;
	meta_setvtoc;
	metasetvtoc;
	meta_set_withdraw;
	metaslicename;
	meta_smf_disable;
	meta_smf_enable;
	meta_smf_getmask;
	meta_smf_isonline;
	meta_smf_isdisabled;
	meta_sp_attach;
	meta_sp_can_create_sps;
	meta_sp_can_create_sps_on_drive;
	meta_sp_get_by_component;
	meta_sp_get_free_space;
	meta_sp_get_free_space_on_drive;
	meta_sp_get_number_of_possible_sps;
	meta_sp_get_number_of_possible_sps_on_drive;
	meta_sp_get_possible_sp_size;
	meta_sp_get_possible_sp_size_on_drive;
	meta_sp_issp;
	meta_sp_parsesize;
	meta_sp_reset_component;
	meta_sp_setstatus;
	meta_sp_update_abr;
	meta_stat;
	meta_status_own;
	meta_stripe_anycomp_is_err;
	meta_stripe_attach;
	meta_stripe_check_interlace;
	meta_stripe_get_params;
	meta_stripe_print;
	meta_stripe_replace;
	meta_stripe_reset;
	meta_stripe_set_params;
	meta_svm_sysevent;
	meta_sync_db_locations;
	metasyslog			{
						ASSERT {
							TYPE=data;
$if __GNUC
							SH_ATTR=nobits;
$endif
							SIZE=4;
						};
					};
	meta_systemfile_append_mddb;
	meta_systemfile_append_mdroot;
	meta_systemfile_copy;
	meta_tab_find;
	meta_tab_free;
	meta_tab_parse;
	meta_take_own;
	meta_trans_detach;
	meta_trans_print;
	meta_trans_replace;
	meta_trans_reset;
	meta_unlock;
	meta_update_devtree;
	meta_update_mb;
	meta_update_md_cf;
	meta_upd_ctdnames;
	meta_write_nodelist;
	mhd_list_1;
	mhd_null_error			{ ASSERT { TYPE=data; SIZE=8 } };
	mhd_relown_1;
	mhd_status_1;
	mhd_tkown_1;
	mhstealerror;
	mnnr_cache_add;
	mnnr_cache_del;
	mnsetdup;
	mt_flags_to_action;
	mt_flags_to_name;
	mt_l_error_to_action;
	mt_l_error_to_name;
	myname				{ ASSERT { TYPE=data; SIZE=4 } };
	mynode;
	name_to_pass_num;
	name_to_rd_opt;
	name_to_wr_opt;
	nodehasset;
	nodesuniq;
	open_admin;
	open_mnttab;
	own_set;
	parse_device;
	parse_interlace;
	pathname_reload;
	pick_good_disk;
	print_concise_entry;
	procsigs;
	raid_col_state_to_name;
	raid_state_to_action;
	raid_state_to_name;
	rb_test;
	rd_opt_to_name;
	read_master_block;
	Realloc;
	rel_own_bydd;
	resnarf_set;
	resync_genid;
	s_delrec;
	s_delset;
	sdssc_add_hosts			{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_bindclusterdevs		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_binddevs			{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_bind_library		{ FLAGS = NODIRECT };
	sdssc_clnt_bind_devs		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_clnt_proxy_cmd		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_cmd_proxy			{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_cm_nid2nm			{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_cm_nm2nid			{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_cm_sr_nid2nm		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_cm_sr_nm2nid		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_convert_cluster_path	{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_convert_ctd_path		{
						FLAGS = NODIRECT;
							ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_convert_path_free		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_create_begin		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_create_end		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_delete_begin		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_delete_end		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_delete_hosts		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_free_mdcerr_list		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_freenodelist		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_get_index			{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_getnodelist		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_get_primary_host		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_get_priv_ipaddr		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_get_services		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_get_services_free		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_gettransportbynode	 {
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_mo_create_begin		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_notify_service		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_property_get		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_property_set		{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_suspend			{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	sdssc_version			{
						FLAGS = NODIRECT;
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=4;
						};
					};
	setdevstamp;
	setdup;
	set_snarf;
	setup_db_bydd;
	setup_mc_log;
	setup_med_cfg;
	short_circuit_getset;
	sm_state_to_action;
	sm_state_to_name;
	snarf_set;
	s_ownset;
	splicename;
	splitname;
	sr2setdesc;
	sr_cache_add;
	sr_cache_del;
	sr_cache_flush;
	sr_cache_flush_setno;
	sr_del_drv;
	sr_validate;
	start_time			{
						ASSERT {
							TYPE=data;
$if __GNUC
							SH_ATTR=nobits;
$endif
							SIZE=8;
						};
					};
	Strdup;
	strinlst;
	tag2obj_typetab			{ ASSERT { TYPE=data; SIZE=0x58 } };
	tk_own_bydd;
	transstats			{
						ASSERT {
							TYPE=data;
							SH_ATTR=nobits;
							SIZE=0x254;
						};
					};
	verbosity			{
						ASSERT {
							TYPE=data;
$if __GNUC
							SH_ATTR=nobits;
$endif
							SIZE=4;
						};
					};
	wr_opt_to_name;
	xdr_clnt_stat;
	xdr_comp_state_t;
	xdr_comp_t;
	xdr_daddr_t;
	xdr_dev_t;
	xdr_diskaddr_t;
	xdr_hotspare_states_t;
	xdr_hsp_t;
	xdr_hs_t;
	xdr_md_alias_ip_t;
	xdr_md_alias_nm_t;
	xdr_mdcinfo_t;
	xdr_md_common_t;
	xdr_md_comp_errno_t;
	xdr_md_comp_error_t;
	xdr_md_comp_t;
	xdr_mddb_cfgcmd_t;
	xdr_mddb_recid_t;
	xdr_mddb_recstatus_t;
	xdr_mddb_type_t;
	xdr_mddb_usercmd_t;
	xdr_mddb_userrec_t;
	xdr_md_dev64_t;
	xdr_md_dev_errno_t;
	xdr_md_dev_error_t;
	xdr_md_drive_desc;
	xdr_mddrivenamelist_t;
	xdr_mddrivename_t;
	xdr_md_drive_record;
	xdr_md_ds_errno_t;
	xdr_md_ds_error_t;
	xdr_md_errclass_t;
	xdr_md_error_info_t;
	xdr_md_error_t;
	xdr_mdgeom_t;
	xdr_md_h_arr_t;
	xdr_md_hi_arr_t;
	xdr_md_hi_t;
	xdr_md_hs_errno_t;
	xdr_md_hs_error_t;
	xdr_md_hsp_errno_t;
	xdr_md_hsp_error_t;
	xdr_mdhspnamelist_t;
	xdr_mdhspname_t;
	xdr_md_hsp_t;
	xdr_md_hs_t;
	xdr_md_h_t;
	xdr_mdkey_t;
	xdr_md_mddb_errno_t;
	xdr_md_mddb_error_t;
	xdr_md_md_errno_t;
	xdr_md_md_error_t;
	xdr_md_med_errno_t;
	xdr_md_mirror_t;
	xdr_md_mn_msg_t;
	xdr_md_mn_nodeid_t;
	xdr_mdnamelist_t;
	xdr_md_name_prefix;
	xdr_md_name_suffix;
	xdr_mdname_t;
	xdr_mdnmtype_t;
	xdr_md_node_nm_arr_t;
	xdr_md_node_nm_t;
	xdr_md_parent_t;
	xdr_mdpart_t;
	xdr_md_raidcol_t;
	xdr_md_raid_t;
	xdr_md_replicalist_t;
	xdr_md_replica_recerr_t;
	xdr_md_replica_t;
	xdr_md_riflags_t;
	xdr_md_row_t;
	xdr_mdrpc_bool_res;
	xdr_mdrpc_createset_2_args;
	xdr_mdrpc_createset_args;
	xdr_mdrpc_devid_2_args;
	xdr_mdrpc_devid_args;
	xdr_mdrpc_devid_name_2_args;
	xdr_mdrpc_devid_res;
	xdr_mdrpc_devidstr_args;
	xdr_mdrpc_devinfo_2_args;
	xdr_mdrpc_devinfo_2_res;
	xdr_mdrpc_devinfo_args;
	xdr_mdrpc_devinfo_res;
	xdr_mdrpc_drives_2_args;
	xdr_mdrpc_drives_args;
	xdr_mdrpc_drv_sidenm_2_args;
	xdr_mdrpc_drv_sidenm_args;
	xdr_mdrpc_drvused_2_args;
	xdr_mdrpc_drvused_args;
	xdr_md_rpc_error_t;
	xdr_mdrpc_generic_res;
	xdr_mdrpc_getdrivedesc_res;
	xdr_mdrpc_getset_2_args;
	xdr_mdrpc_getset_args;
	xdr_mdrpc_getset_res;
	xdr_mdrpc_gtimeout_res;
	xdr_mdrpc_host_2_args;
	xdr_mdrpc_host_args;
	xdr_mdrpc_hostname_res;
	xdr_mdrpc_mdcommdctl_2_args;
	xdr_mdrpc_mdcommdctl_args;
	xdr_mdrpc_mncreateset_2_args;
	xdr_mdrpc_mngetset_res;
	xdr_mdrpc_mnsetmaster_2_args;
	xdr_mdrpc_mn_susp_res_io_2_args;
	xdr_mdrpc_mn_susp_res_io_args;
	xdr_mdrpc_nodeid_2_args;
	xdr_mdrpc_nodeid_args;
	xdr_mdrpc_null_args;
	xdr_mdrpc_setlock_res;
	xdr_mdrpc_setno_2_args;
	xdr_mdrpc_setno_args;
	xdr_mdrpc_sp_2_args;
	xdr_mdrpc_sp_args;
	xdr_mdrpc_sp_flags_2_args;
	xdr_mdrpc_sp_flags_args;
	xdr_mdrpc_stimeout_2_args;
	xdr_mdrpc_stimeout_args;
	xdr_mdrpc_upd_dr_flags_2_args;
	xdr_mdrpc_upd_dr_flags_args;
	xdr_mdrpc_updmeds_2_args;
	xdr_mdrpc_updmeds_args;
	xdr_mdrpc_upd_nr_flags_2_args;
	xdr_mdrpc_upd_sr_flags_2_args;
	xdr_mdrpc_upd_sr_flags_args;
	xdr_md_set_desc;
	xdr_md_setkey_t;
	xdr_mdsetnamelist_t;
	xdr_mdsetname_t;
	xdr_md_set_nm_t;
	xdr_md_set_params_t;
	xdr_md_set_record;
	xdr_md_shared_t;
	xdr_mdsidenames_t;
	xdr_md_splitname;
	xdr_md_stackcap_t;
	xdr_md_status_t;
	xdr_md_stripe_t;
	xdr_md_submirror_t;
	xdr_md_sys_error_t;
	xdr_md_timeval32_t;
	xdr_md_trans_t;
	xdr_md_types_t;
	xdr_md_ur_get_cmd_t;
	xdr_md_use_errno_t;
	xdr_md_use_error_t;
	xdr_md_void_errno_t;
	xdr_md_void_error_t;
	xdr_mdvtoc_t;
	xdr_med_args_t;
	xdr_med_data_t;
	xdr_med_err_t;
	xdr_med_get_data_res_t;
	xdr_med_get_rec_res_t;
	xdr_med_hnm_res_t;
	xdr_med_med_t;
	xdr_med_rec_t;
	xdr_med_res_t;
	xdr_med_upd_data_args_t;
	xdr_med_upd_rec_args_t;
	xdr_mhd_cinfo_t;
	xdr_mhd_ctlrtype_t;
	xdr_mhd_did_flags_t;
	xdr_mhd_drive_id_t;
	xdr_mhd_drive_info_list_t;
	xdr_mhd_drive_info_t;
	xdr_mhd_drivename_t;
	xdr_mhd_drive_status_t;
	xdr_mhd_error_t;
	xdr_mhd_ff_mode_t;
	xdr_mhd_list_args_t;
	xdr_mhd_list_res_t;
	xdr_mhd_mhiargs_t;
	xdr_mhd_mhioctkown_t;
	xdr_mhd_opts_t;
	xdr_mhd_relown_args_t;
	xdr_mhd_serial_t;
	xdr_mhd_set_t;
	xdr_mhd_status_args_t;
	xdr_mhd_status_res_t;
	xdr_mhd_tkown_args_t;
	xdr_minor_or_hsp_t;
	xdr_minor_t;
	xdr_mm_params_t;
	xdr_mm_pass_num_t;
	xdr_mm_rd_opt_t;
	xdr_mm_wr_opt_t;
	xdr_mp_unit_t;
	xdr_mr_params_t;
	xdr_ms_params_t;
	xdr_mt_debug_t;
	xdr_mt_flags_t;
	xdr_mt_l_error_t;
	xdr_off_t;
	xdr_rcs_flags_t;
	xdr_rcs_state_t;
	xdr_replica_flags_t;
	xdr_rus_state_t;
	xdr_set_t;
	xdr_side_t;
	xdr_size_t;
	xdr_sm_flags_t;
	xdr_sm_state_t;
	xdr_stringarray;
	xdr_timeval;
	xdr_unit_t;
	Zalloc;
    local:
	*;
};
