#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright (c) 2004, 2011, Oracle and/or its affiliates. All rights reserved.
#

#
# MAPFILE HEADER START
#
# WARNING:  STOP NOW.  DO NOT MODIFY THIS FILE.
# Object versioning must comply with the rules detailed in
#
#	usr/src/lib/README.mapfiles
#
# You should not be making modifications here until you've read the most current
# copy of that file. If you need help, contact a gatekeeper for guidance.
#
# MAPFILE HEADER END
#

$mapfile_version 2

STUB_OBJECT;

SYMBOL_VERSION SUNW_2.3 {	# SunOS 5.11 (Solaris 11)
    global:
	SUNW_2.3;	# Defined to create a non-weak version of SUNW_2.3.
} SUNW_2.2.2;

SYMBOL_VERSION SUNW_2.2.2 {	# SunOS 5.10 (Solaris 10 Update 5)
    global:
	inet_aton		{ TYPE = FUNCTION; FILTER = libnsl.so.1 };
} SUNW_2.2.1;

SYMBOL_VERSION SUNW_2.2.1 {	# SunOS 5.10 (Solaris 10 Update 4)
    global:
	res_ndestroy;
} SUNW_2.2;

SYMBOL_VERSION SUNW_2.2 {	# SunOS 5.9 (Solaris 9)
    global:
	fp_resstat;
	herror;
	res_hostalias;
	res_nclose;
	res_ninit;
	res_nmkquery;
	res_nquery;
	res_nquerydomain;
	res_nsearch;
	res_nsend;
	res_nsendsigned;
} SUNW_2.1;

SYMBOL_VERSION SUNW_2.1 {	# SunOS 5.6 (Solaris 2.6)
    global:
	dn_comp;
	dn_expand;
	__dn_skipname;
	__fp_query;
	_getlong;
	_getshort;
	h_errno			{
					FLAGS = NODIRECT;
					FILTER = libnsl.so.1;
					ASSERT {
						TYPE=data;
						SH_ATTR=nobits;
						SIZE=4;
					};
				};
	__hostalias;
	hstrerror;
	__p_cdname;
	__p_class;
	__p_query;
	__p_time;
	__p_type;
	__putlong;
	_res		{
					ASSERT {
						TYPE=data;
						SH_ATTR=nobits; 
$if _ELF32
						SIZE=0x200;
$elif _ELF64
						SIZE=0x228;
$else
$error unknown ELFCLASS
$endif
					};
				};
	res_init;
	res_mkquery;
	res_query;
	res_querydomain;
	res_search;
	res_send;
	res_update;
};

# There really should be only one SUNWprivate version.
# Don't add any more.  Add new private symbols to SUNWprivate_2.2

SYMBOL_VERSION SUNWprivate_2.2 {
    global:
	isc_gethexstring;
	isc_puthexstring;
	__log_close_debug_channels;
	__memactive;
	p_sockun;
	res_findzonecut2;
	res_gethostbyname2;
	res_getservers;
	res_nametoclass;
	res_nametotype;
	res_nrandomid;
	res_nopt;
	res_setservers;
} SUNWprivate_2.1;

SYMBOL_VERSION SUNWprivate_2.1 {
    global:
	__assertion_failed	{ ASSERT { TYPE=data; SIZE=addrsize } };
	assertion_type_to_text;
	b64_ntop;
	__b64_ntop;
	b64_pton;
	__b64_pton;
	__ctl_client;
	__ctl_command;
	__ctl_endclient;
	__ctl_endserver;
	__ctl_getcsctx;
	__ctl_response;
	__ctl_sendhelp;
	__ctl_server;
	__ctl_setcsctx;
	daemon;
	dn_count_labels;
	__dn_count_labels;
	dn_skipname;
	__dst_buffer_to_key;
	__dst_check_algorithm;
	__dst_dnskey_to_key;
	__dst_free_key;
	__dst_generate_key;
	__dst_init;
	__dst_key_to_buffer;
	__dst_read_key;
	__dst_s_calculate_bits;
	__dst_s_dns_key_id;
	__dst_s_get_int16;
	__dst_s_id_calc;
	__dst_sign_data;
	__dst_s_put_int16;
	__dst_s_verify_str;
	dst_t_func		{
					ASSERT {
						TYPE=data;
						SH_ATTR=nobits;
						SIZE=addrsize[158];
					};
				};
	__dst_verify_data;
	__dst_write_key;
	__evAddTime;
	__evCancelConn;
	__evCancelRW;
	__evClearTimer;
	__evConnect;
	__evConsIovec;
	__evConsTime;
	__evCreate;
	__evDeselectFD;
	__evDestroy;
	__evDispatch;
	__evDo;
	__evGetNext;
	__evHighestFD;
	__evListen;
	__evNowTime;
	__evRead;
	__evResetTimer;
	__evSelectFD;
	__evSetDebug;
	__evSetTimer;
	__evTimeVal;
	__evUnwait;
	__evWaitFor;
	fp_nquery;
	__fp_nquery;
	fp_query;
	__fp_resstat;
	h_errlist		{ ASSERT { TYPE=data; SIZE=addrsize[5] } };
	__h_errno;
	__h_errno_set;
	hostalias;
	inet_cidr_ntop;
	inet_cidr_pton;
	inet_neta;
	inet_net_ntop;
	inet_net_pton;
	inet_nsap_addr;
	inet_nsap_ntoa;
	__irs_destroy;
	__ISC_res_freeupdrec;
	__ISC_res_mkupdate;
	__ISC_res_mkupdrec;
	__ISC_res_nmkupdate;
	__ISC_res_nupdate;
	__ISC_res_update;
	key_file_fmt_str	{ ASSERT { TYPE=data; SIZE=addrsize } };
	loc_aton;
	__loc_aton;
	loc_ntoa;
	__loc_ntoa;
	__log_add_channel;
	__log_category_is_active;
	__log_check;
	__log_close_stream;
	__log_free_channel;
	__log_free_context;
	__log_get_channel_type;
	__log_get_stream;
	__log_inc_references;
	__log_new_context;
	__log_new_file_channel;
	__log_new_null_channel;
	__log_new_syslog_channel;
	__log_open_stream;
	__log_option;
	__log_set_file_owner;
	__log_vwrite;
	__log_write;
	__memget;
	__memget_record;
	__memput;
	__memput_record;
	__memstats;
	__net_data_init;
	__net_data_minimize;
	__ns_datetosecs;
	__ns_find_tsig;
	_ns_flagdata		{ ASSERT { TYPE=data; SIZE=0x80 } };
	__ns_format_ttl;
	__ns_get16;
	__ns_get32;
	__ns_initparse;
	__ns_makecanon;
	__ns_msg_getflag;
	__ns_name_compress;
	__ns_name_eq;
	__ns_name_labels;
	__ns_name_length;
	__ns_name_map;
	__ns_name_ntol;
	__ns_name_ntop;
	__ns_name_owned;
	__ns_name_pack;
	__ns_name_pton;
	__ns_name_rollback;
	__ns_name_skip;
	__ns_name_uncompress;
	__ns_name_unpack;
	__ns_newmsg_copy;
	__ns_newmsg_done;
	__ns_newmsg_flag;
	__ns_newmsg_id;
	__ns_newmsg_init;
	__ns_newmsg_q;
	__ns_newmsg_rr;
	__ns_parserr;
	__ns_parse_ttl;
	__ns_parserr2;
	__ns_put16;
	__ns_put32;
	__ns_rdata_equal;
	__ns_rdata_refers;
	__ns_rdata_unpack;
	__ns_samedomain;
	__ns_samename;
	__ns_sign;
	__ns_sign2;
	__ns_sign_tcp;
	__ns_sign_tcp2;
	__ns_sign_tcp_init;
	__ns_skiprr;
	__ns_sprintrr;
	__ns_sprintrrf;
	__ns_verify;
	__ns_verify_tcp;
	__ns_verify_tcp_init;
	p_cdname;
	__p_cert_syms		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x48;
$elif _ELF64
						SIZE=0x90;
$else
$error unknown ELFCLASS
$endif
					};
				};
	p_class;
	__p_class_syms		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x60;
$elif _ELF64
						SIZE=0xc0;
$else
$error unknown ELFCLASS
$endif
					};
				};
	p_fqnname;
	__p_key_syms		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x48;
$elif _ELF64
						SIZE=0x90;
$else
$error unknown ELFCLASS
$endif
					};
				};
	p_option;
	__p_option;
	p_query;
	p_rcode;
	p_secstodate;
	__p_secstodate;
	p_section;
	__p_section;
	p_time;
	p_type;
	__p_type_syms		{
					ASSERT {
						TYPE=data;
$if _ELF32
						SIZE=0x33c;
$elif _ELF64
						SIZE=0x678;
$else
$error unknown ELFCLASS
$endif
					};
				};
	putlong;
	putshort;
	__putshort;
	res_close;
	__res_disable_mt;
	res_dnok;
	__res_dnok;
	__res_enable_mt;
	res_endhostent;
	res_findzonecut;
	res_freehostent;
	res_freeupdrec;
	__res_get_h_errno;
	res_gethostbyaddr;
	res_gethostbyname;
	res_gethostent;
	res_getipnodebyaddr;
	res_getipnodebyname;
	__res_get_res;
	res_hnok;
	__res_hnok;
	res_isourserver;
	res_mailok;
	__res_mailok;
	res_mkupdate;
	res_mkupdrec;
	res_nameinquery;
	__res_nameinquery;
	res_nisourserver;
	res_nmkupdate;
	res_nupdate;
	__res_no_hosts_fallback;
	_res_opcodes		{ ASSERT { TYPE=data; SIZE=addrsize[16] } };
	__res_override_retry;
	res_ownok;
	__res_ownok;
	res_pquery;
	res_queriesmatch;
	__res_queriesmatch;
	res_rndinit;
	res_randomid;
	__res_randomid;
	res_sendsigned;
	res_sethostent;
	__res_set_no_hosts_fallback;
	__res_state;
	__res_unset_no_hosts_fallback;
	set_assertion_failure_callback;
	sym_ntop;
	__sym_ntop;
	sym_ntos;
	__sym_ntos;
	sym_ston;
	__sym_ston;
	__tree_add;
	__tree_init;
	__tree_mung;
	__tree_srch;
	__tree_trav;
    local:
	*;
};
