#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright (c) 2006, 2011, Oracle and/or its affiliates. All rights reserved.
#

#
# MAPFILE HEADER START
#
# WARNING:  STOP NOW.  DO NOT MODIFY THIS FILE.
# Object versioning must comply with the rules detailed in
#
#	usr/src/lib/README.mapfiles
#
# You should not be making modifications here until you've read the most current
# copy of that file. If you need help, contact a gatekeeper for guidance.
#
# MAPFILE HEADER END
#

$mapfile_version 2

STUB_OBJECT;

SYMBOL_VERSION SUNW_1.2 {
    global:
	add_wchstr;
	COLOR_PAIRS	{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=4 } };
	COLORS		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=4 } };
	COLS		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=4 } };
	curscr		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	cur_term	{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	LINES		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=4 } };
	mvget_wstr;
	putp;
	stdscr		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	tparm;
	tputs;
} SUNW_1.1;

SYMBOL_VERSION SUNW_1.1 {
    global:
	addch;
	addchnstr;
	addchstr;
	addnstr;
	addnwstr;
	addstr;
	add_wch;
	add_wchnstr;
	addwstr;
	attr_get;
	attr_off;
	attroff;
	attr_on;
	attron;
	attr_set;
	attrset;
	baudrate;
	beep;
	bkgd;
	bkgdset;
	bkgrnd;
	bkgrndset;
	border;
	border_set;
	box;
	box_set;
	can_change_color;
	cbreak;
	chgat;
	clear;
	clearok;
	clrtobot;
	clrtoeol;
	color_content;
	COLOR_PAIR;
	color_set;
	copywin;
	curs_set;
	def_prog_mode;
	def_shell_mode;
	delay_output;
	delch;
	del_curterm;
	deleteln;
	delscreen;
	delwin;
	derwin;
	doupdate;
	dupwin;
	echo;
	echochar;
	echo_wchar;
	endwin;
	erase;
	erasechar;
	erasewchar;
	filter;
	flash;
	flushinp;
	getbkgd;
	getbkgrnd;
	getcchar;
	getch;
	getnstr;
	getn_wstr;
	getstr;
	get_wch;
	getwin;
	get_wstr;
	halfdelay;
	has_colors;
	has_ic;
	has_il;
	hline;
	hline_set;
	idcok;
	idlok;
	immedok;
	inch;
	inchnstr;
	inchstr;
	init_color;
	init_pair;
	initscr;
	innstr;
	innwstr;
	insch;
	insdelln;
	insertln;
	insnstr;
	ins_nwstr;
	insstr;
	instr;
	ins_wch;
	ins_wstr;
	intrflush;
	in_wch;
	in_wchnstr;
	in_wchstr;
	inwstr;
	isendwin;
	is_linetouched;
	is_wintouched;
	key_name;
	keyname;
	keypad;
	killchar;
	killwchar;
	leaveok;
	longname;
	meta;
	move;
	mvaddch;
	mvaddchnstr;
	mvaddchstr;
	mvaddnstr;
	mvaddnwstr;
	mvaddstr;
	mvadd_wch;
	mvadd_wchnstr;
	mvadd_wchstr;
	mvaddwstr;
	mvchgat;
	mvcur;
	mvdelch;
	mvderwin;
	mvgetch;
	mvgetnstr;
	mvgetn_wstr;
	mvgetstr;
	mvget_wch;
	mvhline;
	mvhline_set;
	mvinch;
	mvinchnstr;
	mvinchstr;
	mvinnstr;
	mvinnwstr;
	mvinsch;
	mvinsnstr;
	mvins_nwstr;
	mvinsstr;
	mvinstr;
	mvins_wch;
	mvins_wstr;
	mvin_wch;
	mvin_wchnstr;
	mvin_wchstr;
	mvinwstr;
	mvprintw;
	mvscanw;
	mvvline;
	mvvline_set;
	mvwaddch;
	mvwaddchnstr;
	mvwaddchstr;
	mvwaddnstr;
	mvwaddnwstr;
	mvwaddstr;
	mvwadd_wch;
	mvwadd_wchnstr;
	mvwadd_wchstr;
	mvwaddwstr;
	mvwchgat;
	mvwdelch;
	mvwgetch;
	mvwgetnstr;
	mvwgetn_wstr;
	mvwgetstr;
	mvwget_wch;
	mvwget_wstr;
	mvwhline;
	mvwhline_set;
	mvwin;
	mvwinch;
	mvwinchnstr;
	mvwinchstr;
	mvwinnstr;
	mvwinnwstr;
	mvwinsch;
	mvwinsnstr;
	mvwins_nwstr;
	mvwinsstr;
	mvwinstr;
	mvwins_wch;
	mvwins_wstr;
	mvwin_wch;
	mvwin_wchnstr;
	mvwin_wchstr;
	mvwinwstr;
	mvwprintw;
	mvwscanw;
	mvwvline;
	mvwvline_set;
	napms;
	newpad;
	newterm;
	newwin;
	nl;
	nocbreak;
	nodelay;
	noecho;
	nonl;
	noqiflush;
	noraw;
	notimeout;
	overlay;
	overwrite;
	pair_content;
	PAIR_NUMBER;
	pechochar;
	pecho_wchar;
	pnoutrefresh;
	prefresh;
	printw;
	putwin;
	qiflush;
	raw;
	redrawwin;
	refresh;
	reset_prog_mode;
	reset_shell_mode;
	resetty;
	restartterm;
	ripoffline;
	savetty;
	scanw;
	scr_dump;
	scr_init;
	scrl;
	scroll;
	scrollok;
	scr_restore;
	scr_set;
	setcchar;
	set_curterm;
	setscrreg;
	set_term;
	setupterm;
	slk_attr_off;
	slk_attroff;
	slk_attr_on;
	slk_attron;
	slk_attr_set;
	slk_attrset;
	slk_clear;
	slk_color;
	slk_init;
	slk_label;
	slk_noutrefresh;
	slk_refresh;
	slk_restore;
	slk_set;
	slk_touch;
	slk_wset;
	standend;
	standout;
	start_color;
	subpad;
	subwin;
	syncok;
	term_attrs;
	termattrs;
	termname;
	tgetent;
	tgetflag;
	tgetnum;
	tgetstr;
	tgoto;
	tigetflag;
	tigetnum;
	tigetstr;
	timeout;
	touchline;
	touchwin;
	typeahead;
	unctrl;
	ungetch;
	unget_wch;
	untouchwin;
	use_env;
	vid_attr;
	vidattr;
	vid_puts;
	vidputs;
	vline;
	vline_set;
	vw_printw;
	vwprintw;
	vw_scanw;
	vwscanw;
	waddch;
	waddchnstr;
	waddchstr;
	waddnstr;
	waddnwstr;
	waddstr;
	wadd_wch;
	wadd_wchnstr;
	wadd_wchstr;
	waddwstr;
	wattr_get;
	wattr_off;
	wattroff;
	wattr_on;
	wattron;
	wattr_set;
	wattrset;
	wbkgd;
	wbkgdset;
	wbkgrnd;
	wbkgrndset;
	wborder;
	wborder_set;
	wchgat;
	wclear;
	wclrtobot;
	wclrtoeol;
	wcolor_set;
	wcursyncup;
	wdelch;
	wdeleteln;
	wechochar;
	wecho_wchar;
	werase;
	wgetbkgrnd;
	wgetch;
	wgetnstr;
	wgetn_wstr;
	wgetstr;
	wget_wch;
	wget_wstr;
	whline;
	whline_set;
	winch;
	winchnstr;
	winchstr;
	winnstr;
	winnwstr;
	winsch;
	winsdelln;
	winsertln;
	winsnstr;
	wins_nwstr;
	winsstr;
	winstr;
	wins_wch;
	wins_wstr;
	win_wch;
	win_wchnstr;
	win_wchstr;
	winwstr;
	wmove;
	wnoutrefresh;
	wprintw;
	wredrawln;
	wrefresh;
	wscanw;
	wscrl;
	wsetscrreg;
	wstandend;
	wstandout;
	wsyncdown;
	wsyncup;
	wtimeout;
	wtouchln;
	wunctrl;
	wvline;
	wvline_set;
};

SYMBOL_VERSION SUNWprivate_1.1 {
    global:
	boolcodes	{ ASSERT { TYPE=data; SIZE=addrsize[38] } };
	boolfnames	{ ASSERT { TYPE=data; SIZE=addrsize[38] } };
	boolnames	{ ASSERT { TYPE=data; SIZE=addrsize[38] } };
	__cht1		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=4 } };
	__cht2		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=4 } };
	numcodes	{ ASSERT { TYPE=data; SIZE=addrsize[34] } };
	numfnames	{ ASSERT { TYPE=data; SIZE=addrsize[34] } };
	numnames	{ ASSERT { TYPE=data; SIZE=addrsize[34] } };
	__pcht1		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	__pcht2		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	strcodes	{ ASSERT { TYPE=data; SIZE=addrsize[395] } };
	strfnames	{ ASSERT { TYPE=data; SIZE=addrsize[395] } };
	strnames	{ ASSERT { TYPE=data; SIZE=addrsize[395] } };
	__w1		{ ASSERT { TYPE=data; SH_ATTR=nobits; SIZE=addrsize } };
	__WACS_BLOCK	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_BOARD	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_BTEE	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_BULLET	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_CKBOARD	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_DARROW	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_DEGREE	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_DIAMOND	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_HLINE	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_LANTERN	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_LARROW	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_LLCORNER	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_LRCORNER	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_LTEE	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_PLMINUS	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_PLUS	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_RARROW	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_RTEE	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_S1	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_S9	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_TTEE	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_UARROW	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_ULCORNER	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_URCORNER	{ ASSERT { TYPE=data; SIZE=0x20 } };
	__WACS_VLINE	{ ASSERT { TYPE=data; SIZE=0x20 } };
    local:
	*;
};
