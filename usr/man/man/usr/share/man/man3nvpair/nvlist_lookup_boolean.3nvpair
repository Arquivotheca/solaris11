'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved.
.TH nvlist_lookup_boolean 3NVPAIR "1 Aug 2008" "SunOS 5.11" "Name-value Pair Library Functions"
.SH NAME
nvlist_lookup_boolean, nvlist_lookup_boolean_value, nvlist_lookup_byte, nvlist_lookup_int8, nvlist_lookup_uint8, nvlist_lookup_int16, nvlist_lookup_uint16, nvlist_lookup_int32, nvlist_lookup_uint32, nvlist_lookup_int64, nvlist_lookup_uint64, nvlist_lookup_double, nvlist_lookup_string, nvlist_lookup_nvlist, nvlist_lookup_boolean_array, nvlist_lookup_byte_array, nvlist_lookup_int8_array, nvlist_lookup_uint8_array, nvlist_lookup_int16_array, nvlist_lookup_uint16_array, nvlist_lookup_int32_array, nvlist_lookup_uint32_array, nvlist_lookup_int64_array, nvlist_lookup_uint64_array, nvlist_lookup_nvlist_array, nvlist_lookup_string_array, nvlist_lookup_pairs \- match name and type indicated by the interface name and retrieve data value
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR... ] \fIfile\fR... \fB-lnvpair\fR [ \fIlibrary\fR... ]
#include <libnvpair.h>

\fBint\fR \fBnvlist_lookup_boolean\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_boolean_value\fR(\fBnvlist_t *\fR\fInvl\fR,
     \fBconst char *\fR\fIname\fR, \fBboolean_t *\fR\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_byte\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBuchar_t *\fR\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_int8\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBint8_t *\fR\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_uint8\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBuint8_t *\fR\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_int16\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBint16_t *\fR\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_uint16\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBuint16_t *\fR\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_int32\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBint32_t *\fR\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_uint32\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBuint32_t *\fR\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_int64\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBint64_t *\fR\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_uint64\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBuint64_t *\fR\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_double\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBdouble *\fR\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_string\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBchar **\fR\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_nvlist\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBnvlist_t **\fR\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_boolean_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBboolean_t **\fR\fIval\fR, \fBuint_t *\fR\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_byte_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBuchar_t **\fR\fIval\fR, \fBuint_t *\fR\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_int8_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBint8_t **\fR\fIval\fR, \fBuint_t *\fR\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_uint8_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBuint8_t **\fR\fIval\fR, \fBuint_t *\fR\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_int16_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBint16_t **\fR\fIval\fR, \fBuint_t *\fR\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_uint16_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBuint16_t **\fR\fIval\fR, \fBuint_t *\fR\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_int32_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBint32_t **\fR\fIval\fR, \fBuint_t *\fR\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_uint32_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBuint32_t **\fR\fIval\fR, \fBuint_t *\fR\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_int64_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBint64_t **\fR\fIval\fR, \fBuint_t *\fR\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_uint64_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBuint64_t **\fR\fIval\fR, \fBuint_t *\fR\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_string_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBchar ***\fR\fIval\fR, \fBuint_t *\fR\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_nvlist_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR,
     \fBnvlist_t ***\fR\fIval\fR, \fBuint_t *\fR\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_pairs\fR(\fBnvlist_t *\fR\fInvl\fR, \fBint\fR \fIflag\fR...);
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
\fB\fInvl\fR\fR
.ad
.RS 9n
.rt  
The \fBnvlist_t\fR to be processed.
.RE

.sp
.ne 2
.mk
.na
\fB\fIname\fR\fR
.ad
.RS 9n
.rt  
Name of the name-value pair to search.
.RE

.sp
.ne 2
.mk
.na
\fB\fInelem\fR\fR
.ad
.RS 9n
.rt  
Address to store the number of elements in value.
.RE

.sp
.ne 2
.mk
.na
\fB\fIval\fR\fR
.ad
.RS 9n
.rt  
Address to store the starting address of the value.
.RE

.sp
.ne 2
.mk
.na
\fB\fIflag\fR\fR
.ad
.RS 9n
.rt  
Specify bit fields defining lookup behavior: 
.sp
.ne 2
.mk
.na
\fB\fBNV_FLAG_NOENTOK\fR\fR
.ad
.RS 19n
.rt  
The retrival function will not fail if no matching name-value pair is found.
.RE

.RE

.SH DESCRIPTION
.sp
.LP
These functions find the \fBnvpair\fR (name-value pair) that matches the name and type as indicated by the interface name. If one is found, \fInelem\fR and \fIval\fR are modified to contain the number of elements in value and the starting address of data, respectively.
.sp
.LP
These functions work for nvlists (lists of name-value pairs) allocated with \fBNV_UNIQUE_NAME\fR or \fBNV_UNIQUE_NAME_TYPE\fR specified in \fBnvlist_alloc\fR(3NVPAIR). If this is not the case, the function returns \fBENOTSUP\fR because the list potentially contains multiple \fBnvpair\fRs with the same name and type.
.sp
.LP
Multiple threads can simultaneously read the same \fBnvlist_t\fR but only one thread can actively change a given \fBnvlist_t\fR at a time. The caller is responsible for the synchronization.
.sp
.LP
All memory required for storing the array elements, including string value, are managed by the library. References to such data remain valid until \fBnvlist_free()\fR is called on \fInvl\fR.
.sp
.LP
The \fBnvlist_lookup_pairs()\fR function retrieves a set of nvpairs. The arguments are a null-terminated list of pairs (data type \fBDATA_TYPE_BOOLEAN\fR), triples (non-array data types) or quads (array data types). The interpretation of the arguments depends on the value of \fItype\fR (see \fBnvpair_type\fR(3NVPAIR)) as follows:
.sp
.ne 2
.mk
.na
\fB\fIname\fR\fR
.ad
.RS 9n
.rt  
Name of the name-value pair to search.
.RE

.sp
.ne 2
.mk
.na
\fB\fItype\fR\fR
.ad
.RS 9n
.rt  
Data type (see \fBnvpair_type\fR(3NVPAIR)).
.RE

.sp
.ne 2
.mk
.na
\fB\fIval\fR\fR
.ad
.RS 9n
.rt  
Address to store the starting address of the value. When using data type \fBDATA_TYPE_BOOLEAN\fR, the \fIval\fR argument is omitted.
.RE

.sp
.ne 2
.mk
.na
\fB\fInelem\fR\fR
.ad
.RS 9n
.rt  
Address to store the number of elements in value. Non-array data types have only one argument and \fInelem\fR is omitted.
.RE

.sp
.LP
The order of the arguments is \fIname\fR, \fItype\fR, [\fIval\fR], [\fInelem\fR].
.sp
.LP
When using \fBNV_FLAG_NOENTOK\fR and no matching name-value pair is found, the memory pointed to by \fIval\fR and \fInelem\fR is left untouched.
.SH RETURN VALUES
.sp
.LP
These functions return 0 on success and an error value on failure.
.SH ERRORS
.sp
.LP
These functions will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 11n
.rt  
There is an invalid argument.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOENT\fR\fR
.ad
.RS 11n
.rt  
No matching name-value pair is found
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOTSUP\fR\fR
.ad
.RS 11n
.rt  
An encode/decode method is not supported.
.RE

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5)  for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.69i) |cw(2.81i) 
lw(2.69i) |lw(2.81i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
\fBlibnvpair\fR(3LIB), \fBnvlist_alloc\fR(3NVPAIR), \fBnvpair_type\fR(3NVPAIR), \fBattributes\fR(5)
