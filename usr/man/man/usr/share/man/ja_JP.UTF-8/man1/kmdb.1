'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.TH kmdb 1 "2009 年 10 月 28 日" "SunOS 5.11" "ユーザーコマンド"
.SH 名前
kmdb \- 原状態カーネルデバッガ
.SH 形式
.SS "ブート時の読み込み"
.sp
.LP
SPARC
.LP
.nf
\fBok boot\fR [\fIdevice-specifier\fR] \fB-k\fR [\fB-d\fR] [\fIboot-flags\fR]
.fi

.LP
.nf
\fBok boot\fR [\fIdevice-specifier\fR] kmdb [\fB-d\fR] [\fIboot-flags\fR]
.fi

.sp
.LP
x86
.LP
.nf
\fBkernel$\fR \fB/platform/i86pc/kernel/$ISADIR/unix\fR \fB-k\fR [\fB-d\fR] [\fIboot-flags\fR]
.fi

.SS "実行時の読み込み"
.LP
.nf
\fBmdb\fR \fB-K\fR
.fi

.SH 機能説明
.sp
.LP
\fBkmdb\fR は、ライブカーネルコンテキストでの \fBmdb\fR(1) のユーザーインタフェースと機能を実装した、対話型のカーネルデバッガです。\fBkmdb\fR を使用すると、カーネル実行の制御およびライブカーネル状態の検査と変更を実行できます。\fBkmdb\fR の読み込みは、ブートセッションの開始時またはシステムのブート後に実行できます。
.sp
.LP
このマニュアルページでは、\fBkmdb\fR に固有の機能、および \fBmdb\fR(1) と比較して異なる \fBkmdb\fR の機能について説明します。\fBmdb\fR(1)、および \fBkmdb\fR により実装される機能の詳細については、\fBmdb\fR(1) のマニュアルページおよび\fI『Oracle Solaris Modular Debugger Guide』\fRを参照してください。
.SS "読み込みと読み込み解除"
.sp
.ne 2
.mk
.na
\fBブート時の読み込み\fR
.ad
.sp .6
.RS 4n
要求があると、カーネル実行時リンカー (\fBkrtld\fR) は \fBkmdb\fR を読み込んでから制御をカーネルに渡します。\fB-d\fR フラグが指定されていると、デバッガはシステムの制御を取得してから \fBunix\fR オブジェクトの初期関数を実行します。\fB-d\fR が指定されていない場合、\fBkmdb\fR は読み込まれますが、明示的にそのモードに入るまで制御は取得しません。後述の「デバッガのエントリ」の節を参照してください。起動時に \fBkmdb\fR の読み込みを実行するブートコマンドの一覧については、前述の「形式」の節を参照してください。このコマンドを使って、SPARC マシンのブート時に \fBkmbd\fR が常に読み込まれるようにする方法については、\fBeeprom\fR(1M) を参照してください。
.sp
ブート時に読み込まれた \fBkmdb\fR は、システムのリブートによってのみ読み込みを解除できます。
.sp
\fBkmdb\fR の一部の機能はカーネルサービスの存在に依存しているため、ブート時に読み込まれた \fBkmdb\fR からすぐに使用することはできません。特に dmods の読み込みと読み込み解除は、モジュールサブシステムが初期化されるまで使用できません。要求は、処理可能になるまで待ち行列に入れられます。同様に、仮想アドレスから物理アドレスへの変換も VM システムが初期化されるまで使用できません。この機能が使用可能になるまで、変換を試みても失敗します。
.RE

.sp
.ne 2
.mk
.na
\fB実行時の読み込み\fR
.ad
.sp .6
.RS 4n
\fBmdb\fR(1) に \fB-K\fR フラグを使用すると、システムのブート後に \fBkmdb\fR を読み込むこともできます。この方法で読み込まれた場合、kmdb はただちにシステムの制御を取得します。実行時に読み込まれた \fBkmdb\fR を読み込み解除するには、\fBmdb\fR(1) に \fB-U\fR フラグを使用するか、デバッガ内で \fB::quit dcmd\fR に \fB-u\fR フラグを使用します。
.RE

.sp
.ne 2
.mk
.na
\fB端末タイプ\fR
.ad
.sp .6
.RS 4n
読み込み時に、\fBkmdb\fR はシステムコンソールで使用されている端末タイプの判別を試みます。デバッグ対象のシステムにシステムコンソール用のキーボードとローカルディスプレイが接続されている場合、\fBkmdb\fR はマシンに適した端末タイプ (SPARC の場合には「sun」、x86 の場合には「sun-color」) を使用します。シリアルコンソールが使用されている場合、ブート時に読み込まれる \fBkmdb\fR のデフォルトの端末タイプは「vt100」になります。実行時に読み込まれる \fBkmdb\fR のデフォルトは、\fBmdb\fR(1) により要求される端末タイプになります。\fBmdb\fR(1) は、\fB-T\fR フラグで上書きされていないかぎり、\fBTERM\fR 環境変数の値で指定された端末タイプを要求します。\fB::term\fR を使うと、現在の端末タイプを表示できます。
.RE

.SS "デバッガのエントリ"
.sp
.LP
デバッガのエントリは、明示的または暗黙的に要求できます。暗黙的なエントリは、ブレークポイントまたはその他の実行制御機能の使用時に検出されます。詳細は、「実行制御」の節を参照してください。\fB\fR
.sp
.LP
デバッガのエントリを明示的に要求する主な方法には、ローカルコンソールでシステムのキーボードアボートシーケンスを使用する方法と、シリアルコンソールで BREAK 文字を使用する方法があります。アボートシーケンスは、SPARC システムのローカルコンソールでは STOP-A または Shift-Pause、x86 システムのローカルコンソールでは F1-A または Shift-Pause です。アボートシーケンスおよびそれを無効にする方法については、\fBkbd\fR(1) を参照してください。
.sp
.LP
デバッガのエントリを要求する 2 番目の方法は、\fBmdb\fR(1) コマンドを使用するものです。デバッガの読み込み後に \fBmdb\fR(1) を \fB-K\fR フラグを指定して呼び出すと、デバッガのエントリがトリガーされます。
.sp
.LP
カーネルパニックおよび \fBkmdb\fR が読み込まれると、デフォルトでパニックルーチンが \fBkmdb\fR に入り、ライブデバッグが実行されます。ダンプデバイスが指定されていて、かつ \fB::cont\fR に入ると、デバッガが終了してクラッシュダンプが実行されます。パニックの発生時にカーネルが \fBkmdb\fR に入らないようにするには、\fBnopanicdebug\fR 変数を \fB1\fR に設定します。\fBkmdb\fR を使用するか、次の行を \fB/etc/system\fR に含めて、\fBnopanicdebug\fR 変数を \fB1\fR に設定します。 
.sp
.in +2
.nf
set nopanicdebug = 1
.fi
.in -2
.sp

.sp
.LP
これは、\fBkmdb\fR を読み込んだ状態を維持するが、デバッガに入ることなくパニックが常にクラッシュダンプをトリガーするようにする場合に役立ちます。
.SS "実行制御"
.sp
.LP
ほとんどの場合、\fBkmdb\fR によりカーネルに提供される実行制御機能は、\fBmdb\fR(1) プロセスのターゲットにより提供される実行制御機能を反映しています。ブレークポイント (\fB::bp\fR)、ウォッチポイント (\fB::wp\fR)、\fB::continue\fR、および \fB::step\fR のさまざまな特性を使用できます。
.sp
.LP
カーネルにより提供される無制限のユーザープロセスウォッチポイントとは異なり、\fBkmdb\fR は 1 つの CPU ウォッチポイントセットに制限されており、これによってウォッチポイントの数、サイズ、種類が限定されます。ウォッチポイントがハードウェアのサポートするウォッチポイントと互換性がない場合、\fB::wp\fR コマンドはそのウォッチポイントの作成を許可しません。
.SS "デバッガモジュール (dmods)"
.sp
.LP
\fBmdb\fR(1) の場合と同様に、\fBkmdb\fR をインストールすると、多数のサブシステム固有のデバッガモジュール (dmods) もインストールされます。dmods は、サポートするサブシステムの読み込みや読み込み解除に合わせて、自動的に読み込みまたは読み込み解除されます。\fB::load\fR や \fB::unload\fR を使用すると、dmods を明示的に読み込んだり、読み込み解除したりすることもできます。
.sp
.LP
\fBkmdb\fR は、カーネルの機能を使って dmods の読み込みと読み込み解除を行います。また、システムの実行を再開して要求された各操作を実行する必要があります。dmod の読み込みまたは読み込み解除が完了すると、システムが停止して、自動的にデバッガが再度エントリされます。dmod の読み込み時には、要求された dmod の読み込みが成功または失敗すると処理が完了します。どちらの場合でも、ステータスメッセージが出力されます。
.SS "プロセッサ固有の機能"
.sp
.LP
一部の機能は、個々のプロセッサタイプに固有のものです。この種の機能の例には、さまざまな x86 プロセッサで提供されている分岐トレースがあります。これらのプロセッサ固有の機能にアクセスするには、それをサポートしているシステムにのみ存在するプロセッサ固有の dcmd を使用します。プロセッサ固有のサポートを利用できるかどうかは、\fB::status dcmd\fR の出力に示されます。デバッガは、カーネルに基づいてプロセッサタイプを判断します。デバッガは特定のプロセッサタイプをサポートしている場合でも、カーネルによりプロセッサの識別が完了するまでサポートは公開されません。
.SS "カーネルマクロ"
.sp
.LP
デバッガに内蔵されているコンパイル済みマクロセットにアクセスできます。使用できるのはコンパイル済みのマクロだけです。\fBmdb\fR(1) とは異なり、\fB $< dcmd\fR を使用して任意の場所からマクロを読み込むことはできません。使用可能なマクロの一覧を表示するには、\fB$M\fR コマンドを使用します。
.SS "組み込み dcmd"
.sp
.LP
この節では、\fBkmdb\fR に固有の dcmd、および \fBkmdb\fR の dcmd の中で \fBmdb\fR(1) と動作が異なるものの一覧を示します。
.sp
.ne 2
.mk
.na
\fB\fB[\fR\fIaddress\fR]\fB::bp [+/-dDestT]\fR [\fB-c\fR \fIcmd\fR] [\fB-n\fR \fIcount\fR] \fIsym\fR ...\fR
.ad
.br
.na
\fB\fIaddress\fR \fB :b [\fR\fIcmd\fR \fB\&...]\fR\fR
.ad
.sp .6
.RS 4n
指定された場所にブレークポイントを設定します。\fB::bp\fR dcmd は、指定されたアドレスまたはシンボル (dcmd の前にある明示的な式で指定されたオプションのアドレスを含む) ごと、そして、dcmd の後ろにある文字列または即値ごとにブレークポイントを設定します。引数には、指定された特定の仮想アドレスを示すシンボル名または即値を指定できます。
.sp
シンボル名を指定した場合は、まだ評価できないシンボルを参照できます。まだ読み込んでいないオブジェクト内のオブジェクト名や関数名を参照できます。この場合、ターゲット内のブレークポイントは延期され、指定された名前に一致するオブジェクトが読み込まれるまでアクティブ (有効) になりません。オブジェクトが読み込まれると、このブレークポイントは自動的に有効になります。
.sp
\fB-d\fR、\fB-D\fR、\fB-e\fR、\fB-s\fR、\fB-t\fR、\fB-T\fR、\fB-c\fR、および \fB-n\fR オプションは、\fB::evset\fR dcmd で使用するのと同じです。\fB::evset\fR については、\fBmdb\fR(1) を参照してください。dcmd の \fB:b\fR 形式を使用した場合、ブレークポイントは dcmd の前にある式で指定した仮想アドレスだけに設定されます。\fB:b\fR dcmd の後ろにある引数は連結され、コールバック文字列となります。この文字列にメタキャラクタが含まれる場合、文字列を引用符で囲む必要があります。
.RE

.sp
.ne 2
.mk
.na
\fB\fB::branches\fR [\fB-v\fR]\fR
.ad
.br
.na
\fB(x86 のみ)\fR
.ad
.sp .6
.RS 4n
CPU が選択した最後の分岐を表示します。この dcmd は x86 システムでのみサポートされます。また、プロセッサ固有のサポートが検出されて有効化されている場合にのみ使用できます。表示される分岐の数と種類は、CPU の提供する分岐トレース機能によって異なります。\fB-v\fR オプションを使用すると、指定した分岐より前の命令が表示されます。
.RE

.sp
.ne 2
.mk
.na
\fB[\fIfunction\fR] \fB::call\fR [\fIarg\fR [\fIarg\fR ...]]\fR
.ad
.sp .6
.RS 4n
指定した関数を、指定した引数を使って呼び出します。呼び出された関数は、読み込まれたモジュールのシンボルテーブル内の関数として表示されます。文字列引数は、参照により渡されます。呼び出しが完了すると、その関数の戻り値が表示されます。
.sp
この dcmd は、きわめて慎重に使用する必要があります。呼び出しが行われても、カーネルは再開されません。呼び出された関数は、使用可能なカーネルサービスに関してどのような想定も行えません。また、ブロックするような操作や呼び出しを実行してはなりません。ユーザーは、呼び出された関数により発生する副作用についても警戒しておく必要があります。カーネルの安定性が影響を受ける可能性があるためです。
.RE

.sp
.ne 2
.mk
.na
\fB[\fIaddr\fR] \fB::cpuregs\fR [\fB-c\fR \fIcpuid\fR]\fR
.ad
.sp .6
.RS 4n
指定された CPU の現在の汎用レジスタセットを、\fB::regs\fR で使用される書式で表示します。
.RE

.sp
.ne 2
.mk
.na
\fB[\fIaddr\fR] \fB::cpustack\fR [\fB-c\fR \fIcpuid\fR]\fR
.ad
.sp .6
.RS 4n
指定された CPU の C スタックバックトレースを出力します。表示されるバックトレースは、デバッガが指定された CPU をエントリまたは停止した時点のものです。
.RE

.sp
.ne 2
.mk
.na
\fB\fIaddr\fR[,\fIlen\fR] \fB::in\fR [\fB-L\fR \fIlen\fR]\fR
.ad
.br
.na
\fB(x86 のみ)\fR
.ad
.sp .6
.RS 4n
\fIaddr\fR で指定された入出力ポートから \fIlen\fR バイトを読み込みます。\fB-L\fR オプションが指定されている場合は、このオプションが繰り返し回数の値よりも優先されます。読み取り長は 1、2、または 4 バイトにする必要があり、ポートアドレスはこの長さと同じ配置にする必要があります。
.RE

.sp
.ne 2
.mk
.na
\fB\fIaddr\fR[,\fIlen\fR] \fB::out\fR [\fB-L\fR \fIlen\fR] \fIvalue\fR\fR
.ad
.br
.na
\fB(x86 のみ)\fR
.ad
.sp .6
.RS 4n
値を \fIaddr\fR で指定された len バイトの入出力ポートに書き込みます。\fB-L\fR オプションが指定されている場合は、このオプションが繰り返し回数の値よりも優先されます。書き込み長は 1、2、または 4 バイトにする必要があり、ポートアドレスはこの長さと同じ配置にする必要があります。
.RE

.sp
.ne 2
.mk
.na
\fB\fB::quit\fR [\fB-u\fR]\fR
.ad
.br
.na
\fB\fB$q\fR\fR
.ad
.sp .6
.RS 4n
デバッガを終了します。\fB-u\fR オプションを使用すると、システムが再開されて、デバッガが読み込み解除されます。ブート時にデバッガが読み込まれた場合、\fB-u\fR オプションは使用できません。\fB-u\fR オプションを使用すると、SPARC システムが終了して、ブート PROM の \fBok\fR プロンプトが表示されます。\fBgo\fR コマンドを使用するとデバッガを再度エントリできます。x86 システムでは、マシンをリブートするための許可を求めるプロンプトが表示されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fB::step [over|out|branch]\fR\fR
.ad
.sp .6
.RS 4n
ターゲットを 1 命令だけ実行します。サブルーチンの呼び出しまで進めるには、オプションの \fBover\fR 引数を使用します。オプションの \fBout\fR 引数を指定した場合、制御が現在の関数から戻ってくるまで、ターゲットプログラムは実行を継続します。
.sp
オプションの \fBbranch\fR 引数は、x86 システムでプロセッサ固有のサポートが検出されて有効化されている場合にのみ使用できます。\fB::step branch\fR が指定されている場合、次の分岐命令が検出されるまでターゲットプログラムは実行を継続します。
.sp
SPARC システムでは、\fB::step dcmd\fR を使用して「ta」命令を実行することはできません。同様に、x86 システムで、これを使用して「int」命令を実行することもできません。実行によりデバッガで解決できないトラップが生成された場合は、その効果に対するメッセージが出力されて実行が失敗します。
.RE

.sp
.ne 2
.mk
.na
\fB\fBcpuid::switch\fR\fR
.ad
.br
.na
\fB\fBcpuid:x\fR\fR
.ad
.sp .6
.RS 4n
指定された CPU を代表として使用します。スタックトレース、汎用レジスタダンプ、および類似の機能で、新しい代表 CPU がデータソースとして使用されます。新しい代表 CPU では完全な実行制御機能を使用できます。
.RE

.sp
.ne 2
.mk
.na
\fB\fB::term\fR\fR
.ad
.sp .6
.RS 4n
現在の端末タイプを表示します。
.RE

.sp
.ne 2
.mk
.na
\fB\fIaddr\fR\fB[,\fR\fIlen\fR]\fB::wp [+/-dDestT]\fR [\fB-rwx\fR] [\fB-pi\fR] [\fB-n\fR \fIcount\fR] [\fB-c\fR \fIcmd\fR]\fR
.ad
.br
.na
\fB\fB\fIaddr\fR[,\fIlen\fR]\fR\fB:a [\fIcmd\fR\fR \fB\&...]\fR\fR
.ad
.br
.na
\fB\fB\fIaddr\fR[,\fIlen\fR]\fR\fB:p [\fIcmd\fR\fR \fB ...]\fR\fR
.ad
.br
.na
\fB\fB\fIaddr\fR[,\fIlen\fR]\fR\fB:w [\fIcmd\fR\fR \fB\&...]\fR\fR
.ad
.sp .6
.RS 4n
指定されたアドレスにウォッチポイントを設定します。これは、デフォルトで仮想アドレスとして解釈されます。\fB-p\fR オプションを指定した場合、アドレスは物理アドレスとして解釈されます。x86 プラットフォームでは、\fB-i\fR オプションを使用するとウォッチポイントを入出力ポート上に設定できます。\fB-i\fR オプションを指定した場合、アドレスは入出力ポートのアドレスとして解釈されます。
.sp
監視される領域の長さをバイト数で設定するには、dcmd の前に繰り返し回数を指定します。長さを明示的に設定しない場合、デフォルトは 1 バイトです。\fB::wp\fR dcmd を使用すると、読み取り (\fB-r\fR オプション)、書き込み (\fB-w\fR オプション)、または実行 (\fB-x\fR オプション) のアクセス権の任意の組み合わせでのトリガーが可能となるようにウォッチポイントを構成できます。
.sp
\fB-d\fR、\fB-D\fR、\fB-e\fR、\fB-s\fR、\fB-t\fR、\fB-T\fR、\fB-c\fR、および \fB-n\fR オプションは、\fB::evset\fR dcmd で使用するのと同じです。\fB::evset\fR については、\fBmdb\fR(1) を参照してください。\fB:a\fR dcmd は、指定されたアドレスに読み取り権のウォッチポイントを設定します。\fB:p\fR dcmd は、指定されたアドレスに実行権のウォッチポイントを設定します。\fB:w\fR dcmd は、指定されたアドレスに書き込み権のウォッチポイントを設定します。\fB:a\fR、\fB:p\fR、および \fB:w\fR dcmd の後ろにある引数は連結され、コールバック文字列となります。この文字列にメタキャラクタが含まれる場合、文字列を引用符で囲む必要があります。
.RE

.SH 属性
.sp
.LP
属性についての詳細は、\fBattributes\fR(5) を参照してください。
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
属性タイプ属性値
_
使用条件system/kernel (デバッガ)
_
developer/debug/mdb (dmod)
_
インタフェースの安定性確実
.TE

.SH 関連項目
.sp
.LP
\fBmdb\fR(1), \fBboot\fR(1M), \fBdumpadm\fR(1M), \fBeeprom\fR(1M), \fBkernel\fR(1M), \fBsystem\fR(4), \fBattributes\fR(5)
.sp
.LP
\fI『Oracle Solaris Modular Debugger Guide』\fR
.SS "SPARC のみ"
.sp
.LP
\fBkbd\fR(1)
.SH 注意事項
.SS "デバッガで使用可能なメモリーに関する制限"
.sp
.LP
デバッガで使用可能なメモリー領域は、デバッガの読み込み時に割り当てられ、その時点で固定されます。dcmd が使用可能なメモリーより多くのメモリーの割り当てを試みると、終了させられます (可能な場合)。デバッガは、メモリー不足の状態からの正常な回復を試みますが、それができない場合にはシステムを強制終了することがあります。この制約は、特に 32 ビットの x86 システムで深刻な問題になります。
.SS "パフォーマンスへの影響"
.sp
.LP
\fBkmdb\fR の読み込みにより、システムのパフォーマンスが悪影響を受けます。これは、デバッガがカーネルメモリーおよびその他の限定されたシステムリソースを消費するためです。
.SS "\fBkmdb\fR のブートによる \fBpanic()\fR スタックの取得"
.sp
.LP
\fBeeprom\fR(1M) を使用してブート時にシステムが常に \fBkmdb\fR を読み込むように設定すると、SPARC マシンで発生する \fBpanic()\fR の問題解決に役立つことがあります。パニックが発生すると、システムがリブートを開始することにより、パニックスタックがコンソールから消去されます。\fBkmdb\fR をブートすることで、パニックスタックを取得して解釈できるようになります。ブート時に \fBkmdb\fR の読み込みを指定する方法については、\fBeeprom\fR(1M) の例を参照してください。
