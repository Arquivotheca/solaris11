'\" te
.\" Copyright (c) 2009, 2011, Oracle and/or its affiliates. All rights reserved.
.TH error 1 "2011 年 6 月 8 日" "SunOS 5.11" "ユーザーコマンド"
.SH 名前
error \- ソース行の右側へのコンパイラエラーメッセージの挿入
.SH 形式
.LP
.nf
\fBerror\fR [\fB-n\fR] [\fB-q\fR] [\fB-s\fR] [\fB-v\fR] [\fB-t\fR \fIsuffixlist\fR] [\fB-I\fR \fIignorefile\fR] 
     [\fIfilename\fR]
.fi

.SH 機能説明
.sp
.LP
\fBerror\fR は、コンパイラや言語プロセッサにより生成されたエラーメッセージを解析します。error は、従来の読みづらい省略形だらけのエラーメッセージを解析し、エラーメッセージとソースコードを同時に表示できるようにします。
.sp
.LP
\fBerror\fR は、指定されたファイル (\fIfilename\fR) または標準入力からエラーメッセージを読み取り、次の処理を行います。
.RS +4
.TP
.ie t \(bu
.el o
各エラーメッセージを生成した言語プロセッサを判別します。
.RE
.RS +4
.TP
.ie t \(bu
.el o
エラー行を含むファイルの名前と行番号を判別します。
.RE
.RS +4
.TP
.ie t \(bu
.el o
ソースファイル内でエラー行の直前にエラーメッセージを挿入します。
.RE
.sp
.LP
言語プロセッサや内容を特定できなかったエラーメッセージは、ファイルに挿入されず標準出力に送られます。\fBerror\fR がソースファイルを処理するのは、すべての入力を読み込んだ後だけです。
.sp
.LP
\fBerror\fR は、その標準入力がエラーメッセージの送信元とパイプを介して接続されている状態で実行するように設計されています。言語プロセッサの中には、エラーメッセージを独自の標準エラーファイルに格納するものも、標準出力に送信するものがあります。いずれの場合でも、エラーメッセージの送り元はパイプを介して \fBerror\fR に接続されていなければなりません。たとえば、\fBcsh\fR 構文を使用していると仮定すると、次のコマンドは、lint の実行時に \fBmake\fR(1S) によって実行されたプログラムが生成したすべてのエラーメッセージを解析します。
.sp
.LP
\fBexample% make\fR \fB-s\fR \fBlint |\|& error\fR \fB-q\fR \fB-v\fR
.sp
.LP
\fBerror\fR は、\fBas\fR(1)、\fBcpp\fR(1)、\fBld\fR(1)、\fBmake\fR(1S) などのコンパイラが生成したエラーメッセージを識別できます。Pascal 以外のすべての言語において、エラーメッセージは 1 行に制限されています。エラーメッセージの中には、複数のファイル内の複数の行を示すものもあります。この場合、\fBerror\fR はエラーメッセージを複製し、該当するすべての場所にエラーメッセージを挿入します。
.SH オプション
.sp
.ne 2
.mk
.na
\fB\fB-n\fR\fR
.ad
.RS 17n
.rt  
ファイルを処理しません。すべてのエラーメッセージは標準出力に送られます。\fI\fR
.RE

.sp
.ne 2
.mk
.na
\fB\fB-q\fR\fR
.ad
.RS 17n
.rt  
\fBerror\fR はファイルを処理するかどうかを尋ねます。継続するには、質問に対して \fBy\fR または \fBn\fR で答えます。\fB-q\fR オプションを指定しない場合、すべての参照されるファイル (破棄されるエラーメッセージを参照するファイルを除く) が処理されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-s\fR\fR
.ad
.RS 17n
.rt  
エラーの分類に従った統計を出力します。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-v\fR\fR
.ad
.RS 17n
.rt  
すべてのファイルを処理した後で、処理したすべてのファイルを \fBvi\fR で開き、最初に処理したファイル内の最初のエラーの位置を示します。\fBvi\fR(1) が見つからない場合、\fBex\fR(1) または \fBed\fR(1) を標準の場所から実行しようとします。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-t\fR\fI suffixlist\fR\fR
.ad
.RS 17n
.rt  
後続の引数を接尾辞リストとして扱います。接尾辞リストに現れない接尾辞を持つファイルは処理されません。接尾辞リストはドットで区切られたリストで、\fB*\fR ワイルドカードも使用できます。たとえば、接尾辞リスト 
.sp
\fB\&.c.y.f*.h\fR
.sp
を使用すると、\fBerror\fR は \fB\&.c\fR、\fB\&.y\fR、\fB\&.f*\fR、\fB\&.h\fR で終了するファイルを処理します。 
.RE

.sp
.LP
\fBerror\fR は割り込みと終了を捕捉し、適切に終了します。
.SH 使用例
.LP
\fB例 1 \fR\fBerror\fR コマンドの使用
.sp
.LP
次の C シェル  \fB(/usr/bin/csh)\fR の例では、\fBerror\fR は FORTRAN コンパイラから入力を受け取ります。

.sp
.in +2
.nf
\fBexample% f77\fR \fB-c\fR \fB\fIany\fR.f |& error \fIoptions\fR\fR
.fi
.in -2
.sp

.sp
.LP
K シェル \fB(/usr/bin/ksh)\fR を使用した場合の例は、次のとおりです。

.sp
.in +2
.nf
\fBexample% f77\fR \fB-c\fR \fB\fIany\fR.f 2>&1 | error \fIoptions\fR\fR
.fi
.in -2
.sp

.SH 使用法
.sp
.LP
\fBerror\fR は、次の 6 つの分類基準に従ってエラーメッセージを処理します。
.sp
.ne 2
.mk
.na
\fB\fB同期\fR\fR
.ad
.sp .6
.RS 4n
言語プロセッサの中には、現在処理中のファイルを示す簡単なエラーメッセージを生成するものがあります。言語プロセッサが各エラーメッセージ中にファイル名を含めない場合、\fBerror\fR はこのような簡単なエラーメッセージを使用してファイル名を判別します。このような同期メッセージは、\fBerror\fR により完全に取り除かれます。
.RE

.sp
.ne 2
.mk
.na
\fB\fB破棄\fR\fR
.ad
.sp .6
.RS 4n
\fBlint\fR からのエラーメッセージの中で、2 つの \fBlint\fR ライブラリ、\fB/usr/lib/lint/llib-lc\fR と \fB/usr/lib/lint/llib-port\fR のいずれかに関連するメッセージは破棄され、間違ってこれらのライブラリが処理されないようにします。このようなメッセージも \fBerror\fR により完全に取り除かれます。
.RE

.sp
.ne 2
.mk
.na
\fB\fB無視\fR\fR
.ad
.sp .6
.RS 4n
\fBlint\fR からのエラーメッセージの中で、あまり大切でない診断メッセージを生成することがわかっている関数を示すメッセージは無視することができます。無視されたエラーメッセージはソースファイルには挿入されず、標準出力に書き込まれます。無視する関数名は、ユーザーのホームディレクトリにある \fB\&.errorrc\fR ファイル、または \fB-I\fR オプションで指定したファイルから取られます。このファイルが存在しない場合、エラーメッセージは無視されません。このファイルが存在するときは、無視する関数名はそのファイル内で 1 行に 1 つずつ記述されていなければなりません。
.RE

.sp
.ne 2
.mk
.na
\fBファイル固有でない\fB\fR\fB\fR\fB\fR\fR
.ad
.sp .6
.RS 4n
判別できないエラーメッセージは 1 つのグループにまとめられ、ファイルが処理される前に標準出力に書き込まれます。このようなエラーメッセージは、ソースファイルには挿入されません。
.RE

.sp
.ne 2
.mk
.na
\fBファイルに固有\fB\fR\fB\fR\fR
.ad
.sp .6
.RS 4n
特定のファイルは示されているが特定の行が示されていないエラーメッセージは、そのファイルが処理されるときに標準出力に書き込まれます。
.RE

.sp
.ne 2
.mk
.na
\fB本当のエラー\fB\fR\fB\fR\fR
.ad
.sp .6
.RS 4n
判別可能なエラーメッセージは、そのエラーメッセージが示すファイルに挿入される候補となります。
.RE

.sp
.LP
ソースファイルに挿入されるのは、本当のエラーメッセージだけです。他のエラーメッセージは、\fBerror\fR により完全に取り除かれるか、標準出力に書き込まれます。\fBerror\fR はソースファイル内で、エラーメッセージの行番号が示す行の前にエラーメッセージを挿入します。各エラーメッセージはその言語におけるコメントとなります。内部的には、エラーの先頭には文字列 \fB###\fR が付けられ、エラーの終わりには文字列 \fB%%%\fR が付けられます。これにより、エディタで作業するとき、エラーを簡単に検出し削除できます。さらに、各エラーメッセージには、そのエラーメッセージが示す行の行番号が入っています。記述規則に則っとったソースプログラムであれば、エラーメッセージを削除しなくてもそのまま再コンパイルでき、エラーメッセージ自体が新たなエラーを引き起こすこともありません。C や Pascal のように記述規則を持たない言語で書かれた、記述の整っていないソースプログラムでは、コメントを別のコメント内に挿入することは可能ですが、新たにコンパイルするときに問題が発生する原因となります。これを回避するには、コメントの終わりと同じ行に言語文がないように、ソースプログラムの記述方法を変更します。
.SH ファイル
.sp
.ne 2
.mk
.na
\fB\fB~/.errorrc\fR\fR
.ad
.RS 14n
.rt  
\fBlint\fR のエラーメッセージで無視する関数名
.RE

.sp
.ne 2
.mk
.na
\fB\fB/dev/tty\fR\fR
.ad
.RS 14n
.rt  
ユーザーの端末
.RE

.SH 属性
.sp
.LP
属性についての詳細は、\fBattributes\fR(5) を参照してください。
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
属性タイプ属性値
_
使用条件developer/base-developer-utilities
.TE

.SH 関連項目
.sp
.LP
\fBas\fR(1), \fBcpp\fR(1), \fBcsh\fR(1), \fBed\fR(1), \fBex\fR(1), \fBmake\fR(1S), \fBld\fR(1), \fBvi\fR(1), \fBattributes\fR(5)
.SH 使用上の留意点
.sp
.LP
tty デバイスは、ユーザー入力用に直接開いてください。
.sp
.LP
リンク付きのソースファイルは、リンクを 1 つだけ持つファイルのコピーを新たに作成します。
.sp
.LP
言語プロセッサのエラーメッセージの形式を変更すると、\fBerror\fR がエラーメッセージを判別できなくなります。
.sp
.LP
\fBerror\fR は純粋に機械的な処理を行うため、構文として重要でない 1 つのエラーによって発生した大量のエラーをフィルタすることはできません。このようなエラーは手動で破棄してください。
.sp
.LP
Pascal のエラーメッセージは実際にエラーが発生した行の後に置かれますが、error はメッセージを前に置きます。 '\fB|\fR' マークによるエラー箇所の指定も \fBerror\fR のメッセージではずれてしまいます。
.sp
.LP
\fBerror\fR は、ある程度高速な \fBCRT\fR で動作するように設計されています。低速の端末では使いづらく、ハードコピー端末で使用するようには設計されていません。
