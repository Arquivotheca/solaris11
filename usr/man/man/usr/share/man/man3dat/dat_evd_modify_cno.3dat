'\" te
.\" This manual page is derived from the DAT/uDAPL 1.2 specification.
.\" Portions Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.TH dat_evd_modify_cno 3DAT "16 Jul 2004" "SunOS 5.11" "Direct Access Transport Library Functions"
.SH NAME
dat_evd_modify_cno \- change the associated CNO for the Event Dispatcher
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-ldat\fR [ \fIlibrary\fR\&.\|.\|. ] 
#include <\fBdat/udat.h\fR>

DAT_RETURN
    dat_evd_modify_cno (
    IN    DAT_EVD_HANDLE    \fIevd_handle\fR,
    IN    DAT_CNO_HANDLE    \fIcno_handle\fR
    )
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
\fB\fIevd_handle\fR\fR
.ad
.RS 14n
.rt  
Handle for an instance of the Event Dispatcher.
.RE

.sp
.ne 2
.mk
.na
\fB\fIcno_handle\fR\fR
.ad
.RS 14n
.rt  
Handle for a CNO. The value of \fBDAT_NULL_HANDLE\fR specifies no CNO.
.RE

.SH DESCRIPTION
.sp
.LP
The \fBdat_evd_modify_cno()\fR function changes the associated CNO for the Event Dispatcher.
.sp
.LP
A Consumer can specify the value of \fBDAT_HANDLE_NULL\fR for \fIcno_handle\fR to associate not CNO with the Event Dispatcher instance.
.sp
.LP
Upon completion of the \fBdat_evd_modify_cno()\fR operation, the passed IN new CNO is used for notification. During the operation, an event arrival can be delivered to the old or new CNO. If Notification is generated by EVD, it is delivered to the new or old CNO.
.sp
.LP
If the EVD is enabled at the time \fBdat_evd_modify_cno()\fR is called, the Consumer must be prepared to collect a notification event on the EVD's old CNO as well as the new one. Checking immediately prior to calling \fBdat_evd_modify_cno()\fR is not adequate. A notification could have been generated after the prior check and before the completion of the change.
.sp
.LP
The Consumer can avoid the risk of missed notifications either by temporarily disabling the EVD, or by checking the prior CNO after invoking this operation. The Consumer can disable EVD before a \fBdat_evd_modify_cno()\fR call and enable it afterwards. This ensures that any notifications from the EVD are delivered to the new CNO only.
.sp
.LP
If this function is used to disassociate a CNO from the EVD, events arriving on this EVD might cause waiters on that CNO to awaken after returning from this routine because of unblocking a CNO waiter already "in progress" at the time this routine is called. If this is the case, the events causing that unblocking are present on the EVD upon return from the \fBdat_evd_modify_cno()\fR call and can be dequeued at that time
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
\fB\fBDAT_SUCCESS\fR\fR
.ad
.RS 22n
.rt  
The operation was successful.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDAT_INVALID_HANDLE\fR\fR
.ad
.RS 22n
.rt  
Invalid DAT handle.
.RE

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelUnsafe
_
StandarduDAPL, 1.1, 1.2
.TE

.SH SEE ALSO
.sp
.LP
\fBlibdat\fR(3LIB), \fBattributes\fR(5)
