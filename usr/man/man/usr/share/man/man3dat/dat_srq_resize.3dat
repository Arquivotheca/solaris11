'\" te
.\" This manual page is derived from the DAT/uDAPL 1.2 specification.
.\" Portions Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.TH dat_srq_resize 3DAT "16 Jul 2004" "SunOS 5.11" "Direct Access Transport Library Functions"
.SH NAME
dat_srq_resize \- modify the size of the shared receive queue
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-ldat\fR [ \fIlibrary\fR\&.\|.\|. ] 
#include <\fBdat/udat.h\fR>

DAT_RETURN
    dat_srq_resize (
    IN      DAT_SRQ_HANDLE      srq_handle,
    IN      DAT_COUNT           srq_max_recv_dto
    )
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
\fB\fIsrq_handle\fR\fR
.ad
.RS 20n
.rt  
A handle for an instance of the SRQ.
.RE

.sp
.ne 2
.mk
.na
\fB\fIsrq_max_recv_dto\fR\fR
.ad
.RS 20n
.rt  
The new maximum number of Recv DTOs that Shared Receive Queue must hold.
.RE

.SH DESCRIPTION
.sp
.LP
The \fBdat_srq_resize()\fR function modifies the size of the queue of SRQ.
.sp
.LP
Resizing of Shared Receive Queue should not cause any incoming messages on any of the EPs that use the SRQ to be lost. If the number of outstanding Recv buffers on the SRQ is larger then the requested \fIsrq_max_recv_dto\fR, the operation returns \fBDAT_INVALID_STATE\fR and do not change SRQ. This includes not just the buffers on the SRQ but all outstanding Receive buffers that had been posted to the SRQ and whose completions have not reaped yet. Thus, the outstanding buffers include the buffers on SRQ, the buffers posted to SRQ at are at SRQ associated EPs, and the buffers posted to SRQ for which completions have been generated but not yet reaped by Consumer from recv_evds of the EPs that use the SRQ.
.sp
.LP
If the requested \fIsrq_max_recv_dto\fR is below the SRQ low watermark, the operation returns \fBDAT_INVALID_STATE\fR and does not change SRQ.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
\fB\fBDAT_SUCCESS\fR\fR
.ad
.RS 30n
.rt  
The operation was successful.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDAT_INVALID_HANDLE\fR\fR
.ad
.RS 30n
.rt  
The \fIsrq_handle\fR argument is an invalid DAT handle.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDAT_INVALID_PARAMETER\fR\fR
.ad
.RS 30n
.rt  
The \fIsrq_max_recv_dto\fR argument is invalid.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDAT_INSUFFICIENT_RESOURCES\fR\fR
.ad
.RS 30n
.rt  
The operation failed due to resource limitations.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDAT_INVALID_STATE\fR\fR
.ad
.RS 30n
.rt  
Invalid state. Either the number of entries on the SRQ exceeds the requested SRQ queue length or the requested SRQ queue length is smaller than the SRQ low watermark.
.RE

.SH USAGE
.sp
.LP
The \fBdat_srq_resize()\fR function is required not to lose any buffers. Thus, it cannot shrink below the outstanding number of Recv buffers on SRQ. There is no requirement to shrink the SRQ to return \fBDAT_SUCCESS\fR.
.sp
.LP
The quality of the implementation determines how closely to the Consumer-requested value the Provider shrinks the SRQ. For example, the Provider can shrink the SRQ to the Consumer-requested value and if the requested value is smaller than the outstanding buffers on SRQ, return \fBDAT_INVALID_STATE\fR; or the Provider can shrink to some value larger than that requested by the Consumer but below current SRQ size; or the Provider does not change the SRQ size and still returns \fBDAT_SUCCESS\fR.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelUnsafe
_
StandarduDAPL, 1.2
.TE

.SH SEE ALSO
.sp
.LP
\fBdat_srq_create\fR(3DAT), \fBdat_srq_free\fR(3DAT), \fBdat_srq_post_recv\fR(3DAT), \fBdat_srq_query\fR(3DAT), \fBdat_srq_set_lw\fR(3DAT), \fBlibdat\fR(3LIB), \fBattributes\fR(5)
