'\" te
.\" Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
.TH audio_engine_open 9E "16 Apr 2010" "SunOS 5.11" "Driver Entry Points"
.SH NAME
audio_engine_open, audio_engine_close \- open or close an audio engine
.SH SYNOPSIS
.LP
.nf
#include <sys/audio/audio_driver.h>

int prefix_open(void *\fIstate\fR, int \fIflag\fR, unsigned *\fInframes\fR
     caddr_t *\fIbufp\fR);
.fi

.LP
.nf
void prefix_close(void *\fIstate\fR);
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
\fB\fIstate\fR\fR
.ad
.RS 11n
.rt  
pointer to driver supplied soft state
.RE

.sp
.ne 2
.mk
.na
\fB\fIflag\fR\fR
.ad
.RS 11n
.rt  
integer mask of flags indicating mode of the engine. \fBENGINE_INPUT\fR indicates the engine is opened for recording. \fBENGINE_OUTPUT\fR indicates the engine is opened for playback. All other possible bits are reserved and should be ignored by the driver.
.RE

.sp
.ne 2
.mk
.na
\fB\fInframes\fR\fR
.ad
.RS 11n
.rt  
pointer to an unsigned integer to receive the number of frames the associated buffer can hold
.RE

.sp
.ne 2
.mk
.na
\fB\fIbufp\fR\fR
.ad
.RS 11n
.rt  
pointer to receive the address of the buffer for the engine. The buffer is allocated by the engine, and is a circular FIFO big enough to hold all of the frames configured. The driver has the responsibility for managing any resources associated with the buffer. The driver should not make any assumptions about the type of accesses to the buffer made by the framework or application. Therefore, it should be configured with \fBDDI_NEVERSWAP_ACC\fR if the buffer is allocated using \fBddi_dma_mem_alloc\fR(9F).
.RE

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH DESCRIPTION
.sp
.LP
The \fBaudio_engine_open()\fR function opens and initializes the DMA engine and configures any associated hardware (such as sample rate or format conversion logic) for the device.
.sp
.LP
The \fBaudio_engine_open()\fR function also ensures that resources for the data buffer are properly allocated and that the circular buffer is primed and ready for use by the framework and audio clients.
.sp
.LP
The \fBaudio_engine_open()\fR function does not actually start any data transfer, but merely does much of the initialization work. It can perform expensive operations, including sleeping allocations or blocking on resources.
.sp
.LP
The \fBaudio_engine_close()\fR function undoes the effects of \fBaudio_engine_open()\fRand may deallocate resources that were allocated during \fBaudio_engine_open()\fR. The framework ensures that \fBaudio_engine_stop\fR(9E) is issued on any running engine before calling \fBaudio_engine_close()\fR.
.sp
.LP
Once \fBaudio_engine_close()\fR returns, the frame counter for the engine must be reset to 0.
.sp
.LP
The framework will not access the device buffer for an engine that is not open, so buffer resources may be released at this point.
.SH RETURN VALUES
.sp
.LP
The \fBaudio_engine_open()\fR function returns 0 on success or an error number on failure. See \fBopen\fR(2) for possible error numbers.
.SH CONTEXT
.sp
.LP
The \fBaudio_engine_open()\fR and \fBaudio_engine_close()\fR functions are called from user or kernel context only.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
\fBopen\fR(2), \fBattributes\fR(5), \fBaudio_engine_stop\fR(9E), \fBddi_dma_mem_alloc\fR(9F), \fBaudio_engine_ops\fR(9S)
