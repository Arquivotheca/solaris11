'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright 1989 AT&T
.TH aread 9E "28 Mar 1997" "SunOS 5.11" "Driver Entry Points"
.SH NAME
aread \- asynchronous read from a device
.SH SYNOPSIS
.LP
.nf
#include <sys/uio.h>
#include <sys/aio_req.h>
#include <sys/cred.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>
int\fIprefix\fR

\fB\fR\fBaread\fR(\fBdev_t\fR \fIdev\fR, \fBstruct aio_req *\fR\fIaio_reqp\fR, \fBcred_t *\fR\fIcred_p\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris \fBDDI \fRspecific (Solaris DDI). This entry point is \fIoptional\fR. Drivers that do not support an \fBaread()\fR entry point should use \fBnodev\fR(9F) 
.SH PARAMETERS
.sp
.ne 2
.mk
.na
\fB\fIdev\fR \fR
.ad
.RS 13n
.rt  
Device number.
.RE

.sp
.ne 2
.mk
.na
\fB\fIaio_reqp\fR \fR
.ad
.RS 13n
.rt  
Pointer to the \fBaio_req\fR(9S) structure that describes where the data is to be stored.
.RE

.sp
.ne 2
.mk
.na
\fB\fIcred_p\fR \fR
.ad
.RS 13n
.rt  
Pointer to the credential structure.
.RE

.SH DESCRIPTION
.sp
.LP
The driver's \fBaread()\fR routine is called to perform an asynchronous read. \fBgetminor\fR(9F) can be used to access the minor number component of the \fIdev\fR argument. \fBaread()\fR may use the credential structure pointed to by \fIcred_p\fR to check for superuser access by calling \fBdrv_priv\fR(9F). The \fBaread()\fR routine may also examine the \fBuio\fR(9S) structure through the \fBaio_req\fR structure pointer, \fIaio_reqp\fR. \fBaread()\fR must call \fBaphysio\fR(9F) with the \fBaio_req\fR pointer and a pointer to the driver's \fBstrategy\fR(9E) routine.
.sp
.LP
No fields of the \fBuio\fR(9S) structure pointed to by \fBaio_req\fR, other than \fBuio_offset\fR or \fBuio_loffset\fR, may be modified for non-seekable devices.
.SH RETURN VALUES
.sp
.LP
The \fBaread()\fR routine should return \fB0\fR for success, or the appropriate error number.
.SH CONTEXT
.sp
.LP
This function is called from user context only.
.SH EXAMPLES
.LP
\fBExample 1 \fRThe following is an example of an \fBaread()\fR routine:
.sp
.in +2
.nf
static int
xxaread(dev_t dev, struct aio_req *aio, cred_t *cred_p)
{
	int instance;
	struct xxstate *xsp;
	instance = getminor(dev);
	xsp = ddi_get_soft_state(statep, instance);
	/*Verify soft state structure has been allocated */
	if (xsp == NULL)
		return (ENXIO);
	return (aphysio(xxstrategy, anocancel, 
					dev, B_READ, xxminphys, aio));		
}
.fi
.in -2

.SH SEE ALSO
.sp
.LP
\fBread\fR(2), \fBaioread\fR(3C), \fBawrite\fR(9E), \fBread\fR(9E), \fBstrategy\fR(9E), \fBwrite\fR(9E), \fBanocancel\fR(9F), \fBaphysio\fR(9F), \fBddi_get_soft_state\fR(9F), \fBdrv_priv\fR(9F), \fBgetminor\fR(9F), \fBminphys\fR(9F), \fBnodev\fR(9F), \fBaio_req\fR(9S), \fBcb_ops\fR(9S), \fBuio\fR(9S) 
.sp
.LP
\fIWriting Device Drivers\fR 
.SH BUGS
.sp
.LP
There is no way other than calling \fBaphysio\fR(9F) to accomplish an asynchronous read.
