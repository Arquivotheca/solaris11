'\" te
.\"  Copyright (c) 2008, 2011, Oracle and/or its affiliates. All rights reserved.
.TH random 7D "5 Jul 2011" "SunOS 5.11" "Devices"
.SH NAME
random, urandom \- Strong random number generator device
.SH SYNOPSIS
.LP
.nf
/dev/random
.fi

.LP
.nf
/dev/urandom
.fi

.SH DESCRIPTION
.sp
.LP
The \fB/dev/random\fR and \fB/dev/urandom\fR files are special files that are a source for random bytes generated by the kernel random number generator device. The \fB/dev/random\fR and \fB/dev/urandom\fR files are suitable for applications requiring high quality random numbers for cryptographic purposes.
.sp
.LP
The generator device produces random numbers from data and devices available to the kernel and estimates the amount of randomness (or \fBentropy\fR) collected from these sources. The entropy level determines the amount of high quality random numbers that are produced at a given time.
.sp
.LP
Applications retrieve random bytes by reading \fB/dev/random\fR or \fB/dev/urandom\fR. The \fB/dev/random\fR interface returns random bytes only when sufficient amount of entropy has been collected. If there is no entropy to produce the requested number of bytes, \fB/dev/random\fR blocks until more entropy can be obtained. Non-blocking I/O mode can be used to disable the blocking behavior. The \fB/dev/random\fR interface also supports \fBpoll\fR(2). Note that using \fBpoll\fR(2) does not increase the speed at which random numbers can be read.
.sp
.LP
Bytes retrieved from \fB/dev/random\fR provide the highest quality random numbers produced by the generator, and can be used to generate long term keys and other high value keying material.
.sp
.LP
The \fB/dev/urandom\fR interface returns bytes regardless of the amount of entropy available. It does not block on a read request due to lack of entropy. While bytes produced by the \fB/dev/urandom\fR interface are of lower quality than bytes produced by \fB/dev/random\fR, they are nonetheless suitable for less demanding and shorter term cryptographic uses such as short term session keys, paddings, and challenge strings.
.sp
.LP
Data can be written to \fB/dev/random\fR and \fB/dev/urandom\fR. Data written to either special file is added to the generator's internal state. Data that is difficult to predict by other users may contribute randomness to the generator state and help improve the quality of future generated random numbers.
.sp
.LP
\fB/dev/random\fR collects entropy from providers that are registered with the kernel-level cryptographic framework and implement random number generation routines. The \fBcryptoadm\fR(1M) utility allows an administrator to configure which providers is used with \fB/dev/random\fR.
.sp
.LP
The limitation per read for \fB/dev/random\fR is 1040 bytes. The limit for \fB/dev/urandom\fR is \fB(128 * 1040)\fR.
.SH ERRORS
.sp
.ne 2
.mk
.na
\fB\fBEAGAIN\fR\fR
.ad
.RS 10n
.rt  
\fBO_NDELAY\fR or \fBO_NONBLOCK\fR was set and no random bytes are available for reading from \fB/dev/random\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEINTR\fR\fR
.ad
.RS 10n
.rt  
A signal was caught while reading and no data was transferred.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOXIO\fR\fR
.ad
.RS 10n
.rt  
\fBopen\fR(2) request failed on \fB/dev/random\fR because no entropy provider is available.
.RE

.SH FILES
.sp
.ne 2
.mk
.na
\fB\fB/dev/random\fR\fR
.ad
.RS 16n
.rt  
 
.RE

.sp
.ne 2
.mk
.na
\fB\fB/dev/urandom\fR\fR
.ad
.RS 16n
.rt  
 
.RE

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Availability SUNWcsr 
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
\fBcryptoadm\fR(1M), \fBopen\fR(2), \fBpoll\fR(2), \fBattributes\fR(5)
.SH NOTES
.sp
.LP
\fB/dev/random\fR can be configured to use only the hardware-based providers registered with the kernel-level cryptographic framework by disabling the software-based provider using \fBcryptoadm\fR(1M). You can also use \fBcryptoadm\fR(1M) to obtain the name of the software-based provider.
.sp
.LP
Because no entropy is available, disabling all randomness providers causes \fBread\fR(2) and \fBpoll\fR(2) on \fB/dev/random\fR to block indefinitely and results in a warning message being logged and displayed on the system console. However, \fBread\fR(2) and \fBpoll\fR(2) on \fB/dev/urandom\fR continue to work in this case.
.sp
.LP
An implementation of the \fB/dev/random\fR and \fB/dev/urandom\fR kernel-based random number generator first appeared in Linux 1.3.30.
.sp
.LP
A \fB/dev/random\fR interface for Solaris first appeared as part of the CryptoRand implementation.
