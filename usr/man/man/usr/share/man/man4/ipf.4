'\" te
.\" Copyright (c) 2008, 2011, Oracle and/or its affiliates. All rights reserved.
.TH ipf 4 "Jul 29 2011" "SunOS 5.11" "File Formats"
.SH NAME
ipf, ipf.conf \- IP packet filter rule syntax
.SH DESCRIPTION
.sp
.LP
The \fBipf\fR or \fBipf.conf\fR configuration files are associated with the Solaris IP Filter feature. See \fBipfilter\fR(5).
.sp
.LP
A rule file for \fBipf\fR(1M) can have any name or can be stdin. You can use \fBipfstat\fR(1M) output as input to \fBipf\fR(1M). \fBipfstat\fR outputs parseable rules, suitable for input to \fBipf\fR, when displaying the internal kernel filter lists. Thus, for example, to remove all filters on input packets, you can enter:
.sp
.in +2
.nf
# \fBipfstat -i | ipf -rf -\fR
.fi
.in -2
.sp

.SS "Grammar"
.sp
.LP
The IP filter feature uses the grammar shown below to construct filtering rules. The syntax is simplified for readability. Note that some combinations that match this grammar are disallowed by the software because they do not make sense (for example, \fBtcp\fR flags for non-TCP packets).
.sp
.in +2
.nf
filter-rule = [ insert ] action in-out [ options ] [ tos ] [ ttl ]
           [ proto ] ip [ group ].

insert    = "@" decnumber .
action    = block | "pass" | log | "count" | skip | auth .
in-out    = "in" | "out" .
options   = [ log ] [ tag ] [ "quick" ] [ "on" interface-name 
            [ dup ] [ froute ] [ replyto ] 
tos  = "tos" decnumber | "tos" hexnumber .
ttl  = "ttl" decnumber .
proto     = "proto" protocol .
ip   = srcdst [ flags ] [ icmp ] [ with withopt ] [ keep ] .
group     = [ "head" decnumber ] [ "group" decnumber ] .

block     = "block" [ return-icmp[return-code] | "return-rst" ] .
auth    = "auth"
log  = "log" [ "body" ] [ "first" ] [ "or-block" ] [ "level" loglevel ] .
tag  = "set-tag" tagid
skip = "skip" decnumber .
dup  = "dup-to" interface-name[":"ipaddr] .
froute    = "fastroute" | "to" interface-name [ ":" ipaddr ].
replyto  = "reply-to" interface-name [ ":" ipaddr ].
protocol = "tcp/udp" | "udp" | "tcp" | "icmp" | decnumber .
srcdst    = "all" | fromto .
fromto    = "from" [ "!" ] object "to" [ "!" ] object .

return-icmp = "return-icmp" | "return-icmp-as-dest" .
object    = addr [ port-comp | port-range ] .
addr = "any" | nummask | host-name [ "mask" ipaddr | "mask" hexnumber ] .
addr = "any" | "<thishost>" | nummask | 
        host-name [ "mask" ipaddr | "mask" hexnumber ] .
port-comp = "port" compare port-num .
port-range = "port" port-num range port-num .
flags     = "flags" flag { flag } [ "/" flag { flag } ] .
with = "with" | "and" .
icmp = "icmp-type" icmp-type [ "code" decnumber ] .
return-code = "("icmp-code")" .
keep = "keep" "state" | "keep" "frags" | "keep" "state" 
       "keep" "frags" |"keep" "frags" | "keep" "state".
loglevel = facility"."priority | priority .
nummask   = host-name [ "/" decnumber ] .
host-name = ipaddr | hostname | "any" .
ipaddr    = host-num "." host-num "." host-num "." host-num | ipv6addr .
host-num = digit [ digit [ digit ] ] .
port-num = service-name | decnumber .

withopt = [ "not" | "no" ] opttype [ withopt ] v6hdrs [ ipv6hdr ] .
opttype = "ipopts" | "short" | "frag" | "frag-body" | "frags" | 
     "opt" optname | "nat" | "multicast" |
     "bcast" | "mbcast" | "state" | "bad-nat" | "bad" | "oow" |
     "lowttl" | "bad-src" optname .
optname   = ipopts [ "," optname ] .
ipopts  = optlist | "sec-class" [ secname ] .
ipv6hdr = "ah" | "esp" | "dstopts" | "hopopts" | "ipv6" | "none" | 
       "routing" | "frag"
secname   = seclvl [ "," secname ] .
seclvl  = "unclass" | "confid" | "reserv-1" | "reserv-2" | "reserv-3" |
       "reserv-4" | "secret" | "topsecret" .
icmp-type = "unreach" | "echo" | "echorep" | "squench" | "redir" |
       "timex" | "paramprob" | "timest" | "timestrep" | "inforeq" |
       "inforep" | "maskreq" | "maskrep"  | decnumber .
icmp-code = decumber | "net-unr" | "host-unr" | "proto-unr" | "port-unr" |
       "needfrag" | "srcfail" | "net-unk" | "host-unk" | "isolate" |
       "net-prohib" | "host-prohib" | "net-tos" | "host-tos" |
       "filter-prohib" | "host-preced" | "cutoff-preced" .
optlist   = "nop" | "rr" | "zsu" | "mtup" | "mtur" | "encode" | "ts" |
       "tr" | "sec" | "lsrr" | "e-sec" | "cipso" | "satid" | "ssrr" |
       "addext" | "visa" | "imitd" | "eip" | "finn" .
facility = "kern" | "user" | "mail" | "daemon" | "auth" | "syslog" |
       "lpr" | "news" | "uucp" | "cron" | "ftp" | "authpriv" |
       "audit" | "logalert" | "local0" | "local1" | "local2" |
       "local3" | "local4" | "local5" | "local6" | "local7" .
priority = "emerg" | "alert" | "crit" | "err" | "warn" | "notice" |
       "info" | "debug" .

hexnumber = "0" "x" hexstring .
hexstring = hexdigit [ hexstring ] .
decnumber = digit [ decnumber ] .

compare = "=" | "!=" | "<" | ">" | "<=" | ">=" | "eq" | "ne" | "lt" |
       "gt" | "le" | "ge" .
range     = "<>" | "><" .
hexdigit = digit | "a" | "b" | "c" | "d" | "e" | "f" .
digit     = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" .
flag = "F" | "S" | "R" | "P" | "A" | "U" .
.fi
.in -2
.sp

.SS "Filter Rules"
.sp
.LP
Filter rules are checked in order, with the last matching rule determining the treatment of the packet. An exception to this is the quick option, which is discussed below.
.sp
.LP
By default, filters are installed at the end of the kernel's filter lists. Prepending a rule with \fB@\fR\fI<num>\fR causes it to be inserted as the \fI<num>\fRth entry in the current list. This is especially useful when modifying and testing active filter rule sets. See \fBipf\fR(1M) for more information.
.sp
.LP
The simplest valid rules are:
.sp
.in +2
.nf
block in all
pass in all
log out all
count in all
.fi
.in -2
.sp

.sp
.LP
These rules do not have an effect on filtering, but are listed here to illustrate the grammar.
.SS "Actions"
.sp
.LP
Each rule \fBmust\fR have an action. The action indicates what to do with the packet if it matches the filter rule. The IP filter feature recognizes the following actions:
.sp
.ne 2
.mk
.na
\fB\fBblock\fR\fR
.ad
.RS 14n
.rt  
Indicates that a packet should be flagged to be dropped. In response to blocking a packet, the filter can be instructed to send a reply packet, either an ICMP packet (\fBreturn-icmp\fR), an ICMP packet that fakes being from the original packet's destination (\fBreturn-icmp-as-dest\fR), or a TCP reset (\fBreturn-rst\fR). An ICMP packet can be generated in response to any IP packet and its type can optionally be specified, but a TCP reset can only be used with a rule that is being applied to TCP packets. When using \fBreturn-icmp\fR or \fBreturn-icmp-as-dest\fR, it is possible to specify the actual unreachable type. That is, whether it is a network unreachable, port unreachable, or even administratively prohibited. You do this by enclosing the ICMP code associated with the action in parentheses directly following \fBreturn-icmp\fR or \fBreturn-icmp-as-dest\fR. For example:
.sp
.in +2
.nf
block return-icmp(11) ...
.fi
.in -2
.sp

The preceding entry causes a return of a Type-Of-Service (TOS) ICMP unreachable error.
.RE

.sp
.ne 2
.mk
.na
\fB\fBpass\fR\fR
.ad
.RS 14n
.rt  
Flag the packet to be let through the filter without any action being taken.
.RE

.sp
.ne 2
.mk
.na
\fB\fBlog\fR\fR
.ad
.RS 14n
.rt  
Causes the packet to be logged (as described in the \fBLOGGING\fR section, below) and has no effect on whether the packet will be allowed through the filter.
.RE

.sp
.ne 2
.mk
.na
\fB\fBcount\fR\fR
.ad
.RS 14n
.rt  
Causes the packet to be included in the accounting statistics kept by the filter and has no effect on whether the packet will be allowed through the filter. These statistics are viewable with \fBipfstat\fR(1M).
.RE

.sp
.ne 2
.mk
.na
\fB\fBskip \fI<num>\fR\fR\fR
.ad
.RS 14n
.rt  
Causes the filter to skip over the next \fI<num>\fR filter rules. If a rule is inserted or deleted inside the region being skipped over, then the value of \fI<num>\fR is adjusted appropriately.
.RE

.sp
.ne 2
.mk
.na
\fB\fBauth\fR\fR
.ad
.RS 14n
.rt  
Allows authentication to be performed by a user-space program running and waiting for packet information to validate. The packet is held for a period of time in an internal buffer while it waits for the program to return to the kernel the "real" flags for whether it should be allowed through. Such a program might look at the source address and request some sort of authentication from the user (such as a password) before allowing the packet through or telling the kernel to drop it if the packet is from an unrecognized source.
.RE

.sp
.LP
The word following the action keyword must be either \fBin\fR or \fBout\fR. Each packet moving through the kernel is either inbound or outbound. "Inbound" means that a packet has just been received on an interface and is moving towards the kernel's protocol processing. "Outbound" means that a packet has been transmitted or forwarded by the stack and is on its way to an interface. There is a requirement that each filter rule explicitly state on which side of the I/O it is to be used.
.SH OPTIONS
.sp
.LP
The currently supported options are listed below. Where you use options, you must use them in the order shown here.
.sp
.ne 2
.mk
.na
\fB\fBlog\fR\fR
.ad
.RS 10n
.rt  
If this is the last matching rule, the packet header is written to the \fBipl\fR log, as described in the \fBLOGGING\fR section below.
.RE

.sp
.ne 2
.mk
.na
\fB\fBquick\fR\fR
.ad
.RS 10n
.rt  
Allows short-cut rules to speed up the filter or override later rules. If a packet matches a filter rule that is marked as quick, this rule will be the last rule checked, allowing a "short-circuit" path to avoid processing later rules for this packet. The current status of the packet (after any effects of the current rule) determine whether it is passed or blocked.
.sp
If the \fBquick\fR option is missing, the rule is taken to be a "fall-through" rule, meaning that the result of the match (block or pass) is saved and that processing will continue to see if there are any more matches.
.RE

.sp
.ne 2
.mk
.na
\fB\fBon\fR\fR
.ad
.RS 10n
.rt  
Allows an interface name to be incorporated into the matching procedure. Interface names are as displayed by \fBnetstat\fR \fBi\fR. If this option is used, the rule matches only if the packet is going through that interface in the specified direction (in or out). If this option is absent, the rule is applied to a packet regardless of the interface it is present on (that is, on all interfaces). Filter rule sets are common to all interfaces, rather than having a filter list for each interface.
.sp
This option is especially useful for simple IP-spoofing protection: packets should be allowed to pass inbound only on the interface from which the specified source address would be expected. Others can be logged, or logged and dropped.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdup-to\fR\fR
.ad
.RS 10n
.rt  
Causes the packet to be copied, with the duplicate packet sent outbound on a specified interface, optionally with the destination IP address changed to that specified. This is useful for off-host logging, using a network sniffer.
.RE

.sp
.ne 2
.mk
.na
\fB\fBto\fR\fR
.ad
.RS 10n
.rt  
Causes the packet to be moved to the outbound queue on the specified interface. This can be used to circumvent kernel routing decisions, and, if applied to an inbound rule, even to bypass the rest of the kernel processing of the packet. It is thus possible to construct a firewall that behaves transparently, like a filtering hub or switch, rather than a router. The \fBfastroute\fR keyword is a synonym for this option.
.RE

.SS "Matching Parameters"
.sp
.LP
The keywords described in this section are used to describe attributes of the packet to be used when determining whether rules do or do not match. The following general-purpose attributes are provided for matching and must be used in the order shown below.
.sp
.ne 2
.mk
.na
\fB\fBtos\fR\fR
.ad
.RS 9n
.rt  
Packets with different Type-Of-Service values can be filtered. Individual service levels or combinations can be filtered upon. The value for the TOS mask can be represented either as a hexadecimal or decimal integer.
.RE

.sp
.ne 2
.mk
.na
\fB\fBttl\fR\fR
.ad
.RS 9n
.rt  
Packets can also be selected by their Time-To-Live value. The value given in the filter rule must exactly match that in the packet for a match to occur. This value can be given only as a decimal integer.
.RE

.sp
.ne 2
.mk
.na
\fB\fBproto\fR\fR
.ad
.RS 9n
.rt  
Allows a specific protocol to be matched against. All protocol names found in \fB/etc/protocols\fR are recognized and can be used. However, the protocol can also be given as a decimal number, allowing for rules to match your own protocols and for new protocols.
.sp
The special protocol keyword \fBtcp/udp\fR can be used to match either a TCP or a UDP packet and has been added as a convenience to save duplication of otherwise-identical rules.
.RE

.sp
.LP
IP addresses can be specified in one of two ways: as a numerical address/mask, or as a hostname mask/netmask. The hostname can be either of the dotted numeric form or a valid hostname, from the \fBhosts\fR file or DNS (depending on your configuration and library). There is no special designation for networks, but network names are recognized. Note that having your filter rules depend on DNS results can introduce an avenue of attack and is discouraged.
.sp
.LP
There is a special case for the hostname \fBany\fR, which is taken to be \fB0.0.0.0/0\fR (mask syntax is discussed below) and matches all IP addresses. Only the presence of \fBany\fR has an implied mask. In all other situations, a hostname \fBmust\fR be accompanied by a mask. It is possible to give \fBany\fR a hostmask, but in the context of this language, it would accomplish nothing.
.sp
.LP
The numerical format \fIx/y\fR indicates that a mask of \fIy\fR consecutive 1 bits set is generated, starting with the MSB, so that a \fIy\fR value of 16 would result in \fB0xffff0000\fR. The symbolic \fIx\fR \fBmask\fR \fIy\fR indicates that the mask \fIy\fR is in dotted IP notation or a hexadecimal number of the form \fB0x12345678\fR. Note that all the bits of the IP address indicated by the bitmask must match the address on the packet exactly; there is currently not a way to invert the sense of the match or to match ranges of IP addresses that do not express themselves easily as bitmasks.
.sp
.LP
If a port match is included, for either or both of source and destination, then it is only applied to TCP and UDP packets. This is equivalent to \fBproto tcp/udp\fR. When composing port comparisons, either the service name or an integer port number can be used. Port comparisons can be done in a number of forms, with a number of comparison operators, or you can specify port ranges. When the port appears as part of the \fBfrom\fR object, it matches the source port number. When it appears as part of the \fBto\fR object, it matches the destination port number. See EXAMPLES.
.sp
.LP
The \fBall\fR keyword is essentially a synonym for "from any to any" with no other match parameters.
.sp
.LP
Following the source and destination matching parameters, you can use the following additional parameters:
.sp
.ne 2
.mk
.na
\fB\fBwith\fR\fR
.ad
.RS 13n
.rt  
Used to match irregular attributes that some packets might have associated with them. To match the presence of IP options in general, use with \fBipopts\fR. To match packets that are too short to contain a complete header, use with \fBshort\fR. To match fragmented packets, use with \fBfrag\fR. For more specific filtering on IP options, you can list individual options.
.sp
Before any parameter used after the \fBwith\fR keyword, you can insert the word \fBnot\fR or \fBno\fR to cause the filter rule to match only if the option(s) is not present.
.sp
Multiple consecutive \fBwith\fR clauses are allowed. Alternatively, you can use the keyword \fBand\fR in place of \fBwith\fR. This alternative is provided to make the rules more readable ("\fBwith\fR ... \fBand\fR ..."). When multiple clauses are listed, all clauses must match to cause a match of the rule.
.RE

.sp
.ne 2
.mk
.na
\fB\fBflags\fR\fR
.ad
.RS 13n
.rt  
Effective only for TCP filtering. Each of the letters possible represents one of the possible flags that can be set in the TCP header. The association is as follows:
.br
.in +2
F - FIN
.in -2
.br
.in +2
S - SYN
.in -2
.br
.in +2
R - RST
.in -2
.br
.in +2
P - PUSH
.in -2
.br
.in +2
A - ACK
.in -2
.br
.in +2
U - URG
.in -2
The various flag symbols can be used in combination, so that \fBSA\fR matches a SYN-ACK combination in a packet. There is nothing preventing the specification of combinations, such as \fBSFR\fR, that would not normally be generated by fully conformant TCP implementations. However, to guard against unpredictable behavior, it is necessary to state which flags you are filtering against. To allow this, it is possible to set a mask indicating against which TCP flags you wish to compare (that is, those you deem significant). This is done by appending \fB/\fI<flags>\fR\fR to the set of TCP flags you wish to match against, for example:
.sp
.ne 2
.mk
.na
\fB\fB\&... flags S\fR\fR
.ad
.RS 20n
.rt  
Becomes flags \fBS/AUPRFS\fR and matches packets with \fBonly\fR the SYN flag set.
.RE

.sp
.ne 2
.mk
.na
\fB\fB\&... flags SA\fR\fR
.ad
.RS 20n
.rt  
Becomes flags \fBSA/AUPRFSC\fR and matches any packet with only the SYN and ACK flags set.
.RE

.sp
.ne 2
.mk
.na
\fB\fB\&... flags S/SA\fR\fR
.ad
.RS 20n
.rt  
Matches any packet with just the SYN flag set out of the SYN-ACK pair, which is the common \fBestablish\fR keyword action. \fBS/SA\fR will \fBnot\fR match a packet with \fBboth\fR SYN and ACK set, but will match \fBSFP\fR.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBicmp-type\fR\fR
.ad
.RS 13n
.rt  
Effective only when used with \fBproto icmp\fR and must \fBnot\fR be used in conjunction with \fBflags\fR. There are a number of types, which can be referred to by an abbreviation recognized by this language or by the numbers with which they are associated. The most important type from a security point of view is the ICMP redirect.
.RE

.SS "Keep History"
.sp
.LP
The penultimate parameter that can be set for a filter rule is whether or not to record historical information for a packet, and what sort to keep. The following information can be kept:
.sp
.ne 2
.mk
.na
\fB\fBstate\fR\fR
.ad
.RS 9n
.rt  
Keeps information about the flow of a communication session. State can be kept for TCP, UDP, and ICMP packets.
.RE

.sp
.ne 2
.mk
.na
\fB\fBfrags\fR\fR
.ad
.RS 9n
.rt  
Keeps information on fragmented packets, to be applied to later fragments.
.RE

.sp
.LP
Presence of these parameters allows matching packets to flow straight through, rather than going through the access control list.
.SS "Groups"
.sp
.LP
The last pair of parameters control filter rule grouping. By default, all filter rules are placed in group 0 if no other group is specified. To add a rule to a non-default group, the group must first be started by creating a group \fBhead\fR. If a packet matches a rule which is the head of a group, the filter processing then switches to the group, using that rule as the default for the group. If \fBquick\fR is used with a \fBhead\fR rule, rule processing is not stopped until it has returned from processing the group.
.sp
.LP
A rule can be both the head for a new group and a member of a non-default group (\fBhead\fR and \fBgroup\fR can be used together in a rule).
.sp
.ne 2
.mk
.na
\fB\fBhead \fI<n>\fR\fR\fR
.ad
.RS 13n
.rt  
Indicates that a new group (number \fI<n>\fR) should be created.
.RE

.sp
.ne 2
.mk
.na
\fB\fBgroup \fI<n>\fR\fR\fR
.ad
.RS 13n
.rt  
Indicates that the rule should be put in group (number \fI<n>\fR) rather than group 0.
.RE

.SS "Logging"
.sp
.LP
When a packet is logged, by means of either the \fBlog\fR action or \fBlog\fR option, the headers of the packet are written to the \fBipl\fR packet logging pseudo-device. Immediately following the \fBlog\fR keyword, you can use the following qualifiers in the order listed below:
.sp
.ne 2
.mk
.na
\fB\fBbody\fR\fR
.ad
.RS 18n
.rt  
Indicates that the first 128 bytes of the packet contents will be logged after the headers.
.RE

.sp
.ne 2
.mk
.na
\fB\fBfirst\fR\fR
.ad
.RS 18n
.rt  
If log is being used in conjunction with a \fBkeep\fR option, it is recommended that you also apply this option so that only the triggering packet is logged and not every packet which thereafter matches state information.
.RE

.sp
.ne 2
.mk
.na
\fB\fBor-block\fR\fR
.ad
.RS 18n
.rt  
Indicates that, if for some reason, the filter is unable to log the packet (such as the log reader being too slow), then the rule should be interpreted as if the action was \fBblock\fR for this packet.
.RE

.sp
.ne 2
.mk
.na
\fB\fBlevel\fR \fIloglevel\fR\fR
.ad
.RS 18n
.rt  
Indicates what logging facility and priority (or, if the default facility is used, priority only) will be used to log information about this packet using \fBipmon\fR's \fB-s\fR option.
.RE

.sp
.LP
You can use \fBipmon\fR(1M) to read and format the log.
.SS "Loopback Filtering (Inter-Zone)"
.sp
.LP
By default, the IP Filter feature will \fBnot\fR filter or intercept any packets that are local to the machine. This includes traffic to or from the loopback addresses (127.0.0.1, and so forth), traffic between sockets that are on the same host (for example, from \fBeri0\fR to \fBeri1\fR), and traffic between zones.
.sp
.LP
To enable loopback or zone filtering, you must add the following line to \fBipf.conf\fR file:
.sp
.in +2
.nf
set intercept_loopback true;
.fi
.in -2
.sp

.sp
.LP
This line must be placed before any block or pass rules in this file or, put another way, it must be the first non-comment line in \fBipf.conf\fR.
.sp
.LP
When you enable filtering of packets in any one of the scenarios described above, you enabling filtering for all them. That is, when you enable the IP Filter feature to intercept packets between zones, you also cause it to receive packets that are involved in loopback traffic.
.SH EXAMPLES
.LP
\fBExample 1 \fRUsing the \fBquick\fR Option
.sp
.LP
The quick option works well for rules such as:

.sp
.in +2
.nf
block in quick from any to any with ipopts
.fi
.in -2
.sp

.sp
.LP
This rule matches any packet with a non-standard header length (IP options present) and aborts further processing of later rules, recording a match and also indicating that the packet should be blocked.

.LP
\fBExample 2 \fRUsing the Fall-through Nature of Rule Parsing
.sp
.LP
The "fall-through" rule parsing allows for effects such as the following:

.sp
.in +2
.nf
block in from any to any port < 6000
pass in from any to any port >= 6000
block in from any to any port > 6003
.fi
.in -2
.sp

.sp
.LP
These rules set up the range 6000-6003 as being permitted and all others being denied. Note that the effect of the first rule is overridden by subsequent rules. Another (easier) way to do the same is:

.sp
.in +2
.nf
block in from any to any port 6000 <> 6003
pass in from any to any port 5999 >< 6004
.fi
.in -2
.sp

.sp
.LP
Note that both the \fBblock\fR and \fBpass\fR are needed here to effect a result, because a failed match on the \fBblock\fR action does not imply a pass. It implies only that the rule has not taken effect. To then allow ports lower than 1024, a rule such as:

.sp
.in +2
.nf
pass in quick from any to any port < 1024
.fi
.in -2
.sp

.sp
.LP
\&...would be needed before the first block. To create a new group for processing all inbound packets on \fBle0\fR/\fBle1\fR/\fBlo0\fR, with the default being to block all inbound packets, you would use a rule such as:

.sp
.in +2
.nf
block in all
block in quick on le0 all head 100
block in quick on le1 all head 200
block in quick on lo0 all head 300
.fi
.in -2
.sp

.sp
.LP
and to then allow ICMP packets in on \fBle0\fR only, you would use:

.sp
.in +2
.nf
pass in proto icmp all group 100
.fi
.in -2
.sp

.sp
.LP
Note that because only inbound packets on \fBle0\fR are processed by group 100, there is no need to respecify the interface name. Likewise, you could further breakup processing of TCP as follows:

.sp
.in +2
.nf
block in proto tcp all head 110 group 100
pass in from any to any port = 23 group 110
.fi
.in -2
.sp

.sp
.LP
\&...and so on. The last line, if written without the groups, would be:

.sp
.in +2
.nf
pass in on le0 proto tcp from any to any port = telnet
.fi
.in -2
.sp

.sp
.LP
Note, that if you wanted to specify \fBport = telnet\fR, you would need to specify \fBproto tcp\fR, because the parser interprets each rule on its own and qualifies all service and port names with the protocol specified.

.SH FILES
.sp
.ne 2
.mk
.na
\fB\fB/etc/ipf/ipf.conf\fR\fR
.ad
.RS 21n
.rt  
Location of rules file that is read upon startup of IP Filter feature.
.RE

.RS +4
.TP
.ie t \(bu
.el o
\fB/dev/ipauth\fR
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fB/dev/ipl\fR
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fB/dev/ipstate\fR
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fB/etc/hosts\fR
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fB/etc/services\fR
.RE
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
\fBipf\fR(1M), \fBipfstat\fR(1M), \fBipmon\fR(1M), \fBsvc.ipfd\fR(1M), \fBattributes\fR(5), \fBipfilter\fR(5)
.sp
.LP
\fIOracle Solaris Administration: IP Services\fR
.SH NOTES
.sp
.LP
See \fBsvc.ipfd\fR(1M) for information regarding custom policies.
