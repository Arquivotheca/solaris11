'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved.
.TH ipnat 4 "22 May 2008" "SunOS 5.11" "File Formats"
.SH NAME
ipnat, ipnat.conf \- IP NAT file format
.SH SYNOPSIS
.LP
.nf
\fBipnat.conf\fR
.fi

.SH DESCRIPTION
.sp
.LP
The \fBipnat\fR or \fBipnat.conf\fR configuration files are associated with the Solaris IP Filter feature. See \fBipfilter\fR(5).
.sp
.LP
The format for files accepted by \fBipnat\fR is described by the following grammar:
.sp
.in +2
.nf
ipmap :: = mapblock | redir | map .

map ::= mapit ifname ipmask "->" dstipmask [ mapport | mapproxy ] \e
        mapoptions.
map ::= mapit ifname fromto "->" dstipmask [ mapport ] mapoptions.
mapblock ::= "map-block" ifname ipmask "->" ipmask [ ports ] \e
              mapoptions.
redir ::= "rdr" ifname ipmask dport "->" ip [ "," ip ] rdrport \e
           rdroptions .

dport ::= "port" port-number [ "-" port-number ] .
ports ::= "ports" numports | "auto" .
rdrport ::= "port" port-number .
mapit ::= "map" | "bimap" .
fromto ::= "from" object "to" object .
ipmask ::= ip "/" bits | ip "/" mask | ip "netmask" mask .
dstipmask ::= ipmask | "range" ip "-" ip .
mapport ::= "portmap" tcpudp portspec .
mapoptions ::= [ tcpudp ] [ "frag" ] [ age ] [ clamp ] [ mapproxy ] .
rdroptions ::= rdrproto [ rr ] [ "frag" ] [ age ] [ clamp ] \e
               [ rdrproxy ] .

object :: = addr [ port-comp | port-range ] .
addr :: = "any" | nummask | host-name [ "mask" ipaddr | "mask" \e
           hexnumber ] .
port-comp :: = "port" compare port-number .
port-range :: = "port" port-number range port-number .
rdrproto ::= tcpudp | protocol .

rr ::= "round-robin" .
age ::= "age" decnumber [ "/" decnumber ] .
clamp ::= "mssclamp" decnumber .
tcpudp ::= "tcp/udp" | protocol .
mapproxy ::= "proxy" "port" port proxy-name '/' protocol
rdrproxy ::= "proxy" proxy-name .

protocol ::= protocol-name | decnumber .
nummask ::= host-name [ "/" decnumber ] .
portspec ::= "auto" | port-number ":" port-number .
port ::= port-number | port-name .
port-number ::= number { numbers } .
ifname ::= 'A' - 'Z' { 'A' - 'Z' } numbers .

numbers ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' .
.fi
.in -2

.sp
.LP
For standard NAT functionality, a rule should start with \fBmap\fR and then proceed to specify the interface for which outgoing packets will have their source address rewritten.
.sp
.LP
Packets that will be rewritten can only be selected by matching the original source address. When specifying an address for matching, a netmask must be specified with the IP address.
.sp
.LP
The address selected for replacing the original is chosen from an IP address/netmask pair. A netmask of all 1's, indicating a hostname, is valid. A netmask of thirty-one 1's (255.255.255.254) is considered invalid, because there is no space for allocating host IP addresses after consideration for broadcast and network addresses.
.sp
.LP
When remapping TCP and UDP packets, it is also possible to change the source port number. Either TCP or UDP or both can be selected by each rule, with a range of port numbers to remap into given as \fIport-number\fR:\fIport-number\fR.
.SS "Commands"
.sp
.LP
The following commands are recognized by IP Filter's NAT code:
.sp
.ne 2
.mk
.na
\fB\fBmap\fR\fR
.ad
.RS 13n
.rt  
Used for mapping one address or network to another in an unregulated round-robin fashion.
.RE

.sp
.ne 2
.mk
.na
\fB\fBrdr\fR\fR
.ad
.RS 13n
.rt  
Used for redirecting packets to one IP address and port pair to another.
.RE

.sp
.ne 2
.mk
.na
\fB\fBbimap\fR\fR
.ad
.RS 13n
.rt  
Used for setting up bidirectional NAT between an external IP address and an internal IP address.
.RE

.sp
.ne 2
.mk
.na
\fB\fBmap-block\fR\fR
.ad
.RS 13n
.rt  
Sets up static IP-address-based translation, based on an algorithm to squeeze the addresses to be translated into the destination range.
.RE

.SS "Matching"
.sp
.LP
For basic NAT and redirection of packets, the address subject to change is used along with its protocol to check if a packet should be altered. The packet \fBmatching\fR part of the rule is to the left of the symbol \fB\(->\fR in each rule.
.sp
.LP
The IPFilter software allows for complex matching of packets. In place of the address which is to be translated, an IP address and port number comparison can be made using the same expressions available with \fBipf\fR. A simple NAT rule could be written as:
.sp
.in +2
.nf
map de0 10.1.0.0/16 -> 201.2.3.4/32
map de0 fec0:1::/64 -> fec0:2::2/128
.fi
.in -2
.sp

.sp
.LP
or as
.sp
.in +2
.nf
map de0 from 10.1.0.0/16 to any -> 201.2.3.4/32
map de0 from fec0:1::/64 to any -> fec0:2::2/128
.fi
.in -2
.sp

.sp
.LP
As is true of all NAT rules, you can compare against only IP address and port numbers. In addition, you cannot specify both IPv4 and IPv6 addresses in the same rule.
.SS "Translation"
.sp
.LP
To the right of the \fB\(->\fR is the address and port specification that will be written into the packet, provided it has already successfully matched the prior constraints. The case of redirections (\fBrdr\fR) is the simplest: the new destination address is that specified in the rule. For map rules, the destination address will be one for which the tuple combining the new source and destination is known to be unique.
.sp
.LP
If the packet is either a TCP or UDP packet, the destination and source ports enter into the comparison also. If the tuple already exists, the IP Filter software increments the port number first, within the available range specified by \fBportmap\fR, and, if there is no unique tuple, the source address is incremented within the specified netmask. If a unique tuple cannot be determined, then the packet will not be translated.
.sp
.LP
The map-block is more limited in how it searches for a new, free, and unique tuple, in that it will use an algorithm to determine what the new source address should be, staying within the range of available ports. The IP address is never changed, nor does the port number ever exceed its allotted range.
.SS "ICMPIDMAP Feature"
.sp
.LP
ICMP messages can be divided into two groups, errors and queries. ICMP errors are generated as a response to another IP packet. IP Filter will take care that ICMP errors that are the response of a NAT-ed IP packet are handled properly.
.sp
.LP
For four types of ICMP queries (echo request, timestamp request, information request and address mask request), IP Filter supports an additional mapping called "ICMP id mapping". These four types of ICMP queries use a unique identifier called the ICMP id. This id is set by the process sending the ICMP query and is usually equal to the process id. The receiver of the ICMP query will use the same id in its response, thus enabling the sender to recognize that the incoming ICMP reply is intended for him and is an answer to a query that he made. The ICMP id mapping feature modifies these ICMP ids in a way identical to the modification performed by \fBportmap\fR for TCP or UDP.
.sp
.LP
When using the ICMP id mapping feature, you do not need an IP address per host behind the NAT box that wants to perform ICMP queries. The two numbers that follow the \fBicmpidmap\fR keyword are the first and the last \fBicmp id\fR numbers that can be used. There is one important caveat: if you map to an IP address that belongs to the NAT box itself (notably if you have only a single public IP address), then you must ensure that the NAT box does not use the \fBicmpidmap\fR range that you specified in the map rule. Since the ICMP id is usually the process id, it is wise to restrict the largest permittable process id (PID) on your operating system to a value such as 63999 and use the range 64000:65535 for ICMP id mapping.
.SS "Kernel Proxies"
.sp
.LP
The IP Filter software comes with a few, simple, proxies built into the code that is loaded into the kernel to allow secondary channels to be opened without forcing the packets through a user program. Kernel proxies are not supported for IPv6 NAT-ing.
.SS "Transparent Proxies"
.sp
.LP
True transparent proxying should be performed using the redirect (\fBrdr\fR) rules directing ports to \fBlocalhost\fR (127.0.0.1), with the proxy program doing a lookup through \fB/dev/ipnat\fR to determine the real source and address of the connection.
.SS "Load Balancing"
.sp
.LP
Two options for use with \fBrdr\fR are available to support primitive, round-robin-based load balancing. The first option allows for a \fBrdr\fR to specify a second destination, as follows:
.sp
.in +2
.nf
rdr le0 203.1.2.3/32 port 80 -> 203.1.2.3,203.1.2.4 port 80 tcp
.fi
.in -2
.sp

.sp
.LP
The preceding would send alternate connections to either 203.1.2.3 or 203.1.2.4. In scenarios where the load is being spread among a larger set of servers, you can use:
.sp
.in +2
.nf
rdr le0 203.1.2.3/32 port 80 -> 203.1.2.3,203.1.2.4 port 80 tcp \e
round-robin

rdr le0 203.1.2.3/32 port 80 -> 203.1.2.5 port 80 tcp round-robin
.fi
.in -2
.sp

.sp
.LP
In this case, a connection will be redirected to 203.1.2.3, then 203.1.2.4, and then 203.1.2.5 before going back to 203.1.2.3. In accomplishing this, the rule is removed from the top of the list and added to the end, automatically, as required. This will not effect the display of rules using \fBipnat\fR \fB-l\fR, only the internal application order.
.SH EXAMPLES
.LP
\fBExample 1 \fRUsing the \fBmap\fR Command
.sp
.LP
The following are variations of the \fBmap\fR command.

.sp
.LP
To change IP addresses used internally from network 10 into an ISP-provided 8-bit subnet at 209.1.2.0 through the \fBppp0\fR interface, use the following:

.sp
.in +2
.nf
map ppp0 10.0.0.0/8 -> 209.1.2.0/24
.fi
.in -2
.sp

.sp
.LP
An obvious problem is that you are trying to squeeze over sixteen million IP addresses into a 254-address space. To increase the scope, remapping for TCP and/or UDP, port remapping can be used, as follows:

.sp
.in +2
.nf
map ppp0 10.0.0.0/8 -> 209.1.2.0/24 portmap tcp/udp 1025:65000
.fi
.in -2
.sp

.sp
.LP
The preceding falls only 527,566 addresses short of the space available in network 10. If we combine these rules, they would need to be specified as follows:

.sp
.in +2
.nf
map ppp0 10.0.0.0/8 -> 209.1.2.0/24 portmap tcp/udp 1025:65000
map ppp0 10.0.0.0/8 -> 209.1.2.0/24
.fi
.in -2
.sp

.sp
.LP
\&...so that all TCP/UDP packets were port mapped and only other protocols, such as ICMP, have their IP address changed. In some instaces, it is more appropriate to use the keyword \fBauto\fR in place of an actual range of port numbers if you want to guarantee simultaneous access to all within the given range. However, in the preceding case, it would default to one port per IP address, because you need to squeeze 24 bits of address space into eight bits. A good example of how \fBauto\fR is used is:

.sp
.in +2
.nf
map ppp0 172.192.0.0/16 -> 209.1.2.0/24 portmap tcp/udp auto
.fi
.in -2
.sp

.sp
.LP
This would result in each IP address being given a small range of ports to use (252). The problem here is that the map directive tells the NAT code to use the next address/port pair available for an outgoing connection, resulting in no easily discernible relation between external addresses/ports and internal ones. This is overcome by using map-block as follows:

.sp
.in +2
.nf
map-block ppp0 172.192.0.0/16 -> 209.1.2.0/24 ports auto
.fi
.in -2
.sp

.sp
.LP
For example, this would result in 172.192.0.0/24 being mapped to 209.1.2.0/32 with each address, from 172.192.0.0 to 172.192.0.255 having 252 ports of its own. As distinguished from the preceding use of \fBmap\fR, if, for some reason, the user of (say) 172.192.0.2 wanted 260 simultaneous connections going out, he would be limited to 252 with \fBmap-block\fR but would just move on to the next IP address with the \fBmap\fR command.

.LP
\fBExample 2 \fRMapping from Class B Network to Single Address
.sp
.LP
The following directive maps from a class B network to a single address.

.sp
.in +2
.nf
map de0 10.1.0.0/16 -> 201.2.3.4/32
.fi
.in -2
.sp

.sp
.LP
An equivalent directive is:

.sp
.in +2
.nf
map de0 from 10.1.0.0/16 to any -> 201.2.3.4/32
.fi
.in -2
.sp

.SH FILES
.sp
.ne 2
.mk
.na
\fB\fB/etc/ipf/ipnat.conf\fR\fR
.ad
.RS 23n
.rt  
Location of rules file that is read upon startup of IP Filter feature.
.RE

.RS +4
.TP
.ie t \(bu
.el o
\fB/dev/ipnat\fR
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fB/etc/services\fR
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fB/etc/hosts\fR
.RE
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
\fBATTRIBUTE TYPE\fR\fBATTRIBUTE VALUE\fR
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
\fBipf\fR(1M), \fBipnat\fR(1M), \fBipf\fR(4), \fBhosts\fR(4), \fBattributes\fR(5), \fBipfilter\fR(5)
.sp
.LP
\fIOracle Solaris Administration: IP Services\fR
