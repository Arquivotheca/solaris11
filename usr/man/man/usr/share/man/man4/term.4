'\" te
.\" Copyright 1989 AT&T  Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.TH term 4 "3 Jul 1996" "SunOS 5.11" "File Formats"
.SH NAME
term \- format of compiled term file
.SH SYNOPSIS
.LP
.nf
\fB/usr/share/lib/terminfo/?/*\fR
.fi

.SH DESCRIPTION
.sp
.LP
The \fBterm\fR file is compiled from \fBterminfo\fR(4) source files using \fBtic\fR(1M). Compiled files are organized in a directory hierarchy under the first letter of each terminal name. For example, the \fBvt100\fR file would have the pathname \fB/usr/lib/terminfo/v/vt100\fR. The default directory is \fB/usr/share/lib/terminfo\fR. Synonyms for the same terminal are implemented by multiple links to the same compiled file.
.sp
.LP
The format has been chosen so that it is the same on all hardware. An 8-bit byte is assumed, but no assumptions about byte ordering or sign extension are made. Thus, these binary \fBterminfo\fR files can be transported to other hardware with 8-bit bytes.
.sp
.LP
Short integers are stored in two 8-bit bytes. The first byte contains the least significant 8 bits of the value, and the second byte contains the most significant 8 bits. (Thus, the value represented is 256*\fIsecond\fR+\fIfirst\fR.) The value \fB\(mi1\fR is represented by \fB0377,0377\fR, and the value \fB\(mi2\fR is represented by \fB0376,0377\fR; other negative values are illegal. The \fB\(mi1\fR generally means that a capability is missing from this terminal. The \fB\(mi2\fR means that the capability has been cancelled in the \fBterminfo\fR source and also is to be considered missing.
.sp
.LP
The compiled file is created from the source file descriptions of the terminals (see the \fB-I\fR option of \fBinfocmp\fR) by using the \fBterminfo\fR compiler, \fBtic\fR, and read by the routine \fBsetupterm\fR (see \fBcurses\fR(3CURSES)). The file is divided into six parts in the following order: the header, terminal names, boolean flags, numbers, strings, and string table.
.sp
.LP
The header section begins the file six short integers in the format described below. These integers are: 
.RS +4
.TP
1.
the magic number (octal \fB0432\fR);
.RE
.RS +4
.TP
2.
the size, in bytes, of the names section;
.RE
.RS +4
.TP
3.
the number of bytes in the boolean section
.RE
.RS +4
.TP
4.
the number of short integers in the numbers section;
.RE
.RS +4
.TP
5.
the number of offsets (short integers) in the strings section;
.RE
.RS +4
.TP
6.
the size, in bytes, of the string table.
.RE
.sp
.LP
The terminal name section comes next. It contains the first line of the \fBterminfo\fR description, listing the various names for the terminal, separated by the bar ( | ) character (see \fBterm\fR(5)). The section is terminated with an \fBASCII NUL\fR character.
.sp
.LP
The terminal name section is followed by the Boolean section, number section, string section, and string table.
.sp
.LP
The boolean flags section consists of one byte for each flag. This byte is either \fB0\fR or \fB1\fR as the flag is present or absent. The value of \fB2\fR means that the flag has been cancelled. The capabilities are in the same order as the file <\fBterm.h\fR>.
.sp
.LP
Between the boolean flags section and the number section, a null byte is inserted, if necessary, to ensure that the number section begins on an even byte offset. All short integers are aligned on a short word boundary.
.sp
.LP
The numbers section is similar to the boolean flags section. Each capability takes up two bytes, and is stored as a short integer. If the value represented is \fB\(mi1\fR or \fB\(mi2\fR, the capability is taken to be missing.
.sp
.LP
The strings section is also similar. Each capability is stored as a short integer, in the format above. A value of \fB\(mi1\fR or \fB\(mi2\fR means the capability is missing. Otherwise, the value is taken as an offset from the beginning of the string table. Special characters in ^X or \ec notation are stored in their interpreted form, not the printing representation. Padding information ($<nn>) and parameter information (%x) are stored intact in uninterpreted form.
.sp
.LP
The final section is the string table. It contains all the values of string capabilities referenced in the string section. Each string is null terminated.
.sp
.LP
Note that it is possible for \fBsetupterm\fR to expect a different set of capabilities than are actually present in the file. Either the database may have been updated since \fBsetupterm\fR has been recompiled (resulting in extra unrecognized entries in the file) or the program may have been recompiled more recently than the database was updated (resulting in missing entries). The routine \fBsetupterm\fR must be prepared for both possibilities\(emthis is why the numbers and sizes are included. Also, new capabilities must always be added at the end of the lists of boolean, number, and string capabilities.
.sp
.LP
As an example, here is terminal information on the AT&T Model 37 KSR terminal as output by the \fBinfocmp \fR\fB-I\fR\fB tty37\fR command:
.sp
.in +2
.nf
37|tty37|AT&T model 37 teletype,
  hc, os, xon,
  bel=^G, cr=\er, cub1=\eb, cud1=\en, cuu1=\eE7, hd=\eE9,
  hu=\eE8, ind=\en,
.fi
.in -2
.sp

.sp
.LP
The following is an octal dump of the corresponding \fBterm\fR file, produced by the \fBod -c /usr/share/lib/terminfo/t/tty37\fR command:
.sp
.in +2
.nf
0000000   032 001      \e0 032  \e0 013  \e0 021 001   3  \e0   3   7   |   t
0000020     t   y   3   7   |   A   T   &   T       m   o   d   e   l
0000040     3   7       t   e   l   e   t   y   p   e  \e0  \e0  \e0  \e0  \e0
0000060    \e0  \e0  \e0 001  \e0  \e0  \e0  \e0  \e0  \e0  \e0 001  \e0  \e0  \e0  \e0
0000100   001  \e0  \e0  \e0  \e0  \e0 377 377 377 377 377 377 377 377 377 377
0000120   377 377 377 377 377 377 377 377 377 377 377 377 377 377   &  \e0
0000140        \e0 377 377 377 377 377 377 377 377 377 377 377 377 377 377
0000160   377 377   "  \e0 377 377 377 377   (  \e0 377 377 377 377 377 377
0000200   377 377   0  \e0 377 377 377 377 377 377 377 377   -  \e0 377 377
0000220   377 377 377 377 377 377 377 377 377 377 377 377 377 377 377 377
     *
0000520   377 377 377 377 377 377 377 377 377 377 377 377 377 377   $  \e0
0000540   377 377 377 377 377 377 377 377 377 377 377 377 377 377   *  \e0
0000560   377 377 377 377 377 377 377 377 377 377 377 377 377 377 377 377
     *
0001160   377 377 377 377 377 377 377 377 377 377 377 377 377 377   3   7
0001200     |   t   t   y   3   7   |   A   T   &   T       m   o   d   e
0001220     l       3   7       t   e   l   e   t   y   p   e  \e0  \er  \e0
0001240    \en  \e0  \en  \e0 007  \e0  \eb  \e0 033   8  \e0 033   9  \e0 033   7
0001260    \e0  \e0
0001261
.fi
.in -2
.sp

.sp
.LP
Some limitations: total compiled entries cannot exceed 4096 bytes; all entries in the name field cannot exceed 128 bytes.
.SH FILES
.sp
.ne 2
.mk
.na
\fB\fB/usr/share/lib/terminfo/?/*\fR\fR
.ad
.sp .6
.RS 4n
compiled terminal description database
.RE

.sp
.ne 2
.mk
.na
\fB\fB/usr/include/term.h\fR\fR
.ad
.sp .6
.RS 4n
\fBterminfo\fR header
.RE

.sp
.ne 2
.mk
.na
\fB\fB/usr/xpg4/include/term.h\fR\fR
.ad
.sp .6
.RS 4n
X/Open Curses \fBterminfo\fR header
.RE

.SH SEE ALSO
.sp
.LP
\fBinfocmp\fR(1M), \fBcurses\fR(3CURSES), \fBcurses\fR(3XCURSES), \fBterminfo\fR(4), \fBterm\fR(5)
