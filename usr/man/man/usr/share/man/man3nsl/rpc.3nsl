'\" te
.\" Copyright (c) 2000, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright 1989 AT&T
.TH rpc 3NSL "5 Jun 2001" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR ... ] \fIfile\fR ... \fB-lnsl\fR [ \fIlibrary\fR ... ]
#include <rpc/rpc.h>
#include <netconfig.h>
.fi

.SH DESCRIPTION
.sp
.LP
These routines allow C language programs to make procedure calls on other machines across a network. First, the client sends a request to the server. On receipt of the request, the server calls a dispatch routine to perform the requested service, and then sends back a reply.
.sp
.LP
All \fBRPC\fR routines require the header \fB<rpc/rpc.h>\fR\&. Routines that take a \fBnetconfig\fR structure also require that \fB<netconfig.h>\fR be included. Applications using  \fBRPC\fR and  \fBXDR\fR routines should be linked with the \fBlibnsl\fR library.
.SS "Multithread Considerations"
.sp
.LP
In the case of multithreaded applications, the \fB-mt\fR option must be specified on the command line at compilation time to enable a thread-specific version of \fBrpc_createerr()\fR. See \fBrpc_clnt_create\fR(3NSL) and \fBthreads\fR(5).
.sp
.LP
When used in multithreaded applications, client-side routines are MT-Safe. \fBCLIENT\fR handles can be shared between threads; however, in this implementation, requests by different threads are serialized (that is, the first request will receive its results before the second request is sent). See \fBrpc_clnt_create\fR(3NSL).
.sp
.LP
When used in multithreaded applications, server-side routines are usually Unsafe. In this implementation the service transport handle, \fBSVCXPRT\fR contains a single data area for decoding arguments and encoding results.  See \fBrpc_svc_create\fR(3NSL). Therefore, this structure cannot be freely shared between threads that call functions that do this.  Routines that are affected by this restriction are marked as unsafe for MT applications. See \fBrpc_svc_calls\fR(3NSL).
.SS "Nettyp"
.sp
.LP
Some of the high-level \fBRPC\fR interface routines take a \fInettype\fR string as one of the parameters (for example, \fBclnt_create()\fR, \fBsvc_create()\fR, \fBrpc_reg()\fR, \fBrpc_call()\fR). This string defines a class of transports which can be used for a particular application.
.sp
.LP
\fInettype\fR can be one of the following:
.sp
.ne 2
.mk
.na
\fB\fBnetpath\fR\fR
.ad
.RS 14n
.rt  
Choose from the transports which have been indicated by their token names in the \fBNETPATH\fR environment variable. If \fBNETPATH\fR is unset or \fINULL\fR, it defaults to \fBvisible\fR. \fBnetpath\fR is the default \fInettype\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBvisible\fR\fR
.ad
.RS 14n
.rt  
Choose the transports which have the visible flag (\fBv\fR) set in the \fB/etc/netconfig\fR file.
.RE

.sp
.ne 2
.mk
.na
\fB\fBcircuit_v\fR\fR
.ad
.RS 14n
.rt  
This is same as \fBvisible\fR except that it chooses only the connection oriented transports (semantics \fBtpi_cots\fR or \fBtpi_cots_ord\fR) from the entries in the \fB/etc/netconfig\fR file.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdatagram_v\fR\fR
.ad
.RS 14n
.rt  
This is same as \fBvisible\fR except that it chooses only the connectionless datagram transports (semantics \fBtpi_clts\fR) from the entries in the \fB/etc/netconfig\fR file.
.RE

.sp
.ne 2
.mk
.na
\fB\fBcircuit_n\fR\fR
.ad
.RS 14n
.rt  
This is same as \fBnetpath\fR except that it chooses only the connection oriented datagram transports (semantics \fBtpi_cots\fR or \fBtpi_cots_ord\fR).
.RE

.sp
.ne 2
.mk
.na
\fB\fBdatagram_n\fR\fR
.ad
.RS 14n
.rt  
This is same as \fBnetpath\fR except that it chooses only the connectionless datagram transports (semantics \fBtpi_clts\fR).
.RE

.sp
.ne 2
.mk
.na
\fB\fBudp\fR\fR
.ad
.RS 14n
.rt  
This refers to Internet \fBUDP.\fR
.RE

.sp
.ne 2
.mk
.na
\fB\fBtcp\fR\fR
.ad
.RS 14n
.rt  
This refers to Internet \fBTCP.\fR
.RE

.sp
.LP
If  \fInettype\fR is  \fINULL\fR, it defaults to \fBnetpath\fR. The transports are tried in left to right order in the \fBNETPATH\fR variable or in top to down order in the \fB/etc/netconfig\fR file.
.SS "Derived Types"
.sp
.LP
In a 64-bit environment, the derived types are defined as follows:
.sp

.sp
.TS
tab();
lw(1.83i) lw(1.83i) lw(1.83i) 
lw(1.83i) lw(1.83i) lw(1.83i) 
.
\fBtypedef\fR\fBuint32_t\fR\fBrpcprog_t;\fR
\fBtypedef\fR\fBuint32_t\fR\fBrpcvers_t;\fR
\fBtypedef\fR\fBuint32_t\fR\fBrpcproc_t;\fR
\fBtypedef\fR\fBuint32_t\fR\fBrpcprot_t;\fR
\fBtypedef\fR\fBuint32_t\fR\fBrpcport_t;\fR
\fBtypedef\fR\fBint32_t\fR\fBrpc_inline_t;\fR
.TE

.sp
.LP
In a 32-bit environment, the derived types are defined as follows:
.sp

.sp
.TS
tab();
lw(1.83i) lw(1.83i) lw(1.83i) 
lw(1.83i) lw(1.83i) lw(1.83i) 
.
\fBtypedef\fR\fBunsigned long\fR\fBrpcprog_t;\fR
\fBtypedef\fR\fBunsigned long\fR\fBrpcvers_t;\fR
\fBtypedef\fR\fBunsigned long\fR\fBrpcproc_t;\fR
\fBtypedef\fR\fBunsigned long\fR\fBrpcprot_t;\fR
\fBtypedef\fR\fBunsigned long\fR\fBrpcport_t;\fR
\fBtypedef\fR\fBlong\fR\fBrpc_inline_t;\fR
.TE

.SS "Data Structures"
.sp
.LP
Some of the data structures used by the \fBRPC\fR package are shown below.
.SS "The \fBAUTH\fR Structure"
.sp
.in +2
.nf
union  des_block  {
        struct  {
        u_int32  high;
        u_int32  low;
        }  key;
char  c[8];
};
typedef  union  des_block  des_block;
extern  bool_t  xdr_des_block(\|);
/*
 *  Authentication  info.  Opaque  to  client.
*/
struct  opaque_auth  {
        enum_t oa_flavor;       /* flavor of auth */
        caddr_t oa_base;        /* address of more auth stuff */
        uint_t oa_length;       /* not to exceed MAX_AUTH_BYTES */
};
/*
 * Auth handle, interface to client side  authenticators.
*/
 typedef  struct  {
        struct opaque_auth ah_cred;
        struct opaque_auth ah_verf;
        union  des_block ah_key;
        struct  auth_ops  {
                void(*ah_nextverf)(\|);
                int(*ah_marshal)(\|);     /* nextverf & serialize */
                int(*ah_validate)(\|);    /* validate verifier */
                int(*ah_refresh)(\|);     /* refresh credentials */
                void(*ah_destroy)(\|);    /* destroy this structure */
        }  *ah_ops;
        caddr_t  ah_private;
}  AUTH;
.fi
.in -2

.SS "The \fBCLIENT\fR Structure"
.sp
.in +2
.nf
/*
 *  Client  rpc  handle.
 *  Created  by  individual  implementations.
 *  Client is responsible for initializing auth.
 */
        typedef  struct  {
        AUTH    *cl_auth;       /* authenticator */
        struct clnt_ops {
              enum clnt_stat (*cl_call)(\|);   /* call remote procedure */
              void (*cl_abort)(\|);            /* abort a call */
              void (*cl_geterr)(\|);           /* get specific error code */
              bool_t (*cl_freeres)(\|);        /* frees results */
              void (*cl_destroy)(\|);          /* destroy this structure */
              bool_t (*cl_control)(\|);        /* the ioctl(\|) of rpc */
              int (*cl_settimers)(\|);         /* set rpc level timers */
             } *cl_ops;
             caddr_t    cl_private;                  /* private stuff */
             char       *cl_netid;                   /* network identifier */
             char       *cl_tp;                      /* device name */
}  CLIENT;
.fi
.in -2

.SS "The \fBSVCXPRT\fR Structure"
.sp
.in +2
.nf
enum  xprt_stat  {
XPRT_DIED,
XPRT_MOREREQS,
XPRT_IDLE
};
/*
 *  Server  side  transport  handle
 */
typedef  struct  {
        int     xp_fd;                  /* file descriptor for the
        ushort_t xp_port;               /* obsolete */
        struct xp_ops {
           bool_t (*xp_recv)(\|); /* receive incoming requests */
           enum xprt_stat (*xp_stat)(\|); /* get transport status */
           bool_t (*xp_getargs)(\|);      /* get arguments */
           bool_t (*xp_reply)(\|);        /* send reply */
           bool_t (*xp_freeargs)(\|);     /* free mem allocated
                                                   for args */
           void (*xp_destroy)(\|);        /* destroy this struct */
        } *xp_ops;
        int xp_addrlen;                 /* length of remote addr.
                                           Obsolete */
        char *xp_tp;                    /* transport provider device
                                           name */
        char *xp_netid;                 /* network identifier */
        struct netbuf xp_ltaddr;        /* local transport address */
        struct netbuf xp_rtaddr;        /* remote transport address */
        char xp_raddr[16];              /* remote address. Obsolete */
        struct opaque_auth xp_verf;     /* raw response verifier */
        caddr_t xp_p1;                  /* private: for use
                                           by svc ops */
        caddr_t xp_p2;                  /* private: for use
                                           by svc ops */
        caddr_t xp_p3;                  /* private: for use
                                           by svc lib */
        int xp_type                     /* transport type */
}  SVCXPRT;
.fi
.in -2

.SS "The \fBsvc_reg\fR Structure"
.sp
.in +2
.nf
struct  svc_req  {
   rpcprog_t rq_prog;          /* service program number */
   rpcvers_t rq_vers;          /* service protocol version */
   rpcproc_t rq_proc;          /* the desired procedure */
   struct opaque_auth rq_cred; /* raw creds from the wire */
   caddr_t rq_clntcred;        /* read only cooked cred */
   SVCXPRT *rq_xprt;           /* associated transport */

};
.fi
.in -2

.SS "The \fBXDR\fR Structure"
.sp
.in +2
.nf
/*
 * XDR operations.
 * XDR_ENCODE causes the type to be encoded into the stream.
 * XDR_DECODE causes the type to be extracted from the stream.
 * XDR_FREE can be used to release the space allocated by an XDR_DECODE
 * request.
 */
enum xdr_op {
    XDR_ENCODE=0,
    XDR_DECODE=1,
    XDR_FREE=2
};
/*
 * This is the number of bytes per unit of external data.
 */
#define BYTES_PER_XDR_UNIT	(4)
#define RNDUP(x)  ((((x) + BYTES_PER_XDR_UNIT - 1) /
                   BYTES_PER_XDR_UNIT) \e * BYTES_PER_XDR_UNIT)
/*
 * A xdrproc_t exists for each data type which is to be encoded or
 * decoded.  The second argument to the xdrproc_t is a pointer to
 * an opaque pointer.  The opaque pointer generally points to a
 * structure of the data type to be decoded.  If this points to 0,
 * then the type routines should allocate dynamic storage of the
 * appropriate size and return it.
 * bool_t  (*xdrproc_t)(XDR *, caddr_t *);
 */
typedef  bool_t (*xdrproc_t)(\|);
/*
 * The XDR handle.
 * Contains operation which is being applied to the stream,
 * an operations vector for the particular implementation
 */
typedef struct {

enum xdr_op x_op;    /* operation; fast additional param */
struct  xdr_ops  {

bool_t       (*x_getlong)(\|);      /* get long from underlying stream */ 
bool_t       (*x_putlong)(\|);      /* put long to underlying stream */ 
bool_t       (*x_getbytes)(\|);     /* get bytes from underlying stream */ 
bool_t       (*x_putbytes)(\|);     /* put bytes to underlying stream */ 
uint_t       (*x_getpostn)(\|);     /* returns bytes off from beginning */ 
bool_t       (*x_setpostn)(\|);     /* reposition the stream */ 
rpc_inline_t *(*x_inline)(\|);      /* buf quick ptr to buffered data */ 
void         (*x_destroy)(\|);      /* free privates of this xdr_stream */ 
bool_t       (*x_control)(\|);      /* changed/retrieve client object info*/ 
bool_t       (*x_getint32)(\|);     /* get int from underlying stream */ 
bool_t       (*x_putint32)(\|);     /* put int to underlying stream */ 

} *x_ops; 

caddr_t      x_public;             /* users' data */ 
caddr_t      x_priv                /* pointer to private data */ 
caddr_t      x_base;               /* private used for position info */ 
int          x_handy;              /* extra private word */  
XDR;
.fi
.in -2

.SS "Index to Routines"
.sp
.LP
The following table lists  \fBRPC\fR routines and the manual reference pages on which they are described:
.sp
.ne 2
.mk
.na
\fB\fBRPC Routine\fR\fR
.ad
.RS 27n
.rt  
\fBManual Reference Page\fR
.RE

.sp
.ne 2
.mk
.na
\fB\fBauth_destroy\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_auth\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBauthdes_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBauthdes_getucred\fR\fR
.ad
.RS 27n
.rt  
\fBsecure_rpc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBauthdes_seccreate\fR\fR
.ad
.RS 27n
.rt  
\fBsecure_rpc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBauthnone_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_auth\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBauthsys_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_auth\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBauthsys_create_default\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_auth\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBauthunix_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBauthunix_create_default\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBcallrpc\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_broadcast\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_call\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_calls\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_control\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_create\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_create\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_destroy\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_create\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_dg_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_create\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_freeres\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_calls\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_geterr\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_calls\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_pcreateerror\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_create\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_perrno\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_calls\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_perror\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_calls\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_raw_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_create\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_spcreateerror\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_create\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_sperrno\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_calls\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_sperror\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_calls\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_tli_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_create\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_tp_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_create\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_udpcreate\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnt_vc_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_create\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclntraw_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclnttcp_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBclntudp_bufcreate\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBget_myaddress\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBgetnetname\fR\fR
.ad
.RS 27n
.rt  
\fBsecure_rpc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBhost2netname\fR\fR
.ad
.RS 27n
.rt  
\fBsecure_rpc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBkey_decryptsession\fR\fR
.ad
.RS 27n
.rt  
\fBsecure_rpc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBkey_encryptsession\fR\fR
.ad
.RS 27n
.rt  
\fBsecure_rpc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBkey_gendes\fR\fR
.ad
.RS 27n
.rt  
\fBsecure_rpc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBkey_setsecret\fR\fR
.ad
.RS 27n
.rt  
\fBsecure_rpc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBnetname2host\fR\fR
.ad
.RS 27n
.rt  
\fBsecure_rpc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBnetname2user\fR\fR
.ad
.RS 27n
.rt  
\fBsecure_rpc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBpmap_getmaps\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBpmap_getport\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBpmap_rmtcall\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBpmap_set\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBpmap_unset\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBregisterrpc\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBrpc_broadcast\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_calls\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBrpc_broadcast_exp\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_calls\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBrpc_call\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_clnt_calls\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBrpc_reg\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_calls\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_create\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_destroy\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_create\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_dg_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_create\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_dg_enablecache\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_calls\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_fd_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_create\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_fds\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_freeargs\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_reg\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_getargs\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_reg\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_getcaller\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_getreq\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_getreqset\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_calls\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_getrpccaller\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_calls\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_raw_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_create\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_reg\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_calls\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_register\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_run\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_reg\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_sendreply\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_reg\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_tli_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_create\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_tp_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_create\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_unreg\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_calls\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_unregister\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvc_vc_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_create\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvcerr_auth\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_err\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvcerr_decode\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_err\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvcerr_noproc\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_err\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvcerr_noprog\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_err\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvcerr_progvers\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_err\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvcerr_systemerr\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_err\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvcerr_weakauth\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_err\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvcfd_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvcraw_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvctcp_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvcudp_bufcreate\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBsvcudp_create\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBuser2netname\fR\fR
.ad
.RS 27n
.rt  
\fBsecure_rpc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBxdr_accepted_reply\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_xdr\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBxdr_authsys_parms\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_xdr\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBxdr_authunix_parms\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_soc\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBxdr_callhdr\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_xdr\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBxdr_callmsg\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_xdr\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBxdr_opaque_auth\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_xdr\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBxdr_rejected_reply\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_xdr\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBxdr_replymsg\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_xdr\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBxprt_register\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_calls\fR(3NSL)
.RE

.sp
.ne 2
.mk
.na
\fB\fBxprt_unregister\fR\fR
.ad
.RS 27n
.rt  
\fBrpc_svc_calls\fR(3NSL)
.RE

.SH FILES
.sp
.LP
\fB/etc/netconfig\fR
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe with exceptions
.TE

.SH SEE ALSO
.sp
.LP
\fBgetnetconfig\fR(3NSL), \fBgetnetpath\fR(3NSL), \fBrpc_clnt_auth\fR(3NSL), \fBrpc_clnt_calls\fR(3NSL), \fBrpc_clnt_create\fR(3NSL), \fBrpc_svc_calls\fR(3NSL), \fBrpc_svc_create\fR(3NSL), \fBrpc_svc_err\fR(3NSL), \fBrpc_svc_reg\fR(3NSL), \fBrpc_xdr\fR(3NSL), \fBrpcbind\fR(3NSL), \fBsecure_rpc\fR(3NSL), \fBthreads\fR(5), \fBxdr\fR(3NSL), \fBnetconfig\fR(4), \fBrpc\fR(4), \fBattributes\fR(5), \fBenviron\fR(5)
