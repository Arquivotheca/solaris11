'\" te
.\"  Copyright 1994, The X/Open Company Ltd.  All Rights Reserved  Portions Copyright 1989 AT&T  Portions Copyright (c) 1998, Sun Microsystems, Inc.  All Rights Reserved
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at  http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material.
.TH t_rcvudata 3NSL "7 May 1998" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
t_rcvudata \- receive a data unit
.SH SYNOPSIS
.LP
.nf
#include <xti.h>

\fBint\fR \fBt_rcvudata\fR(\fBint\fR \fIfd\fR, \fBstruct t_unitdata *\fR\fIunitdata\fR, \fBint *\fR\fIflags\fR);
.fi

.SH DESCRIPTION
.sp
.LP
This routine is part of the \fBXTI\fR interfaces which evolved from the \fBTLI\fR interfaces. \fBXTI\fR represents the future evolution of these interfaces. However, \fBTLI\fR interfaces are supported for compatibility. When using a \fBTLI\fR routine that has the same name as an \fBXTI\fR routine, the  \fBtiuser.h\fR header file must be used.  Refer to the \fBTLI\fR \fBCOMPATIBILITY\fR section for a description of differences between the two interfaces.
.sp
.LP
This function is used in connectionless-mode to receive a data unit from another transport user. The argument \fIfd\fR identifies the local transport endpoint through which data will be received, \fIunitdata\fR holds information associated with the received data unit, and \fIflags\fR is set on return to indicate that the complete data unit was not received. The argument \fIunitdata\fR points to a \fBt_unitdata\fR structure containing the following members:
.sp
.in +2
.nf
struct netbuf addr;
struct netbuf opt;
struct netbuf udata;
.fi
.in -2

.sp
.LP
The \fImaxlen\fR field of \fIaddr\fR, \fIopt\fR and \fIudata\fR must be set before calling this function to indicate the maximum size of the buffer for each. If the  \fImaxlen\fR field of  \fIaddr\fR or  \fIopt\fR is set to zero, no information is returned in the  \fIbuf\fR field of this parameter.
.sp
.LP
On return from this call, \fIaddr\fR specifies the protocol address of the sending user, \fIopt\fR identifies options that were associated with this data unit, and \fIudata\fR specifies the user data that was received.
.sp
.LP
By default, \fBt_rcvudata()\fR operates in synchronous mode and will wait for a data unit to arrive if none is currently available. However, if  \fBO_NONBLOCK\fR is set by means of  \fBt_open\fR(3NSL) or \fBfcntl\fR(2), \fBt_rcvudata()\fR will execute in asynchronous mode and will fail if no data units are available.
.sp
.LP
If the buffer defined in the \fIudata\fR field of \fIunitdata\fR is not large enough to hold the current data unit, the buffer will be filled and  \fBT_MORE\fR will be set in \fIflags\fR on return to indicate that another \fBt_rcvudata()\fR should be called to retrieve the rest of the data unit.  Subsequent calls to \fBt_rcvudata()\fR will return zero for the length of the address and options until the full data unit has been received.
.sp
.LP
If the call is interrupted, \fBt_rcvudata()\fR will return \fBEINTR\fR and no datagrams will have been removed from the endpoint.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, a value of  \fB0\fR is returned.  Otherwise, a value of  \(mi1 is returned and \fBt_errno\fR is set to indicate an error.
.SH VALID STATES
.sp
.LP
\fBT_IDLE\fR.
.SH ERRORS
.sp
.LP
On failure, \fBt_errno\fR is set to one of the following:
.sp
.ne 2
.mk
.na
\fB\fBTBADF\fR\fR
.ad
.RS 15n
.rt  
The specified file descriptor does not refer to a transport endpoint.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTBUFOVFLW\fR\fR
.ad
.RS 15n
.rt  
The number of bytes allocated for the incoming protocol address or options \fI(maxlen)\fR is greater than  \fB0\fR but not sufficient to store the information. The unit data information to be returned in \fIunitdata\fR will be discarded.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTLOOK\fR\fR
.ad
.RS 15n
.rt  
An asynchronous event has occurred on this transport endpoint and requires immediate attention.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTNODATA\fR\fR
.ad
.RS 15n
.rt  
\fBO_NONBLOCK\fR was set, but no data units are currently available from the transport provider.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTNOTSUPPORT\fR\fR
.ad
.RS 15n
.rt  
This function is not supported by the underlying transport provider.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTOUTSTATE\fR\fR
.ad
.RS 15n
.rt  
The communications endpoint referenced by  \fIfd\fR is not in one of the states in which a call to this function is valid.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTPROTO\fR\fR
.ad
.RS 15n
.rt  
This error indicates that a communication problem has been detected between XTI and the transport provider for which there is no other suitable XTI error \fB(t_errno)\fR. 
.RE

.sp
.ne 2
.mk
.na
\fB\fBTSYSERR\fR\fR
.ad
.RS 15n
.rt  
A system error has occurred during execution of this function.
.RE

.SH TLI COMPATIBILITY
.sp
.LP
The \fBXTI\fR and \fBTLI\fR interface definitions have common names but use different header files. This, and other semantic differences between the two interfaces are described in the subsections below.
.SS "Interface Header"
.sp
.LP
The \fBXTI\fR interfaces use the header file, \fBxti.h\fR. \fBTLI\fR interfaces should \fInot\fR use this header.  They should use the header:
.br
.in +2
#include<tiuser.h>
.in -2
.SS "Error Description Values"
.sp
.LP
The \fBt_errno\fR values that can be set by the \fBXTI\fR interface and cannot be set by the \fBTLI\fR interface are:
.br
.in +2
\fBTPROTO\fR
.in -2
.br
.in +2
\fBTOUTSTATE\fR
.in -2
.sp
.LP
A \fBt_errno\fR value that this routine can return under different circumstances than its \fBXTI\fR counterpart is \fBTBUFOVFLW.\fR It can be returned even when the \fBmaxlen\fR field of the corresponding buffer has been set to zero.
.SS "Option Buffers"
.sp
.LP
The format of the options in an \fBopt\fR buffer is dictated by the transport provider. Unlike the \fBXTI\fR interface, the \fBTLI\fR interface does not fix the buffer format.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5)  for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
\fBfcntl\fR(2), \fBt_alloc\fR(3NSL), \fBt_open\fR(3NSL), \fBt_rcvuderr\fR(3NSL), \fBt_sndudata\fR(3NSL), \fBattributes\fR(5) 
