'\" te
.\" Copyright (c) 2008, 2011, Oracle and/or its affiliates. All rights reserved.
.\" Copyright 1989 AT&T.
.\" Portions Copyright (c) 1992, X/Open Company Limited. All Rights Reserved
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at  http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material.
.TH gethostbyname 3NSL "14 Mar 2011" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
gethostbyname, gethostbyname_r, gethostbyaddr, gethostbyaddr_r, gethostent, gethostent_r, sethostent, endhostent \- get network host entry
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR... ] \fIfile\fR... \fB-lnsl\fR [ \fIlibrary\fR... ]
#include <netdb.h>

\fBstruct hostent *\fR\fBgethostbyname\fR(\fBconst char *\fR\fIname\fR);
.fi

.LP
.nf
\fBstruct hostent *\fR\fBgethostbyname_r\fR(\fBconst char *\fR\fIname\fR,
     \fBstruct hostent *\fR\fIresult\fR, \fBchar *\fR\fIbuffer\fR, \fBint\fR \fIbuflen\fR,
     \fBint *\fR\fIh_errnop\fR);
.fi

.LP
.nf
\fBstruct hostent *\fR\fBgethostbyaddr\fR(\fBconst char *\fR\fIaddr\fR, \fBint\fR \fIlen\fR,
     \fBint\fR \fItype\fR);
.fi

.LP
.nf
\fBstruct hostent *\fR\fBgethostbyaddr_r\fR(\fBconst char *\fR\fIaddr\fR, \fBint\fR \fIlength\fR,
     \fBint\fR \fItype\fR, \fBstruct hostent *\fR\fIresult\fR, \fBchar *\fR\fIbuffer\fR,
     \fBint\fR \fIbuflen\fR, \fBint *\fR\fIh_errnop\fR);
.fi

.LP
.nf
\fBstruct hostent *\fR\fBgethostent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBstruct hostent *\fR\fBgethostent_r\fR(\fBstruct hostent *\fR\fIresult\fR,
     \fBchar *\fR\fIbuffer\fR, \fBint\fR \fIbuflen\fR, \fBint *\fR\fIh_errnop\fR);
.fi

.LP
.nf
\fBint\fR \fBsethostent\fR(\fBint\fR \fIstayopen\fR);
.fi

.LP
.nf
\fBint\fR \fBendhostent\fR(\fBvoid\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions are used to obtain entries describing hosts. An entry can come from any of the sources for \fBhosts\fR specified in the \fB/etc/nsswitch.conf\fR file. See \fBnsswitch.conf\fR(4). These functions have been superseded by \fBgetipnodebyname\fR(3SOCKET), \fBgetipnodebyaddr\fR(3SOCKET), and \fBgetaddrinfo\fR(3SOCKET), which provide greater portability to applications when multithreading is performed or technologies such as IPv6 are used. For example, the functions described in the following cannot be used with applications targeted to work with IPv6.
.sp
.LP
The \fBgethostbyname()\fR function searches for information for a host with the hostname specified by the character-string parameter \fIname\fR.
.sp
.LP
The \fBgethostbyaddr()\fR function searches for information for a host with a given host address. The parameter \fBtype\fR specifies the family of the address. This should be one of the address families defined in \fB<sys/socket.h>\fR\&. See the \fBNOTES\fR section for more information. Also see the \fBEXAMPLES\fR section for information on how to convert an Internet \fBIP\fR address notation that is separated by periods (.) into an \fIaddr\fR parameter. The parameter \fIlen\fR specifies the length of the buffer indicated by \fIaddr\fR.
.sp
.LP
All addresses are returned in network order. In order to interpret the addresses, \fBbyteorder\fR(3SOCKET) must be used for byte order conversion.
.sp
.LP
The \fBsethostent()\fR, \fBgethostent()\fR, and \fBendhostent()\fR functions are used to enumerate host entries from the database.
.sp
.LP
The \fBsethostent()\fR function sets or resets the enumeration to the beginning of the set of host entries. This function should be called before the first call to \fBgethostent()\fR. Calls to \fBgethostbyname()\fR and \fBgethostbyaddr()\fR leave the enumeration position in an indeterminate state. If the \fIstayopen\fR flag is non-zero, the system can keep allocated resources such as open file descriptors until a subsequent call to \fBendhostent()\fR.
.sp
.LP
Successive calls to the \fBgethostent()\fR function return either successive entries or \fINULL,\fR indicating the end of the enumeration.
.sp
.LP
The \fBendhostent()\fR function can be called to indicate that the caller expects to do no further host entry retrieval operations; the system can then deallocate resources it was using. It is still allowed, but possibly less efficient, for the process to call more host retrieval functions after calling \fBendhostent()\fR.
.SS "Reentrant Interfaces"
.sp
.LP
The \fBgethostbyname()\fR, \fBgethostbyaddr()\fR, and \fBgethostent()\fR functions use static storage that is reused in each call, making these functions unsafe for use in multithreaded applications.
.sp
.LP
The \fBgethostbyname_r()\fR, \fBgethostbyaddr_r()\fR, and \fBgethostent_r()\fR functions provide reentrant interfaces for these operations.
.sp
.LP
Each reentrant interface performs the same operation as its non-reentrant counterpart, named by removing the \fB_r\fR suffix. The reentrant interfaces, however, use buffers supplied by the caller to store returned results and the interfaces are safe for use in both single-threaded and multithreaded applications.
.sp
.LP
Each reentrant interface takes the same parameters as its non-reentrant counterpart, as well as the following additional parameters. The parameter \fIresult\fR must be a pointer to a \fBstruct hostent\fR structure allocated by the caller. On successful completion, the function returns the host entry in this structure. The parameter \fIbuffer\fR must be a pointer to a buffer supplied by the caller. This buffer is used as storage space for the host data. All of the pointers within the returned \fBstruct hostent\fR \fIresult\fR point to data stored within this buffer. See the \fBRETURN VALUES\fR section for more information. The buffer must be large enough to hold all of the data associated with the host entry. The parameter \fIbuflen\fR should give the size in bytes of the buffer indicated by \fIbuffer\fR. The parameter \fIh_errnop\fR should be a pointer to an integer. An integer error status value is stored there on certain error conditions. See the \fBERRORS\fR section for more information.
.sp
.LP
For enumeration in multithreaded applications, the position within the enumeration is a process-wide property shared by all threads. The \fBsethostent()\fR function can be used in a multithreaded application but resets the enumeration position for all threads. If multiple threads interleave calls to \fBgethostent_r()\fR, the threads will enumerate disjoint subsets of the host database.
.sp
.LP
Like their non-reentrant counterparts, \fBgethostbyname_r()\fR and \fBgethostbyaddr_r()\fR leave the enumeration position in an indeterminate state.
.SH RETURN VALUES
.sp
.LP
Host entries are represented by the \fBstruct hostent\fR structure defined in \fB<netdb.h>\fR:
.sp
.in +2
.nf
struct hostent {
    char    *h_name;         /* canonical name of host */
    char    **h_aliases;     /* alias list */
    int     h_addrtype;      /* host address type */
    int     h_length;        /* length of address */
    char    **h_addr_list;   /* list of addresses */
};
.fi
.in -2

.sp
.LP
See the \fBEXAMPLES\fR section for information about how to retrieve a ``.'' separated Internet \fBIP\fR address string from the \fIh_addr_list\fR field of \fBstruct hostent\fR.
.sp
.LP
The \fBgethostbyname()\fR, \fBgethostbyname_r()\fR, \fBgethostbyaddr()\fR, and \fBgethostbyaddr_r()\fR functions each return a pointer to a \fBstruct hostent\fR if they successfully locate the requested entry; otherwise they return \fINULL\fR.
.sp
.LP
The \fBgethostent()\fR and \fBgethostent_r()\fR functions each return a pointer to a \fBstruct hostent\fR if they successfully enumerate an entry; otherwise they return \fINULL\fR, indicating the end of the enumeration.
.sp
.LP
The \fBgethostbyname()\fR, \fBgethostbyaddr()\fR, and \fBgethostent()\fR functions use static storage, so returned data must be copied before a subsequent call to any of these functions if the data is to be saved.
.sp
.LP
When the pointer returned by the reentrant functions \fBgethostbyname_r()\fR, \fBgethostbyaddr_r()\fR, and \fBgethostent_r()\fR is not \fINULL\fR, it is always equal to the \fIresult\fR pointer that was supplied by the caller.
.sp
.LP
The \fBsethostent()\fR and \fBendhostent()\fR functions return \fB0\fR on success.
.SH ERRORS
.sp
.LP
The reentrant functions \fBgethostbyname_r()\fR, \fBgethostbyaddr_r()\fR, and \fBgethostent_r()\fR will return \fINULL\fR and set \fIerrno\fR to \fBERANGE\fR if the length of the buffer supplied by caller is not large enough to store the result. See \fBIntro\fR(2) for the proper usage and interpretation of \fBerrno\fR in multithreaded applications.
.sp
.LP
The reentrant functions \fBgethostbyname_r()\fR and \fBgethostbyaddr_r()\fR set the integer pointed to by \fIh_errnop\fR to one of these values in case of error.
.sp
.LP
On failures, the non-reentrant functions \fBgethostbyname()\fR and \fBgethostbyaddr()\fR set a global integer \fIh_errno\fR to indicate one of these error codes (defined in \fB<netdb.h>\fR): \fBHOST_NOT_FOUND\fR, \fBTRY_AGAIN\fR, \fBNO_RECOVERY\fR, \fBNO_DATA\fR, and \fBNO_ADDRESS\fR.
.sp
.LP
If a resolver is provided with a malformed address, or if any other error occurs before \fBgethostbyname()\fR is resolved, then \fBgethostbyname()\fR returns an internal error with a value of \(mi1.
.sp
.LP
The \fBgethostbyname()\fR function will set \fIh_errno\fR to \fBNETDB_INTERNAL\fR when it returns a \fINULL\fR value.
.SH EXAMPLES
.LP
\fBExample 1 \fRUsing \fBgethostbyaddr()\fR
.sp
.LP
Here is a sample program that gets the canonical name, aliases, and ``.'' separated Internet \fBIP\fR addresses for a given ``.'' separated \fBIP\fR address:

.sp
.in +2
.nf
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
int main(int argc, const char **argv)
{
	in_addr_t addr;
	struct hostent *hp;
	char **p;
	if (argc != 2) {
	    (void) printf("usage: %s IP-address\en", argv[0]);
	    exit (1);
	}
	if ((int)(addr = inet_addr(argv[1])) == -1) {
	    (void) printf("IP-address must be of the form a.b.c.d\en");
	    exit (2);
	}
	hp = gethostbyaddr((char *)&addr, 4, AF_INET);
	if (hp == NULL) {
	    (void) printf("host information for %s not found\en", argv[1]);
	    exit (3);
	}
	for (p = hp->h_addr_list; *p != 0; p++) {
	    struct in_addr in;
	    char **q;
	    (void) memcpy(&in.s_addr, *p, sizeof (in.s_addr));
         (void) printf("%s %s", inet_ntoa(in), hp\(mi>h_name);
	    for (q = hp->h_aliases; *q != 0; q++)
	        (void) printf(" %s", *q);
	    (void) putchar('\en');
	}
	exit (0);
}
.fi
.in -2

.sp
.LP
Note that the preceding sample program is unsafe for use in multithreaded applications.

.SH FILES
.sp
.ne 2
.mk
.na
\fB\fB/etc/hosts\fR\fR
.ad
.RS 22n
.rt  
hosts file that associates the names of hosts with their Internet Protocol (IP) addresses
.RE

.sp
.ne 2
.mk
.na
\fB\fB/etc/netconfig\fR\fR
.ad
.RS 22n
.rt  
network configuration database
.RE

.sp
.ne 2
.mk
.na
\fB\fB/etc/nsswitch.conf\fR\fR
.ad
.RS 22n
.rt  
configuration file for the name service switch
.RE

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelT{
See \fBReentrant Interfaces\fR in the \fBDESCRIPTION\fR section.
T}
.TE

.SH SEE ALSO
.sp
.LP
\fBIntro\fR(2), \fBIntro\fR(3), \fBbyteorder\fR(3SOCKET), \fBinet\fR(3SOCKET), \fBnetdb.h\fR(3HEAD), \fBnetdir\fR(3NSL), \fBhosts\fR(4), \fBnetconfig\fR(4), \fBnss\fR(4), \fBnsswitch.conf\fR(4), \fBattributes\fR(5)
.SH WARNINGS
.sp
.LP
The reentrant interfaces \fBgethostbyname_r()\fR, \fBgethostbyaddr_r()\fR, and \fBgethostent_r()\fR are included in this release on an uncommitted basis only and are subject to change or removal in future minor releases.
.SH NOTES
.sp
.LP
To ensure that they all return consistent results, \fBgethostbyname()\fR, \fBgethostbyname_r()\fR, and \fBnetdir_getbyname()\fR are implemented in terms of the same internal library function. This function obtains the system-wide source lookup policy based on the \fBinet\fR family entries in \fBnetconfig\fR(4) and the \fBhosts:\fR entry in \fBnsswitch.conf\fR(4). Similarly, \fBgethostbyaddr()\fR, \fBgethostbyaddr_r()\fR, and \fBnetdir_getbyaddr()\fR are implemented in terms of the same internal library function. If the \fBinet\fR family entries in \fBnetconfig\fR(4) have a ``-'' in the last column for \fBnametoaddr\fR libraries, then the entry for \fBhosts\fR in \fBnsswitch.conf\fR will be used; \fBnametoaddr\fR libraries in that column will be used, and \fBnsswitch.conf\fR will not be consulted.
.sp
.LP
There is no analogue of \fBgethostent()\fR and \fBgethostent_r()\fR in the netdir functions, so these enumeration functions go straight to the \fBhosts\fR entry in \fBnsswitch.conf\fR. Thus enumeration can return results from a different source than that used by \fBgethostbyname()\fR, \fBgethostbyname_r()\fR, \fBgethostbyaddr()\fR, and \fBgethostbyaddr_r()\fR.
.sp
.LP
All the functions that return a \fBstruct hostent\fR must always return the \fIcanonical name\fR in the \fIh_name\fR field. This name, by definition, is the well-known and official hostname shared between all aliases and all addresses. The underlying source that satisfies the request determines the mapping of the input name or address into the set of names and addresses in \fBhostent\fR. Different sources might do that in different ways. If there is more than one alias and more than one address in \fBhostent\fR, no pairing is implied between them.
.sp
.LP
The system attempts to put those addresses that are on the same subnet as the caller before addresses that are on different subnets. However, if address sorting is disabled by setting \fBSORT_ADDRS\fR to FALSE in the \fB/etc/default/nss\fR file, the system does not put the local subnet addresses first. See \fBnss\fR(4) for more information.
.sp
.LP
When compiling multithreaded applications, see \fBIntro\fR(3), \fBMULTITHREADED APPLICATIONS\fR, for information about the use of the \fB_REENTRANT\fR flag.
.sp
.LP
Use of the enumeration interfaces \fBgethostent()\fR and \fBgethostent_r()\fR is discouraged; enumeration might not be supported for all database sources. The semantics of enumeration are discussed further in \fBnsswitch.conf\fR(4).
.sp
.LP
The current implementations of these functions only return or accept addresses for the Internet address family (type \fBAF_INET\fR).
.sp
.LP
The form for an address of type \fBAF_INET\fR is a \fBstruct in_addr\fR defined in <\fBnetinet/in.h\fR>. The functions described in \fBinet\fR(3SOCKET), and illustrated in the \fBEXAMPLES\fR section, are helpful in constructing and manipulating addresses in this form.
.sp
.LP
When the caller provides the IP address (the \fIaddr\fR argument of \fBgethostbyaddr()\fR and \fBgethostbyaddr_r()\fR), the \fIaddr\fR argument should be aligned on a word boundary or the code must be changed to \fBmemcpy\fR(3C) the argument to an aligned area; otherwise an error such as a \fBSIGBUS\fR may result.
