'\" te
.\" Copyright 1994, The X/Open Company Ltd.  All Rights Reserved.
.\" Portions Copyright 1989 AT&T  
.\" Portions Copyright (C) 2007, Sun Microsystems, Inc. All Rights Reserved
.\"  Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at  http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material. 
.TH t_rcv 3NSL "24 Aug 2007" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
t_rcv \- receive data or expedited data sent over a connection
.SH SYNOPSIS
.LP
.nf
#include <xti.h>

\fBint\fR \fBt_rcv\fR(\fBint\fR \fIfd\fR, \fBvoid *\fR\fIbuf\fR, \fBunsigned int\fR \fInbytes\fR, \fBint *\fR\fIflags\fR);
.fi

.SH DESCRIPTION
.sp
.LP
This function is part of the \fBXTI\fR interfaces which evolved from the \fBTLI\fR interfaces. \fBXTI\fR represents the future evolution of these interfaces. However, \fBTLI\fR interfaces are supported for compatibility. When using a \fBTLI\fR function that has the same name as an \fBXTI\fR function, the  \fBtiuser.h\fR header file must be used.  Refer to the  \fBTLI\fR \fBCOMPATIBILITY\fR section for a description of differences between the two interfaces.
.sp
.LP
This function receives either normal or expedited data. The argument \fIfd\fR identifies the local transport endpoint through which data will arrive, \fIbuf\fR points to a receive buffer where user data will be placed, and \fInbytes\fR specifies the size of the receive buffer. The argument \fIflags\fR may be set on return from \fBt_rcv()\fR and specifies optional flags as described below.
.sp
.LP
By default, \fBt_rcv()\fR operates in synchronous mode and will wait for data to arrive if none is currently available. However, if \fBO_NONBLOCK\fR is set by means of \fBt_open\fR(3NSL) or \fBfcntl\fR(2), \fBt_rcv()\fR will execute in asynchronous mode and will fail if no data is available. See \fBTNODATA\fR below.
.sp
.LP
On return from the call, if  \fBT_MORE\fR is set in \fIflags\fR, this indicates that there is more data, and the current transport service data unit (TSDU) or expedited transport service data unit (ETSDU) must be received in multiple \fBt_rcv()\fR calls. In the asynchronous mode, or under unusual conditions (for example, the arrival of a signal or  \fBT_EXDATA\fR event),  the  \fBT_MORE\fR flag may be set on return from the \fBt_rcv()\fR call even when the number of bytes received is less than the size of the receive buffer specified. Each \fBt_rcv()\fR with the  \fBT_MORE\fR flag set indicates that another \fBt_rcv()\fR must follow to get more data for the current TSDU. The end of the TSDU is identified by the return of a \fBt_rcv()\fR call with the  \fBT_MORE\fR flag not set. If the transport provider does not support the concept of a TSDU as indicated in the \fIinfo\fR argument on return from \fBt_open\fR(3NSL) or \fBt_getinfo\fR(3NSL), the  \fBT_MORE\fR flag is not meaningful and should be ignored.  If \fInbytes\fR is greater than zero on the call to \fBt_rcv()\fR, \fBt_rcv()\fR will return  \fB0\fR only if the end of a TSDU is being returned to the user.
.sp
.LP
On return, the data is expedited if  \fBT_EXPEDITED\fR is set in flags.  If  \fBT_MORE\fR is also set, it indicates that the number of expedited bytes exceeded nbytes, a signal has interrupted the  call, or that an entire ETSDU was not available (only for transport protocols that support fragmentation of ETSDUs).  The rest of the ETSDU will be returned by subsequent calls to   \fBt_rcv()\fR which will return with  \fBT_EXPEDITED\fR set in flags. The end of the ETSDU is identified by the return of a  \fBt_rcv()\fR call with  \fBT_EXPEDITED\fR set and  \fBT_MORE\fR cleared.  If the entire ETSDU is not available it is possible for normal data fragments to be returned between the initial and final fragments of an ETSDU.
.sp
.LP
If a signal arrives, \fBt_rcv()\fR returns, giving the user any data currently available.  If no data is available,  \fBt_rcv()\fR returns  -1, sets  \fBt_errno\fR to \fBTSYSERR\fR and  \fBerrno\fR to \fBEINTR\fR. If some data is available,  \fBt_rcv()\fR returns the number of bytes received and  \fBT_MORE\fR is set in flags.
.sp
.LP
In synchronous mode, the only way for the user to be notified of the arrival of normal or expedited data is to issue this function or check for the  \fBT_DATA\fR or  \fBT_EXDATA\fR events using the \fBt_look\fR(3NSL) function.  Additionally, the process can arrange to be notified by means of the EM interface.
.SH RETURN VALUES
.sp
.LP
On successful completion, \fBt_rcv()\fR returns the number of bytes received. Otherwise, it returns  \fB\(mi1\fR on failure and \fBt_errno\fR is set to indicate the error.
.SH VALID STATES
.sp
.LP
\fBT_DATAXFER\fR, \fBT_OUTREL\fR.
.SH ERRORS
.sp
.LP
On failure, \fBt_errno\fR is set to one of the following:
.sp
.ne 2
.mk
.na
\fB\fBTBADF\fR\fR
.ad
.RS 15n
.rt  
The specified file descriptor does not refer to a transport endpoint.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTLOOK\fR\fR
.ad
.RS 15n
.rt  
An asynchronous event has occurred on this transport endpoint and requires immediate attention.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTNODATA\fR\fR
.ad
.RS 15n
.rt  
\fBO_NONBLOCK\fR was set, but no data is currently available from the transport provider.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTNOTSUPPORT\fR\fR
.ad
.RS 15n
.rt  
This function is not supported by the underlying transport provider.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTOUTSTATE\fR\fR
.ad
.RS 15n
.rt  
The communications endpoint referenced by \fIfd\fR is not in one of the states in which a call to this function is valid.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTPROTO\fR\fR
.ad
.RS 15n
.rt  
This error indicates that a communication problem has been detected between XTI and the transport provider for which there is no other suitable XTI error \fB(t_errno)\fR. 
.RE

.sp
.ne 2
.mk
.na
\fB\fBTSYSERR\fR\fR
.ad
.RS 15n
.rt  
A system error has occurred during execution of this function.
.RE

.SH TLI COMPATIBILITY
.sp
.LP
The \fBXTI\fR and \fBTLI\fR interface definitions have common names but use different header files. This, and other semantic differences between the two interfaces are described in the subsections below.
.SS "Interface Header"
.sp
.LP
The \fBXTI\fR interfaces use the header file, \fBxti.h\fR. \fBTLI\fR interfaces should \fInot\fR use this header.  They should use the header:
.br
.in +2
#include <tiuser.h>
.in -2
.SS "Error Description Values"
.sp
.LP
The \fBt_errno\fR value that can be set by the \fBXTI\fR interface and cannot be set by the \fBTLI\fR interface is:
.br
.in +2
\fBTPROTO\fR
.in -2
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5)  for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelSafe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
\fBfcntl\fR(2), \fBt_getinfo\fR(3NSL), \fBt_look\fR(3NSL), \fBt_open\fR(3NSL), \fBt_snd\fR(3NSL), \fBattributes\fR(5), \fBstandards\fR(5)
