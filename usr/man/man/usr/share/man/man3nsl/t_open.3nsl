'\" te
.\"  Copyright 1994, The X/Open Company Ltd.  All Rights Reserved  Portions Copyright 1989 AT&T  Portions Copyright (c) 1998, Sun Microsystems, Inc.  All Rights Reserved
.\"  Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at  http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material. 
.TH t_open 3NSL "7 May 1998" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
t_open \- establish a transport endpoint
.SH SYNOPSIS
.LP
.nf
#include <xti.h>
#include <fcntl.h>




\fBint\fR \fBt_open\fR(\fBconst char *\fR\fIname\fR, \fBint\fR \fIoflag\fR, \fBstruct t_info *\fR\fIinfo\fR);
.fi

.SH DESCRIPTION
.sp
.LP
This routine is part of the \fBXTI\fR interfaces which evolved from the \fBTLI\fR interfaces. \fBXTI\fR represents the future evolution of these interfaces. However, \fBTLI\fR interfaces are supported for compatibility. When using a \fBTLI\fR routine that has the same name as an \fBXTI\fR routine, the  \fBtiuser.h\fR header file must be used.  Refer to the  \fBTLI\fR \fBCOMPATIBILITY\fR section for a description of differences between the two interfaces.
.sp
.LP
The \fBt_open()\fR function must be called as the first step in the initialization of a transport endpoint. This function establishes a transport endpoint by supplying a transport provider identifier that indicates a particular transport provider, that is, transport protocol, and returning a file descriptor that identifies that endpoint.
.sp
.LP
The argument \fIname\fR points to a transport provider identifier and \fIoflag\fR identifies any open flags, as in \fBopen\fR(2). The argument \fIoflag\fR is constructed from  \fBO_RDWR\fR optionally bitwise inclusive-OR'ed with  \fBO_NONBLOCK.\fR These flags are defined by the header \fB<fcntl.h>\fR\&. The file descriptor returned by \fBt_open()\fR will be used by all subsequent functions to identify the particular local transport endpoint.
.sp
.LP
This function also returns various default characteristics of the underlying transport protocol by setting fields in the \fBt_info\fR structure. This argument points to a \fBt_info\fR which contains the following members:
.sp
.in +2
.nf
t_scalar_t addr;        /* max size of the transport protocol address */
t_scalar_t options;     /* max number of bytes of  */
	                        /* protocol-specific options  */
t_scalar_t tsdu;        /* max size of a transport service data  */
	                        /* unit (TSDU)  */
t_scalar_t etsdu;       /* max size of an expedited transport  */
	                        /* service data unit (ETSDU)  */
t_scalar_t connect;     /* max amount of data allowed on  */
                        /* connection establishment functions  */
t_scalar_t discon;      /* max amount of data allowed on  */
                        /* t_snddis() and t_rcvdis() functions  */
t_scalar_t servtype;    /* service type supported by the  */
	                        /* transport provider  */
t_scalar_t flags;       /* other info about the transport provider  */
.fi
.in -2

.sp
.LP
The values of the fields have the following meanings:
.sp
.ne 2
.mk
.na
\fB\fIaddr\fR\fR
.ad
.RS 12n
.rt  
A value greater than zero (\fBT_NULL\fR) indicates the maximum size of a transport protocol address and a value of -2 (\fBT_INVALID\fR) specifies that the transport provider does not provide user access to transport protocol addresses.
.RE

.sp
.ne 2
.mk
.na
\fB\fIoptions\fR\fR
.ad
.RS 12n
.rt  
A value greater than zero (\fBT_NULL\fR) indicates the maximum number of bytes of protocol-specific options supported by the provider, and a value of -2 (\fBT_INVALID\fR) specifies that the transport provider does not support user-settable options.
.RE

.sp
.ne 2
.mk
.na
\fB\fItsdu\fR\fR
.ad
.RS 12n
.rt  
A value greater than zero (\fBT_NULL\fR specifies the maximum size of a transport service data unit (TSDU); a value of zero (\fBT_NULL\fR) specifies that the transport provider does not support the concept of TSDU, although it does support the sending of a data stream with no logical boundaries preserved across a connection; a value of -1 (\fBT_INFINITE\fR) specifies that there is no limit to the size of a TSDU; and a value of -2 (\fBT_INVALID\fR) specifies that the transfer of normal data is not supported by the transport provider.
.RE

.sp
.ne 2
.mk
.na
\fB\fIetsdu\fR\fR
.ad
.RS 12n
.rt  
A value greater than zero (\fBT_NULL\fR) specifies the maximum size of an expedited transport service data unit (ETSDU); a value of zero (\fBT_NULL\fR) specifies that the transport provider does not support the concept of ETSDU, although it does support the sending of an expedited data stream with no logical boundaries preserved across a connection; a value of -1 (\fBT_INFINITE\fR)  specifies that there is no limit on the size of an ETSDU; and a value of -2 (\fBT_INVALID\fR) specifies that the transfer of expedited data is not supported by the transport provider. Note that the semantics of expedited data may be quite different for different transport providers.
.RE

.sp
.ne 2
.mk
.na
\fB\fIconnect\fR\fR
.ad
.RS 12n
.rt  
A value greater than zero (\fBT_NULL\fR) specifies the maximum amount of data that may be associated with connection establishment functions, and a value of -2 (\fBT_INVALID\fR) specifies that the transport provider does not allow data to be sent with connection establishment functions.
.RE

.sp
.ne 2
.mk
.na
\fB\fIdiscon\fR\fR
.ad
.RS 12n
.rt  
If the  \fBT_ORDRELDATA\fR bit in flags is clear, a value greater than zero (\fBT_NULL\fR) specifies the maximum amount of data that may be associated with the \fBt_snddis\fR(3NSL) and \fBt_rcvdis\fR(3NSL) functions, and a value of -2 (\fBT_INVALID\fR) specifies that the transport provider does not allow data to be sent with the abortive release functions. If the  \fBT_ORDRELDATA\fR bit is set in flags, a value greater than zero (\fBT_NULL\fR) specifies the maximum number of octets that may be associated with the \fBt_sndreldata()\fR, \fBt_rcvreldata()\fR, \fBt_snddis\fR(3NSL) and  \fBt_rcvdis\fR(3NSL) functions.
.RE

.sp
.ne 2
.mk
.na
\fB\fIservtype\fR\fR
.ad
.RS 12n
.rt  
This field specifies the service type supported by the transport provider, as described below.
.RE

.sp
.ne 2
.mk
.na
\fB\fIflags\fR\fR
.ad
.RS 12n
.rt  
This is a bit field used to specify other information about the  communications provider.  If the  \fBT_ORDRELDATA\fR bit is set, the communications provider supports user data to be sent with an orderly release. If the  \fBT_SENDZERO\fR bit is set in flags, this indicates the underlying transport provider supports the sending of zero-length TSDUs.
.RE

.sp
.LP
If a transport user is concerned with protocol independence, the above sizes may be accessed to determine how large the buffers must be to hold each piece of information. Alternatively, the \fBt_alloc\fR(3NSL) function may be used to allocate these buffers. An error will result if a transport user exceeds the allowed data size on any function.
.sp
.LP
The \fIservtype\fR field of \fIinfo\fR specifies one of the following values on return:
.sp
.ne 2
.mk
.na
\fB\fBT_COTS\fR \fR
.ad
.RS 15n
.rt  
The transport provider supports a connection-mode service but does not support the optional orderly release facility.
.RE

.sp
.ne 2
.mk
.na
\fB\fBT_COTS_ORD\fR \fR
.ad
.RS 15n
.rt  
The transport provider supports a connection-mode service with the optional orderly release facility.
.RE

.sp
.ne 2
.mk
.na
\fB\fBT_CLTS\fR \fR
.ad
.RS 15n
.rt  
The transport provider supports a connectionless-mode service. For this service type, \fBt_open()\fR will return -2 (\fBT_INVALID\fR) for \fIetsdu\fR, \fIconnect\fR and \fIdiscon\fR. 
.RE

.sp
.LP
A single transport endpoint may support only one of the above services at one time.
.sp
.LP
If \fIinfo\fR is set to a null pointer by the transport user, no protocol information is returned by \fBt_open()\fR. 
.SH RETURN VALUES
.sp
.LP
A valid file descriptor is returned upon successful completion.  Otherwise, a value of -1 is returned and \fBt_errno\fR is set to indicate an error.
.SH VALID STATES
.sp
.LP
\fBT_UNINIT\fR.
.SH ERRORS
.sp
.LP
On failure, \fBt_errno\fR is set to the following:
.sp
.ne 2
.mk
.na
\fB\fBTBADFLAG\fR\fR
.ad
.RS 12n
.rt  
An invalid flag is specified.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTBADNAME\fR\fR
.ad
.RS 12n
.rt  
Invalid transport provider name.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTPROTO\fR\fR
.ad
.RS 12n
.rt  
This error indicates that a communication problem has been detected between XTI and the transport provider for which there is no other suitable XTI error \fB(t_errno)\fR. 
.RE

.sp
.ne 2
.mk
.na
\fB\fBTSYSERR\fR\fR
.ad
.RS 12n
.rt  
A system error has occurred during execution of this function.
.RE

.SH TLI COMPATIBILITY
.sp
.LP
The \fBXTI\fR and \fBTLI\fR interface definitions have common names but use different header files. This and other semantic differences between the two interfaces are described in the subsections below.
.SS "Interface Header"
.sp
.LP
The \fBXTI\fR interfaces use the \fBxti.h\fR \fBTLI\fR interfaces should \fInot\fR use this header.  They should use the header:
.br
.in +2
#include <tiuser.h>
.in -2
.SS "Error Description Values"
.sp
.LP
The \fBt_errno\fR values \fBTPROTO\fR and \fBTBADNAME\fR can be set by the \fBXTI\fR interface but cannot be set by the \fBTLI\fR interface.
.SS "Notes"
.sp
.LP
For \fBTLI\fR , the \fBt_info\fR structure referenced by \fIinfo\fR lacks the following structure member: 
.sp
.in +2
.nf
t_scalar_t flags;    /* other info about the transport provider */
.fi
.in -2

.sp
.LP
This member was added to \fBstruct\fR \fBt_info\fR in the \fBXTI\fR interfaces.
.sp
.LP
When a value of -1 is observed as the return value in various \fBt_info\fR structure members, it signifies that the transport provider can handle an infinite length buffer for a corresponding attribute, such as address data, option data, \fBTSDU\fR (octet size), \fBETSDU\fR (octet size), connection data, and disconnection data. The corresponding structure members are \fBaddr\fR, \fBoptions\fR, \fBtsdu\fR, \fBestdu\fR, \fBconnect\fR, and \fBdiscon\fR, respectively.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5)  for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
\fBopen\fR(2), \fBattributes\fR(5) 
