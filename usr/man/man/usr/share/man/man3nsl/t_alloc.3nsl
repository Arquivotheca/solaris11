'\" te
.\"  Copyright 1994, The X/Open Company Ltd., All Rights Reserved. Portions Copyright 1989 AT&T. Portions Copyright (c) 1998, Sun Microsystems, Inc. , All Rights Reserved 
.\"  Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at  http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material. 
.TH t_alloc 3NSL "7 May 1998" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
t_alloc \- allocate a library structure
.SH SYNOPSIS
.LP
.nf
#include <xti.h>




\fBvoid *\fR\fBt_alloc\fR(\fBint\fR \fIfd\fR, \fBint\fR \fIstruct_type\fR, \fBint\fR \fIfields\fR);
.fi

.SH DESCRIPTION
.sp
.LP
This routine is part of the \fBXTI\fR interfaces which evolved from the \fBTLI\fR interfaces. \fBXTI\fR represents the future evolution of these interfaces. However, \fBTLI\fR interfaces are supported for compatibility. When using a \fBTLI\fR routine that has the same name as an \fBXTI\fR routine, a different header file, \fBtiuser.h\fR, must be used.  Refer to the section, \fBTLI\fR \fBCOMPATIBILITY\fR, for a description of differences between the two interfaces.
.sp
.LP
The \fBt_alloc()\fR function dynamically allocates memory for the various transport function argument structures as specified below. This function will allocate memory for the specified structure, and will also allocate memory for buffers referenced by the structure.
.sp
.LP
The structure to allocate is specified by \fIstruct_type\fR and must be one of the following:
.sp
.in +2
.nf
T_BIND		    struct	t_bind
T_CALL		    struct	t_call
T_OPTMGMT		 struct	t_optmgmt
T_DIS			    struct	t_discon
T_UNITDATA		struct	t_unitdata
T_UDERROR		 struct	t_uderr
T_INFO		    struct	t_info
.fi
.in -2

.sp
.LP
where each of these structures may subsequently be used as an argument to one or more transport functions.
.sp
.LP
Each of the above structures, except  \fBT_INFO,\fR contains at least one field of type \fBstruct\fR \fBnetbuf\fR. For each field of this type, the user may specify that the buffer for that field should be allocated as well. The length of the buffer allocated will be equal to or greater than the appropriate size as returned in the \fIinfo\fR argument of \fBt_open\fR(3NSL) or \fBt_getinfo\fR(3NSL). The relevant fields of the \fIinfo\fR argument are described in the following list. The \fIfields\fR argument specifies which buffers to allocate, where the argument is the bitwise-or of any of the following:
.sp
.ne 2
.mk
.na
\fB\fBT_ADDR\fR \fR
.ad
.RS 12n
.rt  
The \fIaddr\fR field of the \fBt_bind\fR, \fBt_call\fR, \fBt_unitdata\fR or \fBt_uderr\fR structures.
.RE

.sp
.ne 2
.mk
.na
\fB\fBT_OPT\fR \fR
.ad
.RS 12n
.rt  
The \fIopt\fR field of the \fBt_optmgmt\fR, \fBt_call\fR, \fBt_unitdata\fR or \fBt_uderr\fR structures.
.RE

.sp
.ne 2
.mk
.na
\fB\fBT_UDATA\fR \fR
.ad
.RS 12n
.rt  
The \fIudata\fR field of the \fBt_call\fR, \fBt_discon\fR or \fBt_unitdata\fR structures.
.RE

.sp
.ne 2
.mk
.na
\fB\fBT_ALL\fR \fR
.ad
.RS 12n
.rt  
All relevant fields of the given structure. Fields which are not supported by the transport provider specified by \fIfd\fR will not be allocated.
.RE

.sp
.LP
For each relevant field specified in \fIfields\fR, \fBt_alloc()\fR will allocate memory for the buffer associated with the field, and initialize the \fIlen\fR field to zero and the \fIbuf\fR pointer and \fImaxlen\fR field accordingly. Irrelevant or unknown values passed in fields are ignored. Since the length of the buffer allocated will be based on the same size information that is returned to the user on a call to \fBt_open\fR(3NSL) and \fBt_getinfo\fR(3NSL), \fIfd\fR must refer to the transport endpoint through which the newly allocated structure will be passed. In the case where a  \fBT_INFO\fR structure is to be allocated, \fIfd\fR may be set to any value. In this way the appropriate size information can be accessed. If the size value associated with any specified field is  \fBT_INVALID,\fR \fBt_alloc()\fR will be unable to determine the size of the buffer to  allocate and will fail, setting  \fBt_errno\fR to \fBTSYSERR\fR and  \fBerrno\fR to \fBEINVAL\fR.  See  \fBt_open\fR(3NSL) or  \fBt_getinfo\fR(3NSL). If the size value associated with any specified field is  \fBT_INFINITE,\fR then the behavior of  \fBt_alloc()\fR is implementation-defined. For any field not specified in \fIfields\fR, \fIbuf\fR will be set to the null pointer and \fIlen\fR and \fImaxlen\fR will be set to zero. See  \fBt_open\fR(3NSL) or \fBt_getinfo\fR(3NSL). 
.sp
.LP
The pointer returned if the allocation succeeds is suitably aligned so that it can be assigned to a pointer to any type of object and then used to access such an object or array of such objects in the space allocated.
.sp
.LP
Use of \fBt_alloc()\fR to allocate structures will help ensure the compatibility of user programs with future releases of the transport interface functions.
.SH RETURN VALUES
.sp
.LP
On successful completion, \fBt_alloc()\fR returns a pointer to the newly allocated structure. On failure, a null pointer is returned.
.SH VALID STATES
.sp
.LP
ALL - apart from \fBT_UNINIT\fR
.SH ERRORS
.sp
.LP
On failure, \fBt_errno\fR is set to one of the following:
.sp
.ne 2
.mk
.na
\fB\fBTBADF\fR\fR
.ad
.RS 16n
.rt  
\fBstruct_type\fR is other than  \fBT_INFO\fR and the specified file descriptor does not refer to a transport endpoint.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTNOSTRUCTYPE\fR\fR
.ad
.RS 16n
.rt  
Unsupported \fIstruct_type\fR requested. This can include a request for a structure type which is inconsistent with the transport provider type specified, that is, connection-mode or connectionless-mode.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTPROTO\fR\fR
.ad
.RS 16n
.rt  
This error indicates that a communication problem has been detected between XTI and the transport provider for which there is no other suitable XTI error \fB(t_errno)\fR. 
.RE

.sp
.ne 2
.mk
.na
\fB\fBTSYSERR\fR\fR
.ad
.RS 16n
.rt  
A system error has occurred during execution of this function.
.RE

.SH TLI COMPATIBILITY
.sp
.LP
The \fBXTI\fR and \fBTLI\fR interface definitions have common names but use different header files. This, and other semantic differences between the two interfaces are described in the subsections below.
.SS "Interface Header"
.sp
.LP
The \fBXTI\fR interfaces use the header file, \fBxti.h\fR. \fBTLI\fR interfaces should \fInot\fR use this header.  They should use the header:
.sp
.LP
\fB#include\fR \fB<tiuser.h>\fR 
.SS "Error Description Values"
.sp
.LP
The \fBt_errno\fR values that can be set by the \fBXTI\fR interface and cannot be set by the \fBTLI\fR interface are:
.sp
.ne 2
.mk
.na
\fB\fBTPROTO\fR \fR
.ad
.RS 17n
.rt  

.RE

.sp
.ne 2
.mk
.na
\fB\fBTNOSTRUCTYPE\fR \fR
.ad
.RS 17n
.rt  

.RE

.SS "Special Buffer Sizes"
.sp
.LP
Assume that the value associated with any field of \fBstruct\fR \fBt_info\fR (argument returned by \fBt_open()\fR or \fBt_getinfo()\fR\|) that describes buffer limits is -1. Then the underlying service provider can support a buffer of unlimited size.  If this is the case, \fBt_alloc()\fR will allocate a buffer with the default size 1024 bytes, which may be handled as described in the next paragraph.
.sp
.LP
If the underlying service provider supports a buffer of unlimited size in the \fBnetbuf\fR structure (see \fBt_connect\fR(3NSL)), \fBt_alloc()\fR will return a buffer of size 1024 bytes. If a larger size buffer is required, it will need to be allocated separately using a memory allocation routine such as \fBmalloc\fR(3C). The \fBbuf\fR and \fBmaxlen\fR fields of the \fBnetbuf\fR data structure can then be updated with the address of the new buffer and the 1024 byte buffer originally allocated by \fBt_alloc()\fR can be freed using \fBfree\fR(3C). 
.sp
.LP
Assume that the value associated with any field of \fBstruct\fR \fBt_info\fR (argument returned by \fBt_open()\fR or \fBt_getinfo()\fR \fB\|)\fR that describes nbuffer limits is \fB-2\fR\&. Then \fBt_alloc()\fR will set the buffer pointer to \fINULL\fR and the buffer maximum size to \fB0\fR, and then will return success (see \fBt_open\fR(3NSL) or \fBt_getinfo\fR(3NSL)). 
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5)  for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
\fBfree\fR(3C), \fBmalloc\fR(3C), \fBt_connect\fR(3NSL), \fBt_free\fR(3NSL), \fBt_getinfo\fR(3NSL), \fBt_open\fR(3NSL), \fBattributes\fR(5) 
