'\" te
.\"  Copyright 1994, The X/Open Company Ltd., All Rights Reserved. Portions Copyright 1989 AT&T. Portions Copyright (c) 1998, Sun Microsystems, Inc. , All Rights Reserved 
.\"  Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at  http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material. 
.TH t_connect 3NSL "7 May 1998" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
t_connect \- establish a connection with another transport user
.SH SYNOPSIS
.LP
.nf
#include <xti.h>

\fBint\fR \fBt_connect\fR(\fBint\fR \fIfd\fR, \fBconst struct t_call *\fR\fIsndcall\fR,
     \fBstruct t_call *\fR\fIrcvcall\fR);
.fi

.SH DESCRIPTION
.sp
.LP
This routine is part of the \fBXTI\fR interfaces which evolved from the \fBTLI\fR interfaces. \fBXTI\fR represents the future evolution of these interfaces. However, \fBTLI\fR interfaces are supported for compatibility. When using a \fBTLI\fR routine that has the same name as an \fBXTI\fR routine, the  \fBtiuser.h\fR header file must be used.  Refer to the  \fBTLI\fR \fBCOMPATIBILITY\fR section for a description of differences between the two interfaces. This function enables a transport user to request a connection to the specified destination transport user.
.sp
.LP
This function can only be issued in the  \fBT_IDLE\fR state. The parameter \fIfd\fR identifies the local transport endpoint where communication will be established, while \fIsndcall\fR and \fIrcvcall\fR point to a \fBt_call\fR structure which contains the following members:
.sp
.in +2
.nf
struct netbuf addr;
struct netbuf opt;
struct netbuf udata;
int sequence;
.fi
.in -2

.sp
.LP
The parameter \fIsndcall\fR specifies information needed by the transport provider to establish a connection and \fIrcvcall\fR specifies information that is associated with the newly established connection.
.sp
.LP
In \fIsndcall\fR, \fIaddr\fR specifies the protocol address of the destination transport user, \fIopt\fR presents any protocol-specific information that might be needed by the transport provider, \fIudata\fR points to optional user data that may be passed to the destination transport user during connection establishment, and \fIsequence\fR has no meaning for this function.
.sp
.LP
On return, in \fIrcvcall\fR, \fIaddr\fR contains the protocol address associated with the responding transport endpoint, \fIopt\fR represents any protocol-specific information associated with the connection, \fIudata\fR points to optional user data that may be returned by the destination transport user during connection establishment, and \fIsequence\fR has no meaning for this function.
.sp
.LP
The \fIopt\fR argument permits users to define the options that may be passed to the transport provider. The user may choose not to negotiate protocol options by setting the \fIlen\fR field of \fIopt\fR to zero. In this case, the provider uses the option values currently set for the communications endpoint.
.sp
.LP
If used, \fIsndcall\(->opt.buf\fR must point to a buffer with the corresponding options, and  \fIsndcall\(->opt.len\fR must specify its length. The \fImaxlen\fR and \fIbuf\fR fields of the \fBnetbuf\fR structure pointed by \fIrcvcall\(->addr\fR and \fIrcvcall\(->opt\fR must be set before the call.
.sp
.LP
The \fIudata\fR argument enables the caller to pass user data to the destination transport user and receive user data from the destination user during connection establishment. However, the amount of user data must not exceed the limits supported by the transport provider as returned in the \fIconnect\fR field of the \fIinfo\fR argument of \fBt_open\fR(3NSL) or \fBt_getinfo\fR(3NSL). If the \fIlen\fR of \fIudata\fR is zero in \fIsndcall\fR, no data will be sent to the destination transport user.
.sp
.LP
On return, the \fIaddr\fR, \fIopt\fR and \fIudata\fR fields of \fIrcvcall\fR will be updated to reflect values associated with the connection. Thus, the \fImaxlen\fR field of each argument must be set before issuing this function to indicate the maximum size of the buffer for each. However, \fImaxlen\fR can be set to zero, in which case no information to this specific argument is given to the user on the return from  \fBt_connect()\fR. If maxlen is greater than zero and less than the length of the value,  \fBt_connect()\fR fails with  \fBt_errno\fR set to \fBTBUFOVFLW\fR. If  \fIrcvcall\fR is set to  \fINULL,\fR no information at all is returned.
.sp
.LP
By default, \fBt_connect()\fR executes in synchronous mode, and will wait for the destination user's response before returning control to the local user. A successful return (that is, return value of zero) indicates that the requested connection has been established. However, if  \fBO_NONBLOCK\fR is set  by means of \fBt_open\fR(3NSL) or \fBfcntl\fR(2), \fBt_connect()\fR executes in asynchronous mode. In this case, the call will not wait for the remote user's response, but will return control immediately to the local user and return  -1 with \fBt_errno\fR set to \fBTNODATA\fR to indicate that the connection has not yet been established. In this way, the function simply initiates the connection establishment procedure by sending a connection request to the destination transport user. The \fBt_rcvconnect\fR(3NSL) function is used in conjunction with \fBt_connect()\fR to determine the status of the requested connection.
.sp
.LP
When a synchronous \fBt_connect()\fR call is interrupted by the arrival of a signal, the state of the corresponding transport endpoint is  \fBT_OUTCON,\fR allowing a further call to either \fBt_rcvconnect\fR(3NSL), \fBt_rcvdis\fR(3NSL) or \fBt_snddis\fR(3NSL). When an asynchronous  \fBt_connect()\fR call is interrupted by the arrival of a signal,  the state of the corresponding transport endpoint is  \fBT_IDLE.\fR 
.SH RETURN VALUES
.sp
.LP
Upon successful completion, a value of  \fB0\fR is returned.  Otherwise, a value of  -1 is returned and \fBt_errno\fR is set to indicate an error.
.SH VALID STATES
.sp
.LP
\fBT_IDLE\fR
.SH ERRORS
.sp
.LP
On failure, \fBt_errno\fR is set to one of the following:
.sp
.ne 2
.mk
.na
\fB\fBTACCES\fR\fR
.ad
.RS 15n
.rt  
The user does not have permission to use the specified address or options.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTADDRBUSY\fR\fR
.ad
.RS 15n
.rt  
This transport provider does not support multiple connections with the same local and remote addresses. This error indicates that a connection already exists.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTBADADDR\fR\fR
.ad
.RS 15n
.rt  
The specified protocol address was in an incorrect format or contained illegal information.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTBADDATA\fR\fR
.ad
.RS 15n
.rt  
The amount of user data specified was not within the bounds allowed by the transport provider.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTBADF\fR\fR
.ad
.RS 15n
.rt  
The specified file descriptor does not refer to a transport endpoint.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTBADOPT\fR\fR
.ad
.RS 15n
.rt  
The specified protocol options were in an incorrect format or contained illegal information.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTBUFOVFLW\fR\fR
.ad
.RS 15n
.rt  
The number of bytes allocated for an incoming argument \fI(maxlen)\fR is greater than 0 but not sufficient to store the value of that argument. If executed in synchronous mode, the provider's state, as seen by the user, changes to \fBT_DATAXFER,\fR and the information to be returned in \fIrcvcall\fR is discarded.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTLOOK\fR\fR
.ad
.RS 15n
.rt  
An asynchronous event has occurred on this transport endpoint and requires immediate attention.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTNODATA\fR\fR
.ad
.RS 15n
.rt  
\fBO_NONBLOCK\fR was set, so the function successfully initiated the connection establishment procedure, but did not wait for a response from the remote user.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTNOTSUPPORT\fR\fR
.ad
.RS 15n
.rt  
This function is not supported by the underlying transport provider.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTOUTSTATE\fR\fR
.ad
.RS 15n
.rt  
The communications endpoint referenced by  \fIfd\fR is not in one of the states in which a call to this function is valid.
.RE

.sp
.ne 2
.mk
.na
\fB\fBTPROTO\fR\fR
.ad
.RS 15n
.rt  
This error indicates that a communication problem has been detected between XTI and the transport provider for which there is no other suitable XTI error \fB(t_errno)\fR. 
.RE

.sp
.ne 2
.mk
.na
\fB\fBTSYSERR\fR\fR
.ad
.RS 15n
.rt  
A system error has occurred during execution of this function.
.RE

.SH TLI COMPATIBILITY
.sp
.LP
The \fBXTI\fR and \fBTLI\fR interface definitions have common names but use different header files. This, and other semantic differences between the two interfaces are described in the subsections below.
.SS "Interface Header"
.sp
.LP
The \fBXTI\fR interfaces use the header file, \fBxti.h\fR. \fBTLI\fR interfaces should \fInot\fR use this header.  They should use the header: 
.sp
.in +2
.nf
#include <tiuser.h>
.fi
.in -2

.SS "Error Description Values"
.sp
.LP
The \fBTPROTO\fR and \fBTADDRBUSY\fR \fBt_errno\fR values can be set by the \fBXTI\fR interface but not by the \fBTLI\fR interface.
.sp
.LP
A \fBt_errno\fR value that this routine can return under different circumstances than its \fBXTI\fR counterpart is \fBTBUFOVFLW\fR. It can be returned even when the \fBmaxlen\fR field of the corresponding buffer has been set to zero.
.SS "Option Buffers"
.sp
.LP
The format of the options in an \fBopt\fR buffer is dictated by the transport provider. Unlike the \fBXTI\fR interface, the \fBTLI\fR interface does not fix the buffer format.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5)  for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
\fBfcntl\fR(2), \fBt_accept\fR(3NSL), \fBt_alloc\fR(3NSL), \fBt_getinfo\fR(3NSL), \fBt_listen\fR(3NSL), \fBt_open\fR(3NSL), \fBt_optmgmt\fR(3NSL), \fBt_rcvconnect\fR(3NSL), \fBt_rcvdis\fR(3NSL), \fBt_snddis\fR(3NSL), \fBattributes\fR 
