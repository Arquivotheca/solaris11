'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"  Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at  http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material. 
.TH sem_wait 3C "5 Feb 2008" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
sem_wait, sem_trywait \- acquire or wait for a semaphore
.SH SYNOPSIS
.LP
.nf
#include <semaphore.h>

\fBint\fR \fBsem_wait\fR(\fBsem_t *\fR\fIsem\fR);
.fi

.LP
.nf
\fBint\fR \fBsem_trywait\fR(\fBsem_t *\fR\fIsem\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBsem_wait()\fR function locks the semaphore referenced by \fIsem\fR by performing a semaphore lock operation on that semaphore. If the semaphore value is currently zero, then the calling thread  will not return from the call to \fBsem_wait()\fR until it either locks the semaphore or the call is interrupted by a signal. The \fBsem_trywait()\fR function locks the semaphore referenced by \fIsem\fR only if the semaphore is currently not locked; that is, if the semaphore value is currently positive. Otherwise, it does not lock the semaphore.
.sp
.LP
Upon successful return, the state of the semaphore is locked and remains locked until the \fBsem_post\fR(3C) function is executed and returns successfully.
.sp
.LP
The \fBsem_wait()\fR function is interruptible by the delivery of a signal.
.SH RETURN VALUES
.sp
.LP
The \fBsem_wait()\fR and \fBsem_trywait()\fR functions return  \fB0\fR if the calling process successfully performed the semaphore lock operation on the semaphore designated by \fIsem\fR. If the call was unsuccessful, the state of the semaphore is unchanged, and the function returns \fB\(mi1\fR and sets \fBerrno\fR to indicate the error.
.SH ERRORS
.sp
.LP
The  \fBsem_wait()\fR and \fBsem_trywait()\fR functions will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR \fR
.ad
.RS 11n
.rt  
The \fIsem\fR function does not refer to a valid semaphore.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOSYS\fR \fR
.ad
.RS 11n
.rt  
The \fBsem_wait()\fR and \fBsem_trywait()\fR functions are not supported by the system.
.RE

.sp
.LP
The  \fBsem_trywait()\fR function will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEAGAIN\fR \fR
.ad
.RS 11n
.rt  
The semaphore was already locked, so it cannot be immediately locked by the \fBsem_trywait()\fR operation.
.RE

.sp
.LP
The  \fBsem_wait()\fR and \fBsem_trywait()\fR functions may fail if:
.sp
.ne 2
.mk
.na
\fB\fBEDEADLK\fR \fR
.ad
.RS 12n
.rt  
A deadlock condition was detected; that is, two separate processes are waiting for an available resource to be released via a semaphore "held" by the other process.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEINTR\fR \fR
.ad
.RS 12n
.rt  
A signal interrupted this function.
.RE

.SH USAGE
.sp
.LP
Realtime applications may encounter priority inversion when using semaphores. The problem occurs when a high priority thread "locks" (that is, waits on) a semaphore that is about to be "unlocked" (that is, posted) by a low priority thread, but the low priority thread is preempted by a medium priority thread. This scenario leads to priority inversion; a high priority thread is blocked by lower priority threads for an unlimited period of time. During system design, realtime programmers must take into account the possibility of this kind of priority inversion. They can deal with it in a number of ways, such as by having critical sections that are guarded by semaphores execute at a high priority, so that a thread cannot be preempted while executing in its critical section.
.SH EXAMPLES
.LP
\fBExample 1 \fRThe customer waiting-line in a bank may be analogous to the synchronization scheme of a semaphore utilizing \fBsem_wait()\fR and \fBsem_trywait()\fR: 
.sp
.in +2
.nf
#include <errno.h>
#define TELLERS 10
sem_t  bank_line;      /* semaphore */
int banking_hours(), deposit_withdrawal;
void *customer(), do_business(), skip_banking_today();
thread_t tid;
\&...
 
sem_init(&bank_line,TRUE,TELLERS);  /* 10 tellers 
                                       available */
while(banking_hours())
        thr_create(NULL, NULL, customer, 
            (void *)deposit_withdrawal, THREAD_NEW_LWP, &tid);
\&...
 
void *
customer(deposit_withdrawal)
void *deposit_withdrawal;
{
    int this_customer, in_a_hurry = 50;
    this_customer = rand() % 100;
    if (this_customer == in_a_hurry)  {
        if (sem_trywait(&bank_line) != 0)
        if (errno == EAGAIN) {    /* no teller available */
            skip_banking_today(this_customer);
            return;
        }     /*else go immediately to available teller 
               & decrement bank_line*/
    }
    else
        sem_wait(&bank_line); /* wait for next teller, 
             then proceed, and decrement bank_line */
    do_business((int *)deposit_withdrawal);
    sem_getvalue(&bank_line,&num_tellers);
    sem_post(&bank_line); /* increment bank_line; 
        this_customer's teller is now available */
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
\fBsem_post\fR(3C), \fBattributes\fR(5), \fBstandards\fR(5)
