'\" te
.\" Copyright (c) 2001, The IEEE and The Open Group. All Rights Reserved.
.\" Portions Copyright (c) 2003, Sun Microsystems, Inc. All Rights Reserved.
.TH strfmon 3C "24 Jan 2008" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
strfmon \- convert monetary value to string
.SH SYNOPSIS
.LP
.nf
#include <monetary.h> 

\fBssize_t\fR \fBstrfmon\fR(\fBchar *restrict\fR \fIs\fR, \fBsize_t\fR \fImaxsize\fR,
     \fBconst char *restrict\fR \fIformat\fR...);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBstrfmon()\fR function places characters into the array pointed to by \fIs\fR as controlled by the string pointed to by \fIformat\fR. No more than \fImaxsize\fR bytes are placed into the array.
.sp
.LP
The format is a character string that contains two types of objects: plain characters, which are simply copied to the output stream, and conversion specifications, each of which results in the fetching of zero or more arguments which are converted and formatted. The results are undefined if there are insufficient arguments for the format. If the format is exhausted while arguments remain, the excess arguments are simply ignored.
.sp
.LP
A conversion specification consists of the following sequence:
.RS +4
.TP
.ie t \(bu
.el o
a % character
.RE
.RS +4
.TP
.ie t \(bu
.el o
optional flags
.RE
.RS +4
.TP
.ie t \(bu
.el o
optional field width
.RE
.RS +4
.TP
.ie t \(bu
.el o
optional left precision
.RE
.RS +4
.TP
.ie t \(bu
.el o
optional right precision
.RE
.RS +4
.TP
.ie t \(bu
.el o
a required conversion character that determines the conversion to be performed.
.RE
.SS "Flags"
.sp
.LP
One or more of the following optional flags can be specified to control the conversion:
.sp
.ne 2
.mk
.na
\fB=\fIf\fR\fR
.ad
.RS 10n
.rt  
An = followed by a single character \fIf\fR which is used as the numeric fill character. The fill character must be representable in a single byte in order to work with precision and width counts. The default numeric fill character is the space character. This flag does not affect field width filling which always uses the space character. This flag is ignored unless a left precision (see below) is specified.
.RE

.sp
.ne 2
.mk
.na
\fB^\fR
.ad
.RS 10n
.rt  
Do not format the currency amount with grouping characters. The default is to insert the grouping characters if defined for the current locale.
.RE

.sp
.ne 2
.mk
.na
\fB+ or (\fR
.ad
.RS 10n
.rt  
Specify the style of representing positive and negative currency amounts. Only one of `+' or `(' may be specified. If `+' is specified, the locale's equivalent of + and `\(mi' are used. If `(' is specified, negative amounts are enclosed within parentheses. If neither flag is specified, the `+' style is used.
.RE

.sp
.ne 2
.mk
.na
\fB!\fR
.ad
.RS 10n
.rt  
Suppress the currency symbol from the output conversion.
.RE

.sp
.ne 2
.mk
.na
\fB\(mi\fR
.ad
.RS 10n
.rt  
Specify the alignment.  If this flag is present all fields are  left-justified (padded to the right) rather than right-justified.
.RE

.SS "Field Width"
.sp
.ne 2
.mk
.na
\fB\fIw\fR\fR
.ad
.RS 5n
.rt  
A decimal digit string \fIw\fR specifying a minimum field width in bytes in which the result of the conversion is right-justified  (or left-justified if the flag `\(mi' is specified). The default is zero.
.RE

.SS "Left Precision"
.sp
.ne 2
.mk
.na
\fB#\fIn\fR\fR
.ad
.RS 6n
.rt  
A `#' followed by a decimal digit string \fIn\fR specifying a maximum number of digits expected to be formatted to the left of the radix character. This option can be used to keep the formatted output from multiple calls to the \fBstrfmon()\fR aligned in the same columns. It can also be used to fill unused positions with a special character as in \fB$***123.45\fR. This option causes an amount to be formatted as if it has the number of digits specified by \fIn\fR. If more than \fIn\fR digit positions are required, this conversion specification is ignored. Digit positions in excess of those actually required are filled with the numeric fill character (see the =\fIf\fR flag above).
.sp
If grouping has not been suppressed with the `^' flag, and it is defined for the current locale, grouping separators are inserted before the fill characters (if any) are added. Grouping separators are not applied to fill characters even if the fill character is a digit.
.sp
To ensure alignment, any characters appearing before or after the number in the formatted output such as currency or sign symbols are padded as necessary with space characters to make their positive and negative formats an equal length.
.RE

.SS "Right Precision"
.sp
.ne 2
.mk
.na
\fB\&.\fIp\fR\fR
.ad
.RS 8n
.rt  
A period followed by a decimal digit string \fIp\fR specifying the number of digits after the radix character. If the value of the right precision \fIp\fR is zero, no radix character appears. If a right precision is not included, a default specified by the current locale is used. The amount being formatted is rounded to the specified number of digits prior to formatting.
.RE

.SS "Conversion Characters"
.sp
.LP
The conversion characters and their meanings are:
.sp
.ne 2
.mk
.na
\fBi\fR
.ad
.RS 5n
.rt  
The  \fBdouble\fR argument is formatted according to the locale's international currency format (for example, in the U.S.A.: USD 1,234.56).
.RE

.sp
.ne 2
.mk
.na
\fBn\fR
.ad
.RS 5n
.rt  
The \fBdouble\fR argument is formatted according to the locale's national currency format (for example, in the U.S.A.: $1,234.56).
.RE

.sp
.ne 2
.mk
.na
\fB%\fR
.ad
.RS 5n
.rt  
Convert to a % no argument is converted.   The entire conversion specification must be %%.
.RE

.SS "Locale Information"
.sp
.LP
The \fBLC_MONETARY\fR category of the program's locale affects the behavior of this function including the monetary radix character (which may be different from the numeric radix character affected by the \fBLC_NUMERIC\fR category), the grouping separator, the currency symbols and formats. The international currency symbol should be in conformance with the \fBISO\fR 4217: 1987 standard.
.SH RETURN VALUES
.sp
.LP
If the total number of resulting bytes (including the terminating null byte) is not more than  \fImaxsize\fR, \fBstrfmon()\fR returns the number of bytes placed into the array pointed to by \fIs\fR, not including the terminating null byte. Otherwise, \fB\(mi1\fR is returned, the contents of the array are indeterminate, and \fBerrno\fR is set to indicate the error.
.SH ERRORS
.sp
.LP
The \fBstrfmon()\fR function will fail if:
.sp
.ne 2
.mk
.na
\fB\fBENOSYS\fR\fR
.ad
.RS 10n
.rt  
The function is not supported.
.RE

.sp
.ne 2
.mk
.na
\fB\fBE2BIG\fR\fR
.ad
.RS 10n
.rt  
Conversion stopped due to lack of space in the buffer.
.RE

.SH USAGE
.sp
.LP
The behavior of \fBstrfmon()\fR in an SUSv3-conforming application differs from its behavior in a non-conforming application as follows:
.RS +4
.TP
.ie t \(bu
.el o
With the conversion '\fBi\fR', \fBstrfmon()\fR uses information set to \fBint_p_cs_precedes\fR, \fBint_n_cs_precedes\fR, \fBint_p_sep_by_space\fR, \fBint_n_sep_by_space\fR, \fBint_p_sign_posn\fR, and \fBint_n_sign_posn\fR of the current locale instead of \fBp_cs_precedes\fR, \fBn_cs_precedes\fR, \fBp_sep_by_space\fR, \fBn_sep_by_space\fR, \fBp_sign_posn\fR, and \fBn_sign_posn\fR, respectively.
.RE
.RS +4
.TP
.ie t \(bu
.el o
With the conversion '\fBi\fR', \fBstrfmon()\fR uses the fourth character of the string set to \fBint_curr_symbol\fR of the current locale instead of a space for\fBint_p_sep_by_space\fR and \fBint_n_sep_by_space\fR.
.RE
.RS +4
.TP
.ie t \(bu
.el o
When the value of \fBp_sep_by_space\fR, \fBn_sep_by_space\fR, \fBint_p_sep_by_space\fR, or \fBint_n_sep_by_space\fR is set to 2 in the current locale, \fBstrfmon()\fR separates the currency symbol from the sign string by a space, if adjacent; otherwise, \fBstrfmon()\fR separates the sign string from the value by a space.
.RE
.SH EXAMPLES
.LP
\fBExample 1 \fRA sample output of \fBstrfmon()\fR.
.sp
.LP
Given a locale for the U.S.A. and the values 123.45, \(mi123.45, and 3456.781:

.sp

.sp
.TS
tab() box;
cw(1.79i) cw(1.49i) cw(2.22i) 
cw(1.79i) cw(1.49i) cw(2.22i) 
.
\fBConversion\fR\fBOutput\fR\fBComments\fR
\fBSpecification\fR
_
%n    $123.45default formatting
   -$123.45
  $3,456.78
_
%11n    $123.45right align within an 11 
   -$123.45character field
  $3,456.78
_
%#5n    $123.45aligned columns for values  
   -$123.45up to 99,999
  $3,456.78
_
%=*#5n $***123.45specify a fill character
-$***123.45
 $*3,456.78
_
%=0#5n $000123.45fill characters do not use 
-$000123.45grouping even if the fill 
 $03,456.78character is a digit
_
%^#5n    $123.45disable the grouping 
   -$123.45separator
   $3456.78
_
%^#5.0n    $123round off to whole units
   -$123
   $3457
_
%^#5.4n    $123.4500increase the precision
   -$123.4500
   $3456.7810
_
%(#5n     123.45 use an alternative 
   ($123.45)pos/neg style
  $3,456.78 
_
%!(#5n     123.45 disable the currency 
    (123.45)symbol
   3,456.78
.TE

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
CSIEnabled
_
Interface StabilityCommitted
_
MT-LevelMT-Safe with exceptions
_
StandardSee \fBstandards\fR(5).
.TE

.sp
.LP
Th \fBstrfmon()\fR function can be used safely in multithreaded applications, as long as \fBsetlocale\fR(3C) is not called to change the locale.
.SH SEE ALSO
.sp
.LP
\fBlocaleconv\fR(3C), \fBsetlocale\fR(3C), \fBattributes\fR(5), \fBstandards\fR(5)
