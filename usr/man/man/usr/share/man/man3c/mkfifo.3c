'\" te
.\" Copyright (c) 2002, 2010, Oracle and/or its affiliates. All rights reserved.
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 2001, the Institute of Electrical and Electronics Engineers, Inc. and The Open Group. All Rights Reserved.
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at  http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material.
.TH mkfifo 3C "6 Jul 2010" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
mkfifo, mkfifoat \- make a FIFO special file
.SH SYNOPSIS
.LP
.nf
#include <sys/stat.h>

\fBint\fR \fBmkfifo\fR(\fBconst char *\fR\fIpath\fR, \fBmode_t\fR \fImode\fR);
.fi

.LP
.nf
int mkfifoat(int \fIfd\fR, const char *\fIpath\fR, mode_t \fImode\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBmkfifo()\fR function creates a new FIFO special file named by the pathname pointed to by \fIpath\fR.  The file permission bits of the new FIFO are initialized from \fImode\fR.  The file permission bits of the \fImode\fR argument are modified by the process's file creation mask (see \fBumask\fR(2)). Bits other than the file permission bits in \fImode\fR are ignored.
.sp
.LP
If \fIpath\fR names a symbolic link, \fBmkfifo()\fR fails and sets \fBerrno\fR to \fBEEXIST\fR.
.sp
.LP
The FIFO's user ID is set to the process's effective user ID. The FIFO's group ID is set to the group ID of the parent directory or to the effective group ID of the process.
.sp
.LP
The \fBmkfifo()\fR function calls \fBmknod\fR(2) to create the file.
.sp
.LP
Upon successful completion, \fBmkfifo()\fR marks for update the \fBst_atime\fR, \fBst_ctime\fR, and \fBst_mtime\fR fields of the file. Also, the \fBst_ctime\fR and \fBst_mtime\fR fields of the directory that contains the new entry are marked for update.
.sp
.LP
The \fBmkfifoat()\fR function is equivalent to \fBmkfifo()\fR except in the case where \fIpath\fR specifies a relative path. In this case the newly created FIFO is created relative to the directory associated with the file descriptor \fIfd\fR instead of the current working directory. If the file descriptor was opened without \fBO_SEARCH\fR, the function checks whether directory searches are permitted using the current permissions of the directory underlying the file descriptor. If the file descriptor was opened with \fBO_SEARCH\fR, the function does not perform the check
.sp
.LP
If \fBmkfifoat()\fR is passed the special value \fBAT_FDCWD\fR in the \fIfd\fR parameter, the current working directory is used and the is be identical to a call to \fBmkfifo()\fR.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, \fB0\fR is returned.  Otherwise, \fB\(mi1\fR is returned and \fBerrno\fR is set to indicate the error.
.SH ERRORS
.sp
.LP
The \fBmkfifo()\fR and \fBmkfifoat()\fR functions will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEACCES\fR\fR
.ad
.RS 16n
.rt  
A component of the path prefix denies search permission, or write permission is denied on the parent directory of the FIFO to be created.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEEXIST\fR\fR
.ad
.RS 16n
.rt  
The named file already exists.
.RE

.sp
.ne 2
.mk
.na
\fB\fBELOOP\fR\fR
.ad
.RS 16n
.rt  
A loop exists in symbolic links encountered during resolution of the \fIpath\fR argument.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENAMETOOLONG\fR\fR
.ad
.RS 16n
.rt  
The length of the \fIpath\fR argument exceeds {\fBPATH_MAX\fR} or a pathname component is longer than {\fBNAME_MAX\fR}.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOENT\fR\fR
.ad
.RS 16n
.rt  
A component of the path prefix specified by \fIpath\fR does not name an existing directory or \fIpath\fR is an empty string.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOSPC\fR\fR
.ad
.RS 16n
.rt  
The directory that would contain the new file cannot be extended or the file system is out of file-allocation resources.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOTDIR\fR\fR
.ad
.RS 16n
.rt  
A component of the path prefix is not a directory.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEROFS\fR\fR
.ad
.RS 16n
.rt  
The named file resides on a read-only file system.
.RE

.sp
.LP
The \fBmkfifoat()\fR functions will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEACCES\fR\fR
.ad
.RS 10n
.rt  
\fIfd\fR was not opened with \fBO_SEARCH\fR and the permissions of the directory underlying \fIfd\fR do not permit directory searches.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEBADF\fR\fR
.ad
.RS 10n
.rt  
The \fIpath\fR argument does not specify an absolute path and the \fIfd\fR argument is neither \fBAT_FDCWD\fR nor a valid file descriptor open for reading or searching.
.RE

.sp
.LP
The \fBmkfifo()\fR and \fBmkfifoat()\fR functions may fail if:
.sp
.ne 2
.mk
.na
\fB\fBELOOP\fR\fR
.ad
.RS 16n
.rt  
Too many symbolic links were encountered in resolving \fIpath\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENAMETOOLONG\fR\fR
.ad
.RS 16n
.rt  
The length of the \fIpath\fR argument exceeds {\fBPATH_MAX\fR} or a pathname component is longer than {\fBNAME_MAX\fR}.
.RE

.sp
.LP
The \fBmkfifoat()\fR functions may fail if:
.sp
.ne 2
.mk
.na
\fB\fBENOTDIR\fR\fR
.ad
.RS 11n
.rt  
The \fIpath\fR argument is not an absolute path and \fIfd\fR is neither \fBAT_FDCWD\fR nor a file descriptor associated with a directory.
.RE

.SH EXAMPLES
.LP
\fBExample 1 \fRCreate a FIFO File
.sp
.LP
The following example demonstrates how to create a FIFO file named \fB/home/cnd/mod_done\fR with read and write permissions for the owner and read permissions for the group and others.

.sp
.in +2
.nf
#include sys/stat.h>
int status;
\&...
status = mkfifo("/home/cnd/mod_done", S_IWUSR | S_IRUSR |
        S_IRGRP | S_IROTH);
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
\fBmkdir\fR(1), \fBchmod\fR(2), \fBexec\fR(2), \fBmknod\fR(2), \fBumask\fR(2), \fBstat.h\fR(3HEAD), \fBufs\fR(7FS), \fBattributes\fR(5), \fBstandards\fR(5)
