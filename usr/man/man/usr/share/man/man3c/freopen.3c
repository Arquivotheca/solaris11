'\" te
.\" Copyright (c) 2002, 2011, Oracle and/or its affiliates. All rights reserved.
.\" Portions Copyright (c) 1992, X/Open Company Limited  All Rights Reserved
.\"  Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at  http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material. 
.TH freopen 3C "24 Jul 2002" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
freopen \- open a stream
.SH SYNOPSIS
.LP
.nf
#include <stdio.h>

\fBFILE *\fR\fBfreopen\fR(\fBconst char *\fR\fIfilename\fR, \fBconst char *\fR\fImode\fR, \fBFILE *\fR\fIstream\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBfreopen()\fR function first attempts to flush the stream and close any file descriptor associated with \fIstream\fR. Failure to flush or close the file successfully is ignored. The error and end-of-file indicators for the stream are cleared.
.sp
.LP
The \fBfreopen()\fR function opens the file whose pathname is the string pointed to by \fIfilename\fR and associates the stream pointed to by \fIstream\fR with it. The \fImode\fR argument is used just as in \fBfopen\fR(3C).
.sp
.LP
If \fIfilename\fR is a null pointer and the application conforms to SUSv3 (see \fBstandards\fR(5)), the \fBfreopen()\fR function attempts to change the mode of the stream to that specified by \fImode\fR, as though the name of the file currently associated with the \fIstream\fR had been used.  The following changes of mode are permitted, depending upon the access mode of the file descriptor underlying the stream:
.RS +4
.TP
.ie t \(bu
.el o
When \fB+\fR is specified, the file descriptor mode must be \fBO_RDWR\fR.
.RE
.RS +4
.TP
.ie t \(bu
.el o
When \fBr\fR is specified, the file descriptor mode must be \fBO_RDONLY\fR or \fBO_RDWR\fR.
.RE
.RS +4
.TP
.ie t \(bu
.el o
When \fBa\fR or \fBw\fR is specified, the file descriptor mode must be \fBO_WRONLY\fR or \fBO_RDWR\fR.
.RE
.sp
.LP
If the filename is a null pointer and the application does not conform to SUSv3, \fBfreopen()\fR returns a null pointer.
.sp
.LP
The original stream is closed regardless of whether the subsequent open succeeds.
.sp
.LP
After a successful call to the \fBfreopen()\fR function, the orientation of the stream is cleared, the encoding rule is cleared, and the associated \fBmbstate_t\fR object is set to describe an initial conversion state.
.sp
.LP
The largest value that can be represented correctly in an object of type \fBoff_t\fR will be established as the offset maximum in the open file description.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, \fBfreopen()\fR returns the value of \fIstream\fR. Otherwise, a null pointer is returned and \fBerrno\fR is set to indicate the error.
.SH ERRORS
.sp
.LP
The \fBfreopen()\fR function will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEACCES\fR\fR
.ad
.RS 16n
.rt  
Search permission is denied on a component of the path prefix, or the file exists and the permissions specified by \fImode\fR are denied, or the file does not exist and write permission is denied for the parent directory of the file to be created.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEBADF\fR\fR
.ad
.RS 16n
.rt  
The application conforms to SUSv3, the \fIfilename\fR argument is a null pointer, and either the underlying file descriptor is not valid or the mode specified when the underlying file descriptor was opened does not support the file access modes requested by the \fImode\fR argument.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEFAULT\fR\fR
.ad
.RS 16n
.rt  
The application does not conform to SUSv3 and the \fIfilename\fR argument is a null pointer.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEINTR\fR\fR
.ad
.RS 16n
.rt  
A signal was caught during \fBfreopen()\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEISDIR\fR\fR
.ad
.RS 16n
.rt  
The named file is a directory and \fImode\fR requires write access.
.RE

.sp
.ne 2
.mk
.na
\fB\fBELOOP\fR\fR
.ad
.RS 16n
.rt  
Too many symbolic links were encountered in resolving \fIpath\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEMFILE\fR\fR
.ad
.RS 16n
.rt  
There are {\fBOPEN_MAX\fR} file descriptors currently open in the calling process.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENAMETOOLONG\fR\fR
.ad
.RS 16n
.rt  
The length of the \fIfilename\fR exceeds {\fIPATH_MAX\fR} or a pathname component is longer than {\fINAME_MAX\fR}.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENFILE\fR\fR
.ad
.RS 16n
.rt  
The maximum allowable number of files is currently open in the system.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOENT\fR\fR
.ad
.RS 16n
.rt  
A component of \fIfilename\fR does not name an existing file or \fIfilename\fR is an empty string.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOSPC\fR\fR
.ad
.RS 16n
.rt  
The directory or file system that would contain the new file cannot be expanded, the file does not exist, and it was to be created.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOTDIR\fR\fR
.ad
.RS 16n
.rt  
A component of the path prefix is not a directory.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENXIO\fR\fR
.ad
.RS 16n
.rt  
The named file is a character special or block special file, and the device associated with this special file does not exist.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEOVERFLOW\fR\fR
.ad
.RS 16n
.rt  
The current value of the file position cannot be represented correctly in an object of type \fBoff_t\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEROFS\fR\fR
.ad
.RS 16n
.rt  
The named file resides on a read-only file system and \fImode\fR requires write access.
.RE

.sp
.LP
The \fBfreopen()\fR function may fail if:
.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 16n
.rt  
The value of the \fImode\fR argument is not valid.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENAMETOOLONG\fR\fR
.ad
.RS 16n
.rt  
Pathname resolution of a symbolic link produced an intermediate result whose length exceeds {\fIPATH_MAX\fR}.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOMEM\fR\fR
.ad
.RS 16n
.rt  
Insufficient storage space is available.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENXIO\fR\fR
.ad
.RS 16n
.rt  
A request was made of a non-existent device, or the request was outside the capabilities of the device.
.RE

.sp
.ne 2
.mk
.na
\fB\fBETXTBSY\fR\fR
.ad
.RS 16n
.rt  
The file is a pure procedure (shared text) file that is being executed and \fImode\fR requires write access.
.RE

.SH USAGE
.sp
.LP
The \fBfreopen()\fR function is typically used to attach the preopened \fIstreams\fR associated with \fBstdin\fR, \fBstdout\fR and \fBstderr\fR to other files. By default \fBstderr\fR is unbuffered, but the use of \fBfreopen()\fR will cause it to become buffered or line-buffered.
.sp
.LP
The \fBfreopen()\fR function has a transitional interface for 64-bit file offsets.  See \fBlf64\fR(5).
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
\fBfclose\fR(3C), \fBfdopen\fR(3C), \fBfopen\fR(3C), \fBstdio\fR(3C), \fBattributes\fR(5), \fBlf64\fR(5), \fBstandards\fR(5)
