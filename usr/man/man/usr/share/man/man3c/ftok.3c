'\" te
.\"  Copyright 1989 AT&T  Copyright (c) 2002, Sun Microsystems, Inc.  All Rights Reserved  Portions Copyright (c) 1992, X/Open Company Limited  All Rights Reserved
.\"  Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at  http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material. 
.TH ftok 3C "24 Jul 2002" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
ftok \- generate an IPC key
.SH SYNOPSIS
.LP
.nf
#include <sys/ipc.h>

\fBkey_t\fR \fBftok\fR(\fBconst char *\fR\fIpath\fR, \fBint\fR \fIid\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBftok()\fR function returns a key based on \fIpath\fR and \fIid\fR that is usable in subsequent calls to \fBmsgget\fR(2), \fBsemget\fR(2) and \fBshmget\fR(2). The \fIpath\fR argument must be the pathname of an existing file that the process is able to \fBstat\fR(2).
.sp
.LP
The \fBftok()\fR function will return the same key value for all paths that name the same file, when called with the same \fIid\fR value, and will return different key values when called with different \fIid\fR values.
.sp
.LP
If the file named by \fIpath\fR is removed while still referred to by a key, a call to \fBftok()\fR with the same \fIpath\fR and \fIid\fR returns an error. If the same file is recreated, then a call to \fBftok()\fR with the same \fIpath\fR and \fIid\fR is likely to return a different key.
.sp
.LP
Only the low order 8-bits of \fBid\fR are significant.  The behavior of \fBftok()\fR is unspecified if these bits are 0.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, \fBftok()\fR returns a key.  Otherwise, \fBftok()\fR returns \fB(key_t)\(mi1\fR and sets \fBerrno\fR to indicate the error.
.SH ERRORS
.sp
.LP
The \fBftok()\fR function will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEACCES\fR\fR
.ad
.RS 16n
.rt  
Search permission is denied for a component of the path prefix.
.RE

.sp
.ne 2
.mk
.na
\fB\fBELOOP\fR\fR
.ad
.RS 16n
.rt  
Too many symbolic links were encountered in resolving \fIpath\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENAMETOOLONG\fR\fR
.ad
.RS 16n
.rt  
The length of the \fIpath\fR argument exceeds \fB{\fR\fBPATH\fR\fB_MAX}  \fR or a pathname component is longer than \fB{NAME_MAX}\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOENT\fR\fR
.ad
.RS 16n
.rt  
A component of \fIpath\fR does not name an existing file or \fIpath\fR is an empty string.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOTDIR\fR\fR
.ad
.RS 16n
.rt  
A component of the path prefix is not a directory.
.RE

.sp
.LP
The \fBftok()\fR function may fail if:
.sp
.ne 2
.mk
.na
\fB\fBENAMETOOLONG\fR\fR
.ad
.RS 16n
.rt  
Pathname resolution of a symbolic link produced an intermediate result whose length exceeds \fB{PATH_MAX}  \fR.
.RE

.SH USAGE
.sp
.LP
For maximum portability, \fIid\fR should be a single-byte character.
.sp
.LP
Another way to compose keys is to include the project ID in the most significant byte and to use the remaining portion as a sequence number. There are many other ways to form keys, but it is necessary for each system to define standards for forming them. If some standard is not adhered to, it will be possible for unrelated processes to unintentionally interfere with each other's operation. It is still possible to interfere intentionally. Therefore, it is strongly suggested that the most significant byte of a key in some sense refer to a project so that keys do not conflict across a given system.
.SH NOTES
.sp
.LP
Since the \fBftok()\fR function returns a value based on the \fIid\fR given and the file serial number of the file named by \fIpath\fR in a type that is no longer large enough to hold all file serial numbers, it may return the same key for paths naming different files on large filesystems.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
\fBmsgget\fR(2), \fBsemget\fR(2), \fBshmget\fR(2), \fBstat\fR(2), \fBattributes\fR(5), \fBstandards\fR(5)
