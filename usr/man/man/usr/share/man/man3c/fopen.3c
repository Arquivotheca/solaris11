'\" te
.\" Copyright 1989 AT&T.
.\" Copyright (c) 2006, Sun Microsystems, Inc.  All Rights Reserved.
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at  http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material.
.TH fopen 3C "18 Apr 2006" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
fopen \- open a stream
.SH SYNOPSIS
.LP
.nf
#include <stdio.h>

\fBFILE *\fR\fBfopen\fR(\fBconst char *\fR\fIfilename\fR, \fBconst char *\fR\fImode\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBfopen()\fR function opens the file whose pathname is the string pointed to by \fIfilename\fR, and associates a stream with it.
.sp
.LP
The argument \fImode\fR points to a string beginning with one of the following sequences:
.sp
.ne 2
.mk
.na
\fB\fBr\fR or \fBrb\fR\fR
.ad
.RS 20n
.rt  
Open file for reading.
.RE

.sp
.ne 2
.mk
.na
\fB\fBw\fR or \fBwb\fR\fR
.ad
.RS 20n
.rt  
Truncate to  zero  length or create file for writing.
.RE

.sp
.ne 2
.mk
.na
\fB\fBa\fR or \fBab\fR\fR
.ad
.RS 20n
.rt  
Append; open or create file for writing at end-of-file.
.RE

.sp
.ne 2
.mk
.na
\fB\fBr+\fR or \fBrb+\fR or \fBr+b\fR\fR
.ad
.RS 20n
.rt  
Open file for update (reading and writing).
.RE

.sp
.ne 2
.mk
.na
\fB\fBw+\fR or \fBwb+\fR or \fBw+b\fR\fR
.ad
.RS 20n
.rt  
Truncate to zero length or create file for update.
.RE

.sp
.ne 2
.mk
.na
\fB\fBa+\fR or \fBab+\fR or \fBa+b\fR\fR
.ad
.RS 20n
.rt  
Append; open or create file for update, writing at end-of-file.
.RE

.sp
.LP
The character \fBb\fR has no effect, but is allowed for ISO C standard conformance (see \fBstandards\fR(5)). Opening a file with read mode (\fBr\fR as the first character in the \fImode\fR argument) fails if the file does not exist or cannot be read.
.sp
.LP
Opening a file with append mode (\fBa\fR as the first character in the \fImode\fR argument) causes all subsequent writes to the file to be forced to the then current end-of-file, regardless of intervening calls to \fBfseek\fR(3C). If two separate processes open the same file for append, each process may write freely to the file without fear of destroying output being written by the other.  The output from the two processes will be intermixed in the file in the order in which it is written.
.sp
.LP
When a file is opened with update mode (\fB+\fR as the second or third character in the \fImode\fR argument), both input and output may be performed on the associated stream. However, output must not be directly followed by input without an intervening call to \fBfflush\fR(3C) or to a file positioning function ( \fBfseek\fR(3C), \fBfsetpos\fR(3C) or \fBrewind\fR(3C)), and input must not be directly followed by output without an intervening call to a file positioning function, unless the input operation encounters end-of-file.
.sp
.LP
When opened, a stream is fully buffered if and only if it can be determined not to refer to an interactive device. The error and end-of-file indicators for the stream are cleared.
.sp
.LP
If \fImode\fR begins with \fIw\fR or \fBa\fR and the file did not previously exist, upon successful completion, \fBfopen()\fR function will mark for update the \fBst_atime\fR, \fBst_ctime\fR and \fBst_mtime\fR fields of the file and the \fBst_ctime\fR and \fBst_mtime\fR fields of the parent directory.
.sp
.LP
If \fImode\fR begins with \fIw\fR and the file did previously exist, upon successful completion, \fBfopen()\fR will mark for update the \fBst_ctime\fR and \fBst_mtime\fR fields of the file.  The \fBfopen()\fR function will allocate a file descriptor as \fBopen\fR(2) does.
.sp
.LP
Normally, 32-bit applications return an \fBEMFILE\fR error when attempting to associate a stream with a file accessed by a file descriptor with a value greater than 255. If the last character of \fImode\fR is \fBF\fR, 32-bit applications will be allowed to associate a stream with a file accessed by a file descriptor with a value greater than 255. A \fBFILE\fR pointer obtained in this way must never be used by any code that might directly access fields in the \fBFILE\fR structure. If the fields in the \fBFILE\fR structure are used directly by 32-bit applications when the last character of mode is \fBF\fR, data corruption could occur. See the USAGE section of this manual page and the \fBenable_extended_FILE_stdio\fR(3C) manual page for other options for enabling the extended FILE facility.
.sp
.LP
In 64-bit applications, the last character of \fImode\fR is silently ignored if it is \fBF\fR.  64-bit applications are always allowed to associate a stream with a file accessed by a file descriptor with any value.
.sp
.LP
The largest value that can be represented correctly in an object of type \fBoff_t\fR will be established as the offset maximum in the open file description.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, \fBfopen()\fR returns a pointer to the object controlling the stream.  Otherwise, a null pointer is returned and \fBerrno\fR is set to indicate the error.
.sp
.LP
The \fBfopen()\fR function may fail and not set \fBerrno\fR if there are no free \fBstdio\fR streams.
.SH ERRORS
.sp
.LP
The \fBfopen()\fR function will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEACCES\fR\fR
.ad
.RS 16n
.rt  
Search permission is denied on a component of the path prefix, or the file exists and the permissions specified by \fImode\fR are denied, or the file does not exist and write permission is denied for the parent directory of the file to be created.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEINTR\fR\fR
.ad
.RS 16n
.rt  
A signal was caught during the execution of \fBfopen()\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEISDIR\fR\fR
.ad
.RS 16n
.rt  
The named file is a directory and \fImode\fR requires write access.
.RE

.sp
.ne 2
.mk
.na
\fB\fBELOOP\fR\fR
.ad
.RS 16n
.rt  
Too many symbolic links were encountered in resolving \fIpath\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEMFILE\fR\fR
.ad
.RS 16n
.rt  
There are {\fBOPEN_MAX\fR} file descriptors currently open in the calling process.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENAMETOOLONG\fR\fR
.ad
.RS 16n
.rt  
The length of the \fIfilename\fR exceeds \fIPATH_MAX\fR or a pathname component is longer than \fINAME_MAX\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENFILE\fR\fR
.ad
.RS 16n
.rt  
The maximum allowable number of files is currently open in the system.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOENT\fR\fR
.ad
.RS 16n
.rt  
A component of \fIfilename\fR does not name an existing file or \fIfilename\fR is an empty string.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOSPC\fR\fR
.ad
.RS 16n
.rt  
The directory or file system that would contain the new file cannot be expanded, the file does not exist, and it was to be created.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOTDIR\fR\fR
.ad
.RS 16n
.rt  
A component of the path prefix is not a directory.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENXIO\fR\fR
.ad
.RS 16n
.rt  
The named file is a character special or block special file, and the device associated with this special file does not exist.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEOVERFLOW\fR\fR
.ad
.RS 16n
.rt  
The current value of the file position cannot be represented correctly in an object of type \fBfpos_t\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEROFS\fR\fR
.ad
.RS 16n
.rt  
The named file resides on a read-only file system and \fImode\fR requires write access.
.RE

.sp
.LP
The \fBfopen()\fR function may fail if:
.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 16n
.rt  
The value of the \fImode\fR argument is not valid.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEMFILE\fR\fR
.ad
.RS 16n
.rt  
{\fBFOPEN_MAX\fR} streams are currently open in the calling process.
.sp
{\fBSTREAM_MAX\fR} streams are currently open in the calling process.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENAMETOOLONG\fR\fR
.ad
.RS 16n
.rt  
Pathname resolution of a symbolic link produced an intermediate result whose length exceeds {\fBPATH_MAX\fR}.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOMEM\fR\fR
.ad
.RS 16n
.rt  
Insufficient storage space is available.
.RE

.sp
.ne 2
.mk
.na
\fB\fBETXTBSY\fR\fR
.ad
.RS 16n
.rt  
The file is a pure procedure (shared text) file that is being executed and \fImode\fR requires write access.
.RE

.SH USAGE
.sp
.LP
A process is allowed to have at least {\fBFOPEN_MAX\fR} \fBstdio\fR streams open at a time. For 32-bit applications, however, the underlying ABIs formerly required that no file descriptor used to access the file underlying a \fBstdio\fR stream have a value greater than 255. To maintain binary compatibility with earlier Solaris releases, this limit still constrains 32-bit applications. However, when a 32-bit application is aware that no code that has access to the \fBFILE\fR pointer returned by \fBfopen()\fR will use the \fBFILE\fR pointer to directly access any fields in the \fBFILE\fR structure, the \fBF\fR character can be used as the last character in the \fImode\fR argument to circumvent this limit. Because it could lead to data corruption, the \fBF\fR character in \fImode\fR must never be used when the \fBFILE\fR pointer might later be used by binary code unknown to the user. The \fBF\fR character in \fImode\fR is intended to be used by library functions that need a \fBFILE\fR pointer to access data to process a user request, but do not need to pass the \fBFILE\fR pointer back to the user. 32-bit applications that have been inspected can use the extended FILE facility to circumvent this limit if the inspection shows that no \fBFILE\fR pointers will be used to directly access \fBFILE\fR structure contents.
.sp
.LP
The \fBfopen()\fR function has a transitional interface for 64-bit file offsets.  See \fBlf64\fR(5).
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
_
StandardSee below.
.TE

.sp
.LP
For all aspects of this function except the \fBF\fR character in the \fImode\fR argument, see \fBstandards\fR(5)
.SH SEE ALSO
.sp
.LP
\fBenable_extended_FILE_stdio\fR(3C), \fBfclose\fR(3C), \fBfdopen\fR(3C), \fBfflush\fR(3C), \fBfreopen\fR(3C), \fBfsetpos\fR(3C), \fBrewind\fR(3C), \fBattributes\fR(5), \fBlf64\fR(5), \fBstandards\fR(5)
