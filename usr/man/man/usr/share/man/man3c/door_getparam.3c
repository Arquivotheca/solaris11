'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc. All Rights Reserved.
.TH door_getparam 3C "22 Mar 2005" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
door_getparam, door_setparam \- retrieve and set door parameters
.SH SYNOPSIS
.LP
.nf
\fBcc\fR \fB-mt\fR [ \fIflag\fR... ] \fIfile\fR... [ \fIlibrary\fR... ]
#include <door.h>

\fBint\fR \fBdoor_getparam\fR(\fBint\fR \fId\fR, \fBint\fR \fIparam\fR, \fBsize_t *\fR\fIout\fR);
.fi

.LP
.nf
\fBint\fR \fBdoor_setparam\fR(\fBint\fR \fId\fR, \fBint\fR \fIparam\fR, \fBsize_t\fR \fIval\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBdoor_getparam()\fR function retrieves the value of \fIparam\fR for the door descriptor \fId\fR and writes it through the pointer \fIout\fR. The \fBdoor_setparam()\fR function sets the value of \fIparam\fR for the door descriptor \fId\fR to \fIval\fR. The \fIparam\fR argument names the parameter to view or change and can be one of the following values:
.sp
.ne 2
.mk
.na
\fB\fBDOOR_PARAM_DATA_MAX\fR\fR
.ad
.RS 23n
.rt  
This parameter represents the maximum amount of data that can be passed to the door routine. Any attempt to call \fBdoor_call\fR(3C) on a door with a \fIdata_size\fR value larger than the door's \fBDOOR_PARAM_DATA_MAX\fR parameter will fail with \fBENOBUFS\fR. At door creation time, this parameter is initialized to \fBSIZE_MAX\fR and can be set to any value from 0 to \fBSIZE_MAX\fR, inclusive. This parameter must be greater than or equal to the \fBDOOR_PARAM_DATA_MIN\fR parameter.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDOOR_PARAM_DATA_MIN\fR\fR
.ad
.RS 23n
.rt  
This parameter represents the the minimum amount of data that can be passed to the door routine. Any attempt to call \fBdoor_call\fR(3C) on a door with a \fIdata_size\fR value smaller than the door's \fBDOOR_PARAM_DATA_MIN\fR parameter will fail with \fBENOBUFS\fR. At door creation time, this parameter is initialized to 0, and can be set to any value from 0 to \fBSIZE_MAX\fR, inclusive. This parameter must be less than or equal to the \fBDOOR_PARAM_DATA_MAX\fR parameter.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDOOR_PARAM_DESC_MAX\fR\fR
.ad
.RS 23n
.rt  
This parameter represents the the maximum number of argument descriptors that can be passed to the door routine. Any attempt to call \fBdoor_call\fR(3C) on a door with a \fIdesc_nu\fRm value larger than the door's \fBDOOR_PARAM_DESC_MAX\fR parameter will fail with \fBENFILE\fR. If the door was created with the \fBDOOR_REFUSE_DESC\fR flag, this parameter is initialized to 0 and cannot be changed to any other value. Otherwise, it is initialized to \fBINT_MAX\fR and can be set to any value from 0 to \fBINT_MAX\fR, inclusive.
.RE

.sp
.LP
The \fBdoor_setparam()\fR function can only affect doors that were created by the current process.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, 0 is returned.  Otherwise, -1 is returned and \fBerrno\fR is set to indicate the error.
.SH ERRORS
.sp
.LP
The \fBdoor_getparam()\fR function will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEBADF\fR\fR
.ad
.RS 13n
.rt  
The \fId\fR argument is not a door descriptor.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEFAULT\fR\fR
.ad
.RS 13n
.rt  
The \fIout\fR argument is not a valid address.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 13n
.rt  
The \fIparam\fR argument is not a recognized parameter.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEOVERFLOW\fR\fR
.ad
.RS 13n
.rt  
The value of the parameter is larger than the \fBSIZE_MAX\fR. This condition can occur only if the calling process is 32-bit and the door targets a 64-bit process or the kernel.
.RE

.sp
.LP
The \fBdoor_setparam()\fR function will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEBADF\fR\fR
.ad
.RS 11n
.rt  
The \fId\fR argument is not a door descriptor or has been revoked.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 11n
.rt  
The \fIparam\fR argument is not a recognized parameter, or the requested change would make \fBDOOR_PARAM_DATA_MIN\fR greater than \fBDOOR_PARAM_DATA_MAX\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOTSUP\fR\fR
.ad
.RS 11n
.rt  
The \fIparam\fR argument is \fBDOOR_PARAM_DESC_MAX\fR, \fId\fR was created with the \fBDOOR_REFUSE_DESC\fR flag, and \fIval\fR is not zero.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEPERM\fR\fR
.ad
.RS 11n
.rt  
The \fId\fR argument was not created by this process.
.RE

.sp
.ne 2
.mk
.na
\fB\fBERANGE\fR\fR
.ad
.RS 11n
.rt  
The \fIval\fR argument is not in supported range of \fIparam\fR.
.RE

.SH EXAMPLES
.LP
\fBExample 1 \fRSet up a door with a fixed request size.
.sp
.in +2
.nf
typedef struct my_request {
     int request;
ar buffer[4096];
} my_request_t;

fd = door_create(my_handler, DOOR_REFUSE_DESC);
if (fd < 0)
     /* handle error */

if (door_setparam(fd, DOOR_PARAM_DATA_MIN,
    sizeof (my_request_t)) < 0 ||
    door_setparam(fd, DOOR_PARAM_DATA_MAX,
    sizeof (my_request_t)) < 0)
 /* handle error */

/*
 * the door will only accept door_call(3DOOR)s with a
 * data_size which is exactly sizeof (my_request_t).
 */
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
\fBdoor_call\fR(3C), \fBdoor_create\fR(3C), \fBattributes\fR(5)
.SH NOTES
.sp
.LP
The parameters that can be manipulated by \fBdoor_setparam()\fR are not the only limitation on the size of requests. If the door server thread's stack size is not large enough to hold all of the data requested plus room for processing the request, the door call will fail with \fBE2BIG\fR.
.sp
.LP
The \fBDOOR_PARAM_DATA_MIN\fR parameter will not prevent \fBDOOR_UNREF_DATA\fR notifications from being sent to the door.
