'\" te
.\" Copyright (c) 2001, the Institute of Electrical and Electronics Engineers, Inc. and The Open Group. All Rights Reserved.
.\" Portions Copyright (c) 2004, Sun Microsystems, Inc. All Rights Reserved.
.\"  Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at  http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material. 
.TH pthread_barrier_destroy 3C "30 Jan 2004" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
pthread_barrier_destroy, pthread_barrier_init \- destroy and initialize a barrier object
.SH SYNOPSIS
.LP
.nf
cc \fB-mt\fR [ \fIflag\fR... ] \fIfile\fR... [ \fIlibrary\fR... ]
#include <pthread.h>

\fBint\fR \fBpthread_barrier_destroy\fR(\fBpthread_barrier_t *\fR\fIbarrier\fR);
.fi

.LP
.nf
\fBint\fR \fBpthread_barrier_init\fR(\fBpthread_barrier_t *\fR\fIbarrier\fR,
     \fBconst pthread_barrierattr_t *restrict\fR \fIattr\fR, \fBunsigned\fR \fIcount\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBpthread_barrier_destroy()\fR function destroys the barrier referenced by \fIbarrier\fR and releases any resources used by the barrier. The effect of subsequent use of the barrier is undefined until the barrier is reinitialized by another call to \fBpthread_barrier_init()\fR. An implementation can use this function to set barrier to an invalid value. The results are undefined if \fBpthread_barrier_destroy()\fR is called when any thread is blocked on the barrier, or if this function is called with an uninitialized barrier.
.sp
.LP
The \fBpthread_barrier_init()\fR function allocates any resources required to use the barrier referenced by barrier and initializes the barrier with attributes referenced by \fIattr\fR. If attr is \fINULL\fR, the default barrier attributes are used; the effect is the same as passing the address of a default barrier attributes object. The results are undefined if \fBpthread_barrier_init()\fR is called when any thread is blocked on the barrier (that is, has not returned from the \fBpthread_barrier_wait\fR(3C) call). The results are undefined if a barrier is used without first being initialized. The results are undefined if \fBpthread_barrier_init()\fR is called specifying an already initialized barrier.
.sp
.LP
The \fIcount\fR argument specifies the number of threads that must call \fBpthread_barrier_wait()\fR before any of them successfully return from the call. The value specified by \fIcount\fR must be greater than 0.
.sp
.LP
If the \fBpthread_barrier_init()\fR function fails, the barrier is not initialized and the contents of \fIbarrier\fR are undefined.
.sp
.LP
Only the object referenced by barrier can be used for performing synchronization. The result of referring to copies of that object in calls to \fBpthread_barrier_destroy()\fR or \fBpthread_barrier_wait()\fR is undefined.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, these functions returns 0. Otherwise, an error number is returned to indicate the error.
.SH ERRORS
.sp
.LP
The \fBpthread_barrier_init()\fR function will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEAGAIN\fR\fR
.ad
.RS 10n
.rt  
The system lacks the necessary resources to initialize another barrier.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 10n
.rt  
The value specified by \fIcount\fR is equal to 0.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOMEM\fR\fR
.ad
.RS 10n
.rt  
Insufficient memory exists to initialize the barrier.
.RE

.sp
.LP
The \fBpthread_barrier_init()\fR function may fail if:
.sp
.ne 2
.mk
.na
\fB\fBEBUSY\fR\fR
.ad
.RS 10n
.rt  
The implementation has detected an attempt to destroy a barrier while it is in use (for example, while being used in a \fBpthread_barrier_wait()\fR call) by another thread.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 10n
.rt  
The value specified by \fIattr\fR is invalid.
.RE

.sp
.LP
The \fBpthread_barrier_destroy()\fR function may fail if:
.sp
.ne 2
.mk
.na
\fB\fBEBUSY\fR\fR
.ad
.RS 10n
.rt  
The implementation has detected an attempt to destroy a barrier while it is in use (for example, while being used in a \fBpthread_barrier_wait()\fR call) by another thread.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 10n
.rt  
The value specified by \fIbarrier\fR is invalid.
.RE

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
\fBpthread_barrier_wait\fR(3C), \fBattributes\fR(5), \fBstandards\fR(5)
