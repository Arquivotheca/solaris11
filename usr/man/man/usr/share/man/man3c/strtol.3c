'\" te
.\" Copyright 1989 AT&T.  Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.  Portions Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at  http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material.
.TH strtol 3C "6 May 2003" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
strtol, strtoll, atol, atoll, atoi, lltostr, ulltostr \- string conversion routines
.SH SYNOPSIS
.LP
.nf
#include <stdlib.h>

\fBlong\fR \fBstrtol\fR(\fBconst char *restrict\fR \fIstr\fR, \fBchar **restrict\fR \fIendptr\fR, \fBint\fR \fIbase\fR);
.fi

.LP
.nf
\fBlong long\fR \fBstrtoll\fR(\fBconst char *restrict\fR \fIstr\fR, \fBchar **restrict\fR \fIendptr\fR,
     \fBint\fR \fIbase\fR);
.fi

.LP
.nf
\fBlong\fR \fBatol\fR(\fBconst char *\fR\fIstr\fR);
.fi

.LP
.nf
\fBlong long\fR \fBatoll\fR(\fBconst char *\fR\fIstr\fR);
.fi

.LP
.nf
\fBint\fR \fBatoi\fR(\fBconst char *\fR\fIstr\fR);
.fi

.LP
.nf
\fBchar *\fR\fBlltostr\fR(\fBlong long\fR \fIvalue\fR, \fBchar *\fR\fIendptr\fR);
.fi

.LP
.nf
\fBchar *\fR\fBulltostr\fR(\fBunsigned long long\fR \fIvalue\fR, \fBchar *\fR\fIendptr\fR);
.fi

.SH DESCRIPTION
.SS "\fBstrtol()\fR and \fBstrtoll()\fR"
.sp
.LP
The \fBstrtol()\fR function converts the initial portion of the string pointed to by \fIstr\fR to a type \fBlong int\fR representation.
.sp
.LP
The \fBstrtoll()\fR function converts the initial portion of the string pointed to by \fIstr\fR to a type \fBlong long\fR representation.
.sp
.LP
Both functions first decompose the input string into three parts: an initial, possibly empty, sequence of white-space characters (as specified by \fBisspace\fR(3C)); a subject sequence interpreted as an integer represented in some radix determined by the value of \fIbase\fR; and a final string of one or more unrecognized characters, including the terminating null byte of the input string. They then attempt to convert the subject sequence to an integer and return the result.
.sp
.LP
If the value of \fIbase\fR is 0, the expected form of the subject sequence is that of a decimal constant, octal constant or hexadecimal constant, any of which may be preceded by a + or \(mi sign. A decimal constant begins with a non-zero digit, and consists of a sequence of decimal digits. An octal constant consists of the prefix 0 optionally followed by a sequence of the digits 0 to 7 only. A hexadecimal constant consists of the prefix 0x or 0X followed by a sequence of the decimal digits and letters a (or A) to f (or F) with values 10 to 15 respectively.
.sp
.LP
If the value of \fIbase\fR is between 2 and 36, the expected form of the subject sequence is a sequence of letters and digits representing an integer with the radix specified by \fIbase\fR, optionally preceded by a + or \(mi sign. The letters from a (or A) to z (or Z) inclusive are ascribed the values 10 to 35; only letters whose ascribed values are less than that of \fIbase\fR are permitted. If the value of \fIbase\fR is 16, the characters 0x or 0X may optionally precede the sequence of letters and digits, following the sign if present.
.sp
.LP
The subject sequence is defined as the longest initial subsequence of the input string, starting with the first non-white-space character, that is of the expected form. The subject sequence contains no characters if the input string is empty or consists entirely of white-space characters, or if the first non-white-space character is other than a sign or a permissible letter or digit.
.sp
.LP
If the subject sequence has the expected form and the value of \fIbase\fR is 0, the sequence of characters starting with the first digit is interpreted as an integer constant. If the subject sequence has the expected form and the value of \fIbase\fR is between 2 and 36, it is used as the base for conversion, ascribing to each letter its value as given above. If the subject sequence begins with a minus sign, the value resulting from the conversion is negated. A pointer to the final string is stored in the object pointed to by \fIendptr\fR, provided that \fIendptr\fR is not a null pointer.
.sp
.LP
In other than the POSIX locale, additional implementation-dependent subject sequence forms may be accepted.
.sp
.LP
If the subject sequence is empty or does not have the expected form, no conversion is performed; the value of \fIstr\fR is stored in the object pointed to by \fIendptr\fR, provided that \fIendptr\fR is not a null pointer.
.SS "\fBatol()\fR, \fBatoll()\fR and \fBatoi()\fR"
.sp
.LP
Except for behavior on error, \fBatol()\fR is equivalent to: \fBstrtol(str, (char **)NULL, 10)\fR.
.sp
.LP
Except for behavior on error, \fBatoll()\fR is equivalent to: \fBstrtoll(str, (char **)NULL, 10)\fR.
.sp
.LP
Except for behavior on error, \fBatoi()\fR is equivalent to: \fB(int) strtol(str, (char **)NULL, 10)\fR.
.sp
.LP
If the value cannot be represented, the behavior is undefined.
.SS "\fBlltostr()\fR and \fBulltostr()\fR"
.sp
.LP
The \fBlltostr()\fR function returns a pointer to the string represented by the \fBlong\fR \fBlong\fR \fIvalue\fR. The \fIendptr\fR argument is assumed to point to the byte following a storage area into which the decimal representation of \fIvalue\fR is to be placed as a string.  The \fBlltostr()\fR function converts \fIvalue\fR to decimal and produces the string,  and returns a pointer to the beginning of the string. No leading zeros are produced, and no terminating null is produced. The low-order digit of the result always occupies memory position  \fIendptr\fR\(mi1. The behavior of \fBlltostr()\fR is undefined if  \fIvalue\fR is negative.  A single zero digit is produced if  \fIvalue\fR is 0.
.sp
.LP
The \fBulltostr()\fR function is similar to \fBlltostr()\fR except that \fIvalue\fR is an \fBunsigned long long\fR.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, \fBstrtol()\fR, \fBstrtoll()\fR, \fBatol()\fR, \fBatoll()\fR, and \fBatoi()\fR return the converted value, if any. If no conversion could be performed, \fBstrtol()\fR and \fBstrtoll()\fR return \fB0\fR and \fBerrno\fR may be set to \fBEINVAL\fR.
.sp
.LP
If the correct value is outside the range of representable values, \fBstrtol()\fR returns \fBLONG_MAX\fR or \fBLONG_MIN\fR and \fBstrtoll()\fR returns \fBLLONG_MAX\fR or \fBLLONG_MIN\fR (according to the sign of the value), and \fBerrno\fR is set to \fBERANGE\fR.
.sp
.LP
Upon successful completion, \fBlltostr()\fR and \fBulltostr()\fR return a pointer to the converted string.
.SH ERRORS
.sp
.LP
The \fBstrtol()\fR and \fBstrtoll()\fR functions will fail if:
.sp
.ne 2
.mk
.na
\fB\fBERANGE\fR\fR
.ad
.RS 10n
.rt  
The value to be returned is not representable.
.RE

.sp
.LP
The \fBstrtol()\fR and \fBstrtoll()\fR functions may fail if:
.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 10n
.rt  
The value of \fIbase\fR is not supported.
.RE

.SH USAGE
.sp
.LP
Because 0, \fBLONG_MIN\fR, \fBLONG_MAX\fR, \fBLLONG_MIN\fR, and \fBLLONG_MAX\fR are returned on error and are also valid returns on success, an application wishing to check for error situations should set \fBerrno\fR to 0, call the function, then check \fBerrno\fR and if it is non-zero, assume an error has occurred.
.sp
.LP
The \fBstrtol()\fR function no longer accepts values greater than \fBLONG_MAX\fR or \fBLLONG_MAX\fR as valid input. Use \fBstrtoul\fR(3C) instead.
.sp
.LP
Calls to \fBatoi()\fR and \fBatol()\fR might be faster than corresponding calls to \fBstrtol()\fR, and calls to \fBatoll()\fR might be faster than corresponding calls to \fBstrtoll()\fR. However, applications should not use the \fBatoi()\fR, \fBatol()\fR, or \fBatoll()\fR functions unless they know the value represented by the argument will be in range for the corresponding result type.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
_
StandardSee below.
.TE

.sp
.LP
For \fBstrtol()\fR, \fBstrtoll()\fR, \fBatol()\fR, \fBatoll()\fR, and \fBatoi()\fR, see \fBstandards\fR(5).
.SH SEE ALSO
.sp
.LP
\fBisalpha\fR(3C), \fBisspace\fR(3C), \fBscanf\fR(3C), \fBstrtod\fR(3C), \fBstrtoul\fR(3C), \fBattributes\fR(5), \fBstandards\fR(5)
