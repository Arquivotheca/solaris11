'\" te
.\" Copyright (c) 2003, 2010, Oracle and/or its affiliates. All rights reserved.
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at  http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material.
.\" Portions of this manual page were derived from Linux documentation obtained from http://linux.die.net.
.TH realpath 3C "11 Oct 2010" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
realpath, canonicalize_file_name \- resolve pathname
.SH SYNOPSIS
.LP
.nf
#include <stdlib.h>

\fBchar *\fR\fBrealpath\fR(\fBconst char *restrict\fR \fIfile_name\fR,
     \fBchar *restrict\fR \fIresolved_name\fR);
.fi

.LP
.nf
char *canonicalize_file_name (const char *\fIpath\fR); 
.fi

.SH DESCRIPTION
.sp
.LP
The \fBrealpath()\fR function derives, from the pathname pointed to by \fIfile_name\fR, an absolute pathname that resolves to the same directory entry, whose resolution does not involve "\fB\&.\fR", "\fB\&..\fR", or symbolic links. If \fIresolved_name\fR is not null, the generated pathname is stored as a null-terminated string, up to a maximum of {\fBPATH_MAX\fR} (defined in \fBlimits.h\fR(3HEAD)) bytes in the buffer pointed to by \fIresolved_name\fR. If \fIresolved_name\fR is null, the generated pathname is stored as a null-terminated string in a buffer that is allocated as if \fBmalloc\fR(3C) were called.
.sp
.LP
The call \fBcanonicalize_file_name\fR(\fIpath\fR) is equivalent to the call \fBrealpath\fR(\fIpath\fR, \fINULL\fR). 
.SH RETURN VALUES
.sp
.LP
On successful completion, \fBrealpath()\fR returns a pointer to the resolved name.  Otherwise, \fBrealpath()\fR returns a null pointer and sets \fBerrno\fR to indicate the error, and the contents of the buffer pointed to by \fIresolved_name\fR are left in an indeterminate state.
.SH ERRORS
.sp
.LP
The \fBrealpath()\fR function will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEACCES\fR\fR
.ad
.RS 16n
.rt  
Read or search permission was denied for a component of \fIfile_name\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 16n
.rt  
Either the \fIfile_name\fR or \fIresolved_name\fR argument is a null pointer.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEIO\fR\fR
.ad
.RS 16n
.rt  
An error occurred while reading from the file system.
.RE

.sp
.ne 2
.mk
.na
\fB\fBELOOP\fR\fR
.ad
.RS 16n
.rt  
Too many symbolic links were encountered in resolving \fIfile_name\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBELOOP\fR\fR
.ad
.RS 16n
.rt  
A loop exists in symbolic links encountered during resolution of the \fIfile_name\fR argument.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENAMETOOLONG\fR\fR
.ad
.RS 16n
.rt  
The \fIfile_name\fR argument is longer than {\fBPATH_MAX\fR} or a pathname component is longer than {\fBNAME_MAX\fR}.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOENT\fR\fR
.ad
.RS 16n
.rt  
A component of \fIfile_name\fR does not name an existing file or \fIfile_name\fR points to an empty string.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOTDIR\fR\fR
.ad
.RS 16n
.rt  
A component of the path prefix is not a directory.
.RE

.sp
.LP
The \fBrealpath()\fR function may fail if:
.sp
.ne 2
.mk
.na
\fB\fBENAMETOOLONG\fR\fR
.ad
.RS 16n
.rt  
Pathname resolution of a symbolic link produced an intermediate result whose length exceeds {\fBPATH_MAX\fR}.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOMEM\fR\fR
.ad
.RS 16n
.rt  
Insufficient storage space is available.
.RE

.SH USAGE
.sp
.LP
The \fBrealpath()\fR function operates on null-terminated strings.
.sp
.LP
Execute permission is required for all the directories in the given and the resolved path.
.sp
.LP
The \fBrealpath()\fR function might fail to return to the current directory if an error occurs.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
\fBgetcwd\fR(3C), \fBlimits.h\fR(3HEAD), \fBmalloc\fR(3C), \fBsysconf\fR(3C), \fBattributes\fR(5), \fBstandards\fR(5)
