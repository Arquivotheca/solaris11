'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc. All Rights Reserved.  Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"  Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at  http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material. 
.TH strtoul 3C "1 Nov 2003" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
strtoul, strtoull \- convert string to unsigned long
.SH SYNOPSIS
.LP
.nf
#include <stdlib.h>

\fBunsigned long\fR \fBstrtoul\fR(\fBconst char *restrict\fR \fIstr\fR,
     \fBchar **restrict\fR \fIendptr\fR, \fBint\fR \fIbase\fR);
.fi

.LP
.nf
\fBunsigned long long\fR \fBstrtoull\fR(\fBconst char *restrict\fR \fIstr\fR,
     \fBchar **restrict\fR \fIendptr\fR, \fBint\fR \fIbase\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBstrtoul()\fR function converts the initial portion of the string pointed to by \fIstr\fR to a type \fBunsigned long int\fR representation. First it decomposes the input string into three parts: an initial, possibly empty, sequence of white-space characters (as specified by \fBisspace\fR(3C)); a subject sequence interpreted as an integer represented in some radix determined by the value of \fIbase\fR; and a final string of one or more unrecognised characters, including the terminating null byte of the input string. Then it attempts to convert the subject sequence to an unsigned integer, and returns the result. 
.sp
.LP
If the value of \fIbase\fR is 0, the expected form of the subject sequence is that of a decimal constant, octal constant or hexadecimal constant, any of which may be preceded by a + or \(mi sign. A decimal constant begins with a non-zero digit, and consists of a sequence of decimal digits. An octal constant consists of the prefix 0 optionally followed by a sequence of the digits 0 to 7 only. A hexadecimal constant consists of the prefix 0x or 0X followed by a sequence of the decimal digits and letters a (or A) to f (or F) with values 10 to 15 respectively.
.sp
.LP
If the value of \fIbase\fR is between 2 and 36, the expected form of the subject sequence is a sequence of letters and digits representing an integer with the radix specified by \fIbase\fR, optionally preceded by a + or \(mi sign. The letters from a (or A) to z (or Z) inclusive are ascribed the values 10 to 35; only letters whose ascribed values are less than that of \fIbase\fR are permitted. If the value of \fIbase\fR is 16, the characters 0x or 0X may optionally precede the sequence of letters and digits, following the sign if present.
.sp
.LP
The subject sequence is defined as the longest initial subsequence of the input string, starting with the first non-white-space character, that is of the expected form. The subject sequence contains no characters if the input string is empty or consists entirely of white-space characters, or if the first non-white-space character is other than a sign or a permissible letter or digit.
.sp
.LP
If the subject sequence has the expected form and the value of \fIbase\fR is 0, the sequence of characters starting with the first digit is interpreted as an integer constant. If the subject sequence has the expected form and the value of \fIbase\fR is between 2 and 36, it is used as the base for conversion, ascribing to each letter its value as given above. If the subject sequence begins with a minus sign, the value resulting from the conversion is negated. A pointer to the final string is stored in the object pointed to by \fIendptr\fR, provided that \fIendptr\fR is not a null pointer.
.sp
.LP
In other than the POSIX locale, additional implementation-dependent subject sequence forms may be accepted.
.sp
.LP
If the subject sequence is empty or does not have the expected form, no conversion is performed; the value of \fIstr\fR is stored in the object pointed to by \fIendptr\fR, provided that \fIendptr\fR is not a null pointer.
.sp
.LP
The \fBstrtoull()\fR function is identical to \fBstrtoul()\fR except that it returns the value represented by \fIstr\fR as an \fBunsigned long long\fR.
.SH RETURN VALUES
.sp
.LP
Upon successful completion \fBstrtoul()\fR returns the converted value, if any. If no conversion could be performed, \fB0\fR is returned and \fBerrno\fR may be set to \fBEINVAL\fR. If the correct value is outside the range of representable values, \fBULONG_MAX\fR is returned and \fBerrno\fR is set to \fBERANGE\fR.
.SH ERRORS
.sp
.LP
The \fBstrtoul()\fR function will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 10n
.rt  
The value of \fIbase\fR is not supported.
.RE

.sp
.ne 2
.mk
.na
\fB\fBERANGE\fR\fR
.ad
.RS 10n
.rt  
The value to be returned is not representable.
.RE

.sp
.LP
The \fBstrtoul()\fR function may fail if:
.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 10n
.rt  
No conversion could be performed.
.RE

.SH USAGE
.sp
.LP
Because 0 and \fBULONG_MAX\fR are returned on error and are also valid returns on success, an application wishing to check for error situations should set \fBerrno\fR to 0, then call \fBstrtoul()\fR, then check \fBerrno\fR and if it is non-zero, assume an error has occurred.
.sp
.LP
Unlike \fBstrtod\fR(3C) and \fBstrtol\fR(3C), \fBstrtoul()\fR must always return a non-negative number; so, using the return value of \fBstrtoul()\fR for out-of-range numbers with \fBstrtoul()\fR could cause more severe problems than just loss of precision if those numbers can ever be negative.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
\fBisalpha\fR(3C), \fBisspace\fR(3C), \fBscanf\fR(3C), \fBstrtod\fR(3C), \fBstrtol\fR(3C), \fBattributes\fR(5), \fBstandards\fR(5)
