'\" te
.\" Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\" Portions Copyright (c) 2002, 2010, Oracle and/or its affiliates. All rights reserved.
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at  http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material.
.TH wcstring 3C "11 Oct 2010" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
wcstring, wcscasecmp, wcsncasecmp, wcscat, wscat, wcsncat, wsncat, wcscmp, wscmp, wcsncmp, wsncmp, wcscpy, wscpy, wcsncpy, wsncpy, wcpcpy, wcpncpy, wcsdup, wcslen, wslen, wcsnlen, wcschr, wschr, wcsrchr, wsrchr, windex, wrindex, wcspbrk, wspbrk, wcswcs, wcsspn, wsspn, wcscspn, wscspn, wcstok, wstok \- wide-character string operations
.SH SYNOPSIS
.LP
.nf
#include <wchar.h> 

int wcscasecmp(const wchar_t *\fIws1\fR, const wchar_t *\fIws2\fR);
.fi

.LP
.nf
int wcsncasecmp(const wchar_t \fIws1\fR*, const wchar_t \fIws2\fR*, size_t \fIn\fR);
.fi

.LP
.nf
\fBwchar_t *\fR\fBwcscat\fR(\fBwchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR);
.fi

.LP
.nf
\fBwchar_t *\fR\fBwcsncat\fR(\fBwchar_t *restrict\fR \fIws1\fR, \fBconst wchar_t *restrict\fR \fIws2\fR,
     \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBint\fR \fBwcscmp\fR(\fBconst wchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR);
.fi

.LP
.nf
\fBint\fR \fBwcsncmp\fR(\fBconst wchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBwchar_t *\fR\fBwcscpy\fR(\fBwchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR);
.fi

.LP
.nf
wchar_t *wcscpy(wchar_t *restrict \fIws1\fR, const wchar_t *restrict \fIws2\fR);
.fi

.LP
.nf
\fBwchar_t *\fR\fBwcsncpy\fR(\fBwchar_t *restrict\fR \fIws1\fR, \fBconst wchar_t *restrict\fR \fIws2\fR,
     \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
wchar_t *wcpncpy(wchar_t restrict *\fIws1\fR, const wchar_t *restrict \fIws2\fR,
     size_t \fIn\fR);
.fi

.LP
.nf
wchar_t *wcsdup(const wchar_t *\fIs\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBwcslen\fR(\fBconst wchar_t *\fR\fIws\fR);
.fi

.LP
.nf
size_t wcsnlen(const wchar_t *\fIws\fR, size_t \fImaxlen\fR);
.fi

.LP
.nf
\fBwchar_t *\fR\fBwcschr\fR(\fBconst wchar_t *\fR\fIws\fR, \fBwchar_t\fR \fIwc\fR);
.fi

.LP
.nf
\fBwchar_t *\fR\fBwcsrchr\fR(\fBconst wchar_t *\fR\fIws\fR, \fBwchar_t\fR \fIwc\fR);
.fi

.LP
.nf
\fBwchar_t *\fR\fBwcspbrk\fR(\fBconst wchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR);
.fi

.LP
.nf
\fBwchar_t *\fR\fBwcswcs\fR(\fBconst wchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBwcsspn\fR(\fBconst wchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBwcscspn\fR(\fBconst wchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR);
.fi

.SS "XPG4, SUS, SUSv2, SUSv3"
.LP
.nf
\fBwchar_t *\fR\fBwcstok\fR(\fBwchar_t *restrict\fR \fIws1\fR, \fBconst wchar_t *restrict\fR \fIws2\fR);
.fi

.SS "Default and other standards"
.LP
.nf
\fBwchar_t *\fR\fBwcstok\fR(\fBwchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR, \fBwchar_t **\fR\fIptr\fR);
.fi

.LP
.nf
#include <widec.h> 

\fBwchar_t *\fR\fBwscat\fR(\fBwchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR);
.fi

.LP
.nf
\fBwchar_t *\fR\fBwsncat\fR(\fBwchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBint\fR \fBwscmp\fR(\fBconst wchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR);
.fi

.LP
.nf
\fBint\fR \fBwsncmp\fR(\fBconst wchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBwchar_t *\fR\fBwscpy\fR(\fBwchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR);
.fi

.LP
.nf
\fBwchar_t *\fR\fBwsncpy\fR(\fBwchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBwslen\fR(\fBconst wchar_t *\fR\fIws\fR);
.fi

.LP
.nf
\fBwchar_t *\fR\fBwschr\fR(\fBconst wchar_t *\fR\fIws\fR, \fBwchat_t\fR \fIwc\fR);
.fi

.LP
.nf
\fBwchar_t *\fR\fBwsrchr\fR(\fBconst wchar_t *\fR\fIws\fR, \fBwchat_t\fR \fIwc\fR);
.fi

.LP
.nf
\fBwchar_t *\fR\fBwspbrk\fR(\fBconst wchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBwsspn\fR(\fBconst wchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBwscspn\fR(\fBconst wchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR);
.fi

.LP
.nf
\fBwchar_t *\fR\fBwstok\fR(\fBwchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR);
.fi

.LP
.nf
\fBwchar_t *\fR\fBwindex\fR(\fBconst wchar_t *\fR\fIws\fR, \fBwchar_t\fR \fIwc\fR);
.fi

.LP
.nf
\fBwchar_t *\fR\fBwrindex\fR(\fBconst wchar_t *\fR\fIws\fR, \fBwchar_t\fR \fIwc\fR);
.fi

.SS "ISO C++"
.LP
.nf
#include <wchar.h>

\fBconst wchar_t *\fR\fBwcschr\fR(\fBconst wchar_t *\fR\fIws\fR, \fBwchar_t\fR \fIwc\fR);
.fi

.LP
.nf
\fBconst wchar_t *\fR\fBwcspbrk\fR(\fBconst wchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR);
.fi

.LP
.nf
\fBconst wchar_t *\fR\fBwcsrchr\fR(\fBconst wchar_t *\fR\fIws\fR, \fBwchar_t\fR \fIwc\fR);
.fi

.LP
.nf
#include <cwchar>

\fBwchar_t *std::\fR\fBwcschr\fR(\fBwchar_t *\fR\fIws\fR, \fBwchar_t\fR \fIwc\fR);
.fi

.LP
.nf
\fBwchar_t *std::\fR\fBwcspbrk\fR(\fBwchar_t *\fR\fIws1\fR, \fBconst wchar_t *\fR\fIws2\fR);
.fi

.LP
.nf
\fBwchar_t *std::\fR\fBwcsrchr\fR(\fBwchar_t *\fR\fIws\fR, \fBwchar_t\fR \fIwc\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions operate on wide-character strings terminated by \fBwchar_t\fR \fINULL\fR characters. During appending or copying, these routines do not check for an overflow condition of the receiving string. In the following, \fIws\fR, \fIws1\fR, and \fIws2\fR point to wide-character strings terminated by a \fBwchar_t NULL\fR.
.SS "\fBwcscasecmp()\fR, \fBwcsncasecmp()\fR"
.sp
.LP
The \fBwcscasecmp()\fR function is the wide-character equivalent of the \fBstrcasecmp\fR(3C) function. It compares the wide-character string pointed to by \fIws1\fR to the wide-character string pointed to by \fIws2\fR, ignoring case differences. It returns 0 if the wide-character strings at \fIws1\fR is equal to \fIws2\fR except for case differences. It returns a positive integer if \fIws1\fR is greater than \fIws2\fR and a negative integer if \fIws1\fR is smaller than \fIws2\fR, ignoring case.
.sp
.LP
The \fBwcsncasecmp()\fR function is the wide-character equivalent of the \fBstrncasecmp\fR(3C) function. It compares at most \fIn\fR wide-characters from the wide-character string pointed to by \fIws1\fR to the wide-character string pointed to by \fIws2\fR, while ignoring differences in case. It returns 0 if the wide-character strings at \fIws1\fR and \fIws2\fR, truncated to at most length \fIn\fR, are equal except for case distinctions. It returns a positive integer if truncated \fIws1\fR is greater than \fIws2\fR and a negative integer if truncated \fIws1\fR is smaller than \fIws2\fR, ignoring case.
.SS "\fBwcscat()\fR, \fBwscat()\fR"
.sp
.LP
The \fBwcscat()\fR and \fBwscat()\fR functions append a copy of the wide-character string pointed to by \fIws2\fR (including the terminating null wide-character code) to the end of the wide-character string pointed to by \fIws1\fR. The initial wide-character code of \fIws2\fR overwrites the null wide-character code at the end of \fIws1\fR. If copying takes place between objects that overlap, the behavior is undefined. Both functions return \fIs1\fR; no return value is reserved to indicate an error.
.SS "\fBwcsncat()\fR, \fBwsncat()\fR"
.sp
.LP
The \fBwcsncat()\fR and \fBwsncat()\fR functions append not more than \fIn\fR wide-character codes (a null wide-character code and wide-character codes that follow it are not appended) from the array pointed to by \fIws2\fR to the end of the wide-character string pointed to by \fIws1\fR. The initial wide-character code of \fIws2\fR overwrites the null wide-character code at the end of \fIws1\fR. A terminating null wide-character code is always appended to the result. Both functions return \fIws1\fR; no return value is reserved to indicate an error.
.SS "\fBwcscmp()\fR, \fBwscmp()\fR"
.sp
.LP
The \fBwcscmp()\fR and \fBwscmp()\fR functions compare the wide-character string pointed to by \fIws1\fR to the wide-character string pointed to by \fIws2\fR. The sign of a non-zero return value is determined by the sign of the difference between the values of the first pair of wide-character codes that differ in the objects being compared. Upon completion, both functions return an integer greater than, equal to, or less than zero, if the wide-character string pointed to by \fIws1\fR is greater than, equal to, or less than the wide-character string pointed to by \fIws2\fR.
.SS "\fBwcsncmp()\fR, \fBwsncmp()\fR"
.sp
.LP
The \fBwcsncmp()\fR and \fBwsncmp()\fR functions compare not more than \fIn\fR wide-character codes (wide-character codes that follow a null wide character code are not compared) from the array pointed to by \fIws1\fR to the array pointed to by \fIws2\fR. The sign of a non-zero return value is determined by the sign of the difference between the values of the first pair of wide-character codes that differ in the objects being compared. Upon successful completion, both functions return an integer greater than, equal to, or less than zero, if the possibly null-terminated array pointed to by \fIws1\fR is greater than, equal to, or less than the possibly null-terminated array pointed to by \fIws2\fR.
.SS "\fBwcscpy()\fR, \fBwscpy()\fR, \fBwcpcpy()\fR"
.sp
.LP
The \fBwcscpy()\fR, \fBwscpy()\fR, and \fBwcpcpy()\fR functions copy the wide-character string pointed to by \fIws2\fR (including the terminating null wide-character code) into the array pointed to by \fIws1\fR. If copying takes place between objects that overlap, the behavior is undefined.
.sp
.LP
The \fBwcscpy()\fR and \fBwscpy()\fR functions return \fIws1\fR. The \fBwcpcpy()\fR function returns a pointer to the terminating null wide-character code copied into \fIws1\fR.
.SS "\fBwcsncpy()\fR, \fBwsncpy()\fR, \fBwcpncpy()\fR"
.sp
.LP
The \fBwcsncpy()\fR, \fBwsncpy()\fR, and \fBwcpncpy()\fR functions copy not more than \fIn\fR wide-character codes (wide-character codes that follow a null wide character code are not copied) from the array pointed to by \fIws2\fR to the array pointed to by \fIws1\fR. If copying takes place between objects that overlap, the behavior is undefined.
.sp
.LP
If the array pointed to by \fIws2\fR is a wide-character string that is shorter than \fIn\fR wide-character codes, null wide-character codes are appended to the copy in the array pointed to by \fIws1\fR, until a total \fIn\fR wide-character codes are written. The \fBwcsncpy()\fR and \fBwsncpy()\fR functions return \fIws1\fR. The \fBwcpncpy()\fR function returns a pointer to the last wide character written.
.SS "\fBwcsdup()\fR"
.sp
.LP
The \fBwcsdup()\fR function is the wide-character equivalent of the \fBstrdup\fR(3C) function. It returns a pointer to a new wide-character string whose initial contents is a duplicate of the wide-character string pointed to by \fIs\fR. Memory for the new wide-character string is allocated with \fBmalloc\fR(3C) and can be freed with a call to \fBfree\fR(3C). A null pointer is returned and \fIerrno\fR set to \fBENOMEM\fR if there is insufficient memory available for the duplicate string.
.SS "\fBwcslen()\fR, \fBwslen()\fR, \fBwcsnlen()\fR"
.sp
.LP
The \fBwcslen()\fR and \fBwslen()\fR functions compute the number of wide-character codes in the wide-character string to which \fIws\fR points, not including the terminating null wide-character code. Both functions return \fIws\fR; no return value is reserved to indicate an error.
.sp
.LP
The \fBwcsnlen()\fR is the wide-character equivalent of the \fBstrnlen\fR(3C) function. It returns the number of wide-characters in the string pointed to by \fIws\fR, not including the terminating null wide-character code but at most \fImaxlen\fR, while never looking beyond the first \fImaxlen\fR characters. It returns \fImaxlen\fR if there is no terminating null wide-character code among the first \fImaxlen\fR wide characters pointed to by \fIws\fR.
.SS "\fBwcschr()\fR, \fBwschr()\fR"
.sp
.LP
The \fBwcschr()\fR and \fBwschr()\fR functions locate the first occurrence of \fIwc\fR in the wide-character string pointed to by \fIws\fR. The value of \fIwc\fR must be a character representable as a type \fBwchar_t\fR and must be a wide-character code corresponding to a valid character in the current locale. The terminating null wide-character code is considered to be part of the wide-character string. Upon completion, both functions return a pointer to the wide-character code, or a null pointer if the wide-character code is not found.
.SS "\fBwcsrchr()\fR, \fBwsrchr()\fR"
.sp
.LP
The \fBwcsrchr()\fR and \fBwsrchr()\fR functions locate the last occurrence of \fIwc\fR in the wide-character string pointed to by \fIws\fR. The value of \fIwc\fR must be a character representable as a type \fBwchar_t\fR and must be a wide-character code corresponding to a valid character in the current locale. The terminating null wide-character code is considered to be part of the wide-character string. Upon successful completion, both functions return a pointer to the wide-character code, or a null pointer if \fIwc\fR does not occur in the wide-character string.
.SS "\fBwindex()\fR, \fBwrindex()\fR"
.sp
.LP
The \fBwindex()\fR and \fBwrindex()\fR functions behave the same as \fBwschr()\fR and \fBwsrchr()\fR, respectively.
.SS "\fBwcspbrk()\fR, \fBwspbrk()\fR"
.sp
.LP
The \fBwcspbrk()\fR and \fBwspbrk()\fR functions locate the first occurrence in the wide character string pointed to by \fIws1\fR of any wide-character code from the wide-character string pointed to by \fIws2\fR. Upon successful completion, the function returns a pointer to the wide-character code, or a null pointer if no wide-character code from \fIws2\fR occurs in \fIws1\fR.
.SS "\fBwcswcs()\fR"
.sp
.LP
The \fBwcswcs()\fR function locates the first occurrence in the wide-character string pointed to by \fIws1\fR of the sequence of wide-character codes (excluding the terminating null wide-character code) in the wide-character string pointed to by \fIws2\fR. Upon successful completion, the function returns a pointer to the located wide-character string, or a null pointer if the wide-character string is not found. If \fIws2\fR points to a wide-character string with zero length, the function returns \fIws1\fR.
.SS "\fBwcsspn()\fR, \fBwsspn()\fR"
.sp
.LP
The \fBwcsspn()\fR and \fBwsspn()\fR functions compute the length of the maximum initial segment of the wide-character string pointed to by \fIws1\fR which consists entirely of wide-character codes from the wide-character string pointed to by \fIws2\fR. Both functions return the length \fIws1\fR; no return value is reserved to indicate an error.
.SS "\fBwcscspn()\fR, \fBwscspn()\fR"
.sp
.LP
The \fBwcscspn()\fR and \fBwscspn()\fR functions compute the length of the maximum initial segment of the wide-character string pointed to by \fIws1\fR which consists entirely of wide-character codes \fInot\fR from the wide-character string pointed to by \fIws2\fR. Both functions return the length of the initial substring of \fIws1\fR; no return value is reserved to indicate an error.
.SS "\fBwcstok()\fR, \fBwstok()\fR"
.sp
.LP
A sequence of calls to the \fBwcstok()\fR and \fBwstok()\fR functions break the wide-character string pointed to by \fIws1\fR into a sequence of tokens, each of which is delimited by a wide-character code from the wide-character string pointed to by \fIws2\fR.
.SS "Default and other standards"
.sp
.LP
The third argument points to a caller-provided \fBwchar_t\fR pointer into which the \fBwcstok()\fR function stores information necessary for it to continue scanning the same wide-character string. This argument is not available with the XPG4 and SUS versions of \fBwcstok()\fR, nor is it available with the \fBwstok()\fR function.  See \fBstandards\fR(5).
.sp
.LP
The first call in the sequence has \fIws1\fR as its first argument, and is followed by calls with a null pointer as their first argument. The separator string pointed to by \fIws2\fR may be different from call to call.
.sp
.LP
The first call in the sequence searches the wide-character string pointed to by \fIws1\fR for the first wide-character code that is \fInot\fR contained in the current separator string pointed to by \fIws2\fR. If no such wide-character code is found, then there are no tokens in the wide-character string pointed to by \fIws1\fR, and \fBwcstok()\fR and \fBwstok()\fR return a null pointer. If such a wide-character code is found, it is the start of the first token.
.sp
.LP
The \fBwcstok()\fR and \fBwstok()\fR functions then search from that point for a wide-character code that \fIis\fR contained in the current separator string. If no such wide-character code is found, the current token extends to the end of the wide-character string pointed to by \fIws1\fR, and subsequent searches for a token will return a null pointer. If such a wide-character code is found, it is overwritten by a null wide character, which terminates the current token. The \fBwcstok()\fR and \fBwstok()\fR functions save a pointer to the following wide-character code, from which the next search for a token will start.
.sp
.LP
Each subsequent call, with a null pointer as the value of the first argument, starts searching from the saved pointer and behaves as described above.
.sp
.LP
Upon successful completion, both functions return a pointer to the first wide-character code of a token. Otherwise, if there is no token, a null pointer is returned.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
CSIEnabled
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
_
StandardSee below.
.TE

.sp
.LP
For \fBwcscat()\fR, \fBwcsncat()\fR, \fBwcscmp()\fR, \fBwcsncmp()\fR, \fBwcscpy()\fR, \fBwcsncpy()\fR, \fBwcslen()\fR, \fBwcschr()\fR, \fBwcsrchr()\fR, \fBwcspbrk()\fR, \fBwcswcs()\fR, \fBwcsspn()\fR, \fBwcscspn()\fR, and \fBwcstok()\fR, see \fBstandards\fR(5).
.SH SEE ALSO
.sp
.LP
\fBmalloc\fR(3C), \fBstring\fR(3C), \fBwcswidth\fR(3C), \fBwcwidth\fR(3C), \fBattributes\fR(5), \fBstandards\fR(5)
