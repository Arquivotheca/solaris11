'\" te
.\"  Copyright 1989 AT&T  @(#)msgrcv.2 1.33 98/05/12  Copyright (c) 1999, Sun Microsystems, Inc.  All Rights Reserved  Portions Copyright (c) 1992, X/Open Company Limited  All Rights Reserved
.\"  Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at  http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material. 
.TH msgrcv 2 "19 May 1999" "SunOS 5.11" "System Calls"
.SH NAME
msgrcv \- message receive operation
.SH SYNOPSIS
.LP
.nf
#include <sys/msg.h>

\fBssize_t\fR \fBmsgrcv\fR(\fBint\fR \fImsqid\fR, \fBvoid *\fR\fImsgp\fR, \fBsize_t\fR \fImsgsz\fR,
     \fBlong int\fR \fImsgtyp\fR, \fBint\fR \fImsgflg\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBmsgrcv()\fR function reads a message from the queue associated with the message queue identifier specified by \fImsqid\fR and places it in the user-defined buffer pointed to by \fImsgp\fR.
.sp
.LP
The \fImsgp\fR argument points to a user-defined buffer that must contain first a field of type \fBlong int\fR that will specify the type of the message, and then a data portion that will hold the data bytes of the message. The structure below is an example of what this user-defined buffer might look like:
.sp
.in +2
.nf
struct mymsg {
        long int    mtype;     /* message type */
        char        mtext[1];  /* message text */
}      
.fi
.in -2

.sp
.LP
The \fBmtype\fR member is the received message's type as specified by the sending process.
.sp
.LP
The \fBmtext\fR member is the text of the message.
.sp
.LP
The  \fImsgsz\fR argument specifies the size in bytes of \fBmtext\fR. The received message is truncated to \fImsgsz\fR bytes if it is larger than \fImsgsz\fR and (\fImsgflg\fR\fB&MSG_NOERROR\fR) is non-zero. The truncated part of the message is lost and no indication of the truncation is given to the calling process.
.sp
.LP
The \fImsgtyp\fR argument specifies the type of message requested as follows:
.RS +4
.TP
.ie t \(bu
.el o
If \fImsgtyp\fR is 0, the first message on the queue is received.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If \fImsgtyp\fR is greater than 0, the first message of type \fImsgtyp\fR is received.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If \fImsgtyp\fR is less than 0, the first message of the lowest type that is less than or equal to the absolute value of \fImsgtyp\fR is received.
.RE
.sp
.LP
The \fImsgflg\fR argument specifies which of the following actions is to be taken if a message of the desired type is not on the queue:
.RS +4
.TP
.ie t \(bu
.el o
If (\fImsgflg\fR\fB&IPC_NOWAIT\fR) is non-zero, the calling process will return immediately with a return value of \(mi1 and \fBerrno\fR set to \fBENOMSG\fR.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If (\fImsgflg\fR\fB&IPC_NOWAIT\fR) is 0, the calling process will suspend execution until one of the following occurs:
.RS +4
.TP
.ie t \(bu
.el o
A message of the desired type is placed on the queue.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The message queue identifier \fImsqid\fR is removed from the system (see \fBmsgctl\fR(2)); when this occurs, \fBerrno\fR is set equal to \fBEIDRM\fR and \fB\(mi1\fR is returned.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The calling process receives a signal that is to be caught; in this case a message is not received and the calling process resumes execution in the manner prescribed in \fBsigaction\fR(2).
.RE
.RE
.sp
.LP
Upon successful completion, the following actions are taken with respect to the data structure associated with \fImsqid\fR (see \fBIntro\fR(2)):
.RS +4
.TP
.ie t \(bu
.el o
\fBmsg_qnum\fR is decremented by 1.
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBmsg_lrpid\fR is set equal to the process \fBID\fR of the calling process.
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBmsg_rtime\fR is set equal to the current time.
.RE
.SH RETURN VALUES
.sp
.LP
Upon successful completion, \fBmsgrcv()\fR returns a value equal to the number of bytes actually placed into the buffer \fImtext\fR. Otherwise, \fB\(mi1\fR is returned, no message is received, and \fBerrno\fR is set to indicate the error.
.SH ERRORS
.sp
.LP
The \fBmsgrcv()\fR function will fail if:
.sp
.ne 2
.mk
.na
\fB\fBE2BIG\fR\fR
.ad
.RS 10n
.rt  
The value of \fBmtext\fR is greater than \fImsgsz\fR and (\fImsgflg\fR\fB&MSG_NOERROR\fR) is 0.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEACCES\fR\fR
.ad
.RS 10n
.rt  
Operation permission is denied to the calling process.  See \fBIntro\fR(2).
.RE

.sp
.ne 2
.mk
.na
\fB\fBEIDRM\fR\fR
.ad
.RS 10n
.rt  
The message queue identifier \fImsqid\fR is removed from the system.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEINTR\fR\fR
.ad
.RS 10n
.rt  
The \fBmsgrcv()\fR function was interrupted by a signal.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 10n
.rt  
The \fImsqid\fR argument is not a valid message queue identifier.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOMSG\fR\fR
.ad
.RS 10n
.rt  
The queue does not contain a message of the desired type and (\fImsgflg\fR\fB&IPC_NOWAIT\fR) is non-zero.
.RE

.sp
.LP
The \fBmsgrcv()\fR function may fail if:
.sp
.ne 2
.mk
.na
\fB \fBEFAULT\fR\fR
.ad
.RS 11n
.rt  
The \fImsgp\fR argument points to an illegal address.
.RE

.SH USAGE
.sp
.LP
The value passed as the \fImsgp\fR argument should be converted to type \fBvoid *\fR.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
\fBIntro\fR(2), \fBmsgctl\fR(2), \fBmsgget\fR(2), \fBmsgsnd\fR(2), \fBsigaction\fR(2), \fBattributes\fR(5), \fBstandards\fR(5)
