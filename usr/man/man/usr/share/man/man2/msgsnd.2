'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc.  All Rights Reserved.  Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"  Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at  http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material. 
.TH msgsnd 2 "11 Feb 2003" "SunOS 5.11" "System Calls"
.SH NAME
msgsnd \- message send operation
.SH SYNOPSIS
.LP
.nf
#include <sys/msg.h>

\fBint\fR \fBmsgsnd\fR(\fBint\fR \fImsqid\fR, \fBconst void *\fR\fImsgp\fR, \fBsize_t\fR \fImsgsz\fR, \fBint\fR \fImsgflg\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBmsgsnd()\fR function is used to send a message to the queue associated with the message queue identifier specified by \fImsqid\fR.
.sp
.LP
The \fImsgp\fR argument points to a user-defined buffer that must contain first a field of type \fBlong int\fR that will specify the type of the message, and then a data portion that will hold the data bytes of the message. The structure below is an example of what this user-defined buffer might look like:
.sp
.in +2
.nf
struct  mymsg {
        long  mtype;     /* message type */
        char  mtext[1];  /* message text */
}
.fi
.in -2

.sp
.LP
The \fBmtype\fR member is a non-zero positive type \fBlong int\fR that can be used by the receiving process for message selection.
.sp
.LP
The \fBmtext\fR member is any text of length \fImsgsz\fR bytes. The \fImsgsz\fR argument can range from 0 to a system-imposed maximum.
.sp
.LP
The \fImsgflg\fR argument specifies the action to be taken if one or more of the following are true:
.RS +4
.TP
.ie t \(bu
.el o
The number of bytes already on the queue is equal to \fBmsg_qbytes\fR. See \fBIntro\fR(2).
.RE
.RS +4
.TP
.ie t \(bu
.el o
The total number of messages on the queue would exceed the maximum allowed by the system. See NOTES.
.RE
.sp
.LP
These actions are as follows:
.RS +4
.TP
.ie t \(bu
.el o
If (\fImsgflg\fR\fB&IPC_NOWAIT\fR) is non-zero, the message will not be sent and the calling process will return immediately.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If (\fImsgflg\fR\fB&IPC_NOWAIT\fR) is 0, the calling process will suspend execution until one of the following occurs:
.RS +4
.TP
.ie t \(bu
.el o
The condition responsible for the suspension no longer exists, in which case the message is sent.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The message queue identifier \fImsqid\fR is removed from the system (see \fBmsgctl\fR(2)); when this occurs, \fBerrno\fR is set equal to \fBEIDRM\fR and \fB\(mi1\fR is returned.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The calling process receives a signal that is to be caught; in this case the message is not sent and the calling process resumes execution in the manner prescribed in \fBsigaction\fR(2).
.RE
.RE
.sp
.LP
Upon successful completion, the following actions are taken with respect to the data structure associated with \fImsqid\fR (see \fBIntro\fR(2)):
.RS +4
.TP
.ie t \(bu
.el o
\fBmsg_qnum\fR is incremented by 1.
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBmsg_lspid\fR is set equal to the process \fBID\fR of the calling process.
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBmsg_stime\fR is set equal to the current time.
.RE
.SH RETURN VALUES
.sp
.LP
Upon successful completion, \fB0\fR is returned. Otherwise, \fB\(mi1\fR is returned, no message is sent, and \fBerrno\fR is set to indicate the error.
.SH ERRORS
.sp
.LP
The \fBmsgsnd()\fR function will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEACCES\fR\fR
.ad
.RS 10n
.rt  
Operation permission is denied to the calling process. See \fBIntro\fR(2).
.RE

.sp
.ne 2
.mk
.na
\fB\fBEAGAIN\fR\fR
.ad
.RS 10n
.rt  
The message cannot be sent for one of the reasons cited above and (\fImsgflg\fR\fB&IPC_NOWAIT\fR) is non-zero.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEIDRM\fR\fR
.ad
.RS 10n
.rt  
The message queue identifier \fImsgid\fR is removed from the system.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEINTR\fR\fR
.ad
.RS 10n
.rt  
The \fBmsgsnd()\fR function was interrupted by a signal.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 10n
.rt  
The value of \fImsqid\fR is not a valid message queue identifier, or the value of \fBmtype\fR is less than 1.
.sp
The value of \fImsgsz\fR is less than 0 or greater than the system-imposed limit.
.RE

.sp
.LP
The \fBmsgsnd()\fR function may fail if:
.sp
.ne 2
.mk
.na
\fB \fBEFAULT\fR\fR
.ad
.RS 11n
.rt  
The \fImsgp\fR argument points to an illegal address.
.RE

.SH USAGE
.sp
.LP
The value passed as the \fImsgp\fR argument should be converted to type \fBvoid *\fR.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
\fBrctladm\fR(1M), \fBIntro\fR(2), \fBmsgctl\fR(2), \fBmsgget\fR(2), \fBmsgrcv\fR(2), \fBsetrctl\fR(2), \fBsigaction\fR(2), \fBattributes\fR(5), \fBstandards\fR(5)
.SH NOTES
.sp
.LP
The maximum number of messages allowed on a message queue is the minimum enforced value of the \fBprocess.max-msg-messages\fR resource control of the creating process at the time \fBmsgget\fR(2) was used to allocate the queue.
.sp
.LP
 See \fBrctladm\fR(1M) and \fBsetrctl\fR(2) for information about using resource controls.
