'\" te
.\" Copyright (c) 2008, 2011, Oracle and/or its affiliates. All rights reserved.
.\" Copyright 1989 AT&T
.TH shmop 2 "24 Mar 2011" "SunOS 5.11" "System Calls"
.SH NAME
shmop, shmat, shmdt \- shared memory operations
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/shm.h>

\fBvoid *\fR\fBshmat\fR(\fBint\fR \fIshmid\fR, \fBconst void *\fR\fIshmaddr\fR, \fBint\fR \fIshmflg\fR);
.fi

.LP
.nf
\fBint\fR \fBshmdt\fR(\fBconst void *\fR\fIshmaddr\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBshmat()\fR function attaches the shared memory segment associated with the shared memory identifier specified by \fIshmid\fR to the data segment of the calling process.
.sp
.LP
The permission required for a shared memory control operation is given as {\fItoken\fR}, where \fItoken\fR is the type of permission needed. The types of permission are interpreted as follows:
.sp
.in +2
.nf
00400    READ by user
00200    WRITE by user
00040    READ by group
00020    WRITE by group
00004    READ by others
00002    WRITE by others
.fi
.in -2

.sp
.LP
See the \fIShared Memory Operation Permissions\fR section of \fBIntro\fR(2) for more information.
.sp
.LP
For shared memory segments created with the \fBSHM_SHARE_MMU\fR or \fBSHM_PAGEABLE\fR flags, the default protections cannot be changed so as to prevent a single process from affecting other processes sharing the same shared segment.
.sp
.LP
When (\fIshmflg\fR\fB&SHM_SHARE_MMU\fR) is true, virtual memory resources in addition to shared memory itself are shared among processes that use the same shared memory.
.sp
.LP
When (\fIshmflg\fR\fB&SHM_PAGEABLE\fR) is true, virtual memory resources are shared and the dynamic shared memory (DISM) framework is created. The dynamic shared memory can be resized dynamically within the specified size in \fBshmget\fR(2). The DISM shared memory is pageable unless it is locked.
.sp
.LP
The shared memory segment is attached to the data segment of the calling process at the address specified based on one of the  following criteria:
.RS +4
.TP
.ie t \(bu
.el o
If \fIshmaddr\fR is equal to \fB(void *) 0\fR, the segment is attached to the first available address as selected by the system.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If  \fIshmaddr\fR is equal to  \fB(void\fR \fB*)\fR \fB0\fR and ( \fIshmflg\fR\fB&SHM_SHARE_MMU\fR\fI)\fR or (\fIshmflg\fR\fB&SHM_PAGEABLE\fR) is true, then the segment is attached to the first available suitably aligned address. When (\fIshmflg\fR\fB&SHM_SHARE_MMU\fR) or (\fIshmflg\fR\fB&SHM_PAGEABLE\fR) is set, however, the permission given by  \fBshmget()\fR determines whether the segment is attached for reading or reading and writing.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If \fIshmaddr\fR is not equal to \fB(void *) 0\fR and (\fIshmflg\fR\fB&SHM_RND\fR) is true, the segment is attached to the address given by (\fIshmaddr\fR\fB-\fR  (\fIshmaddr\fR modulus \fBSHMLBA\fR)).
.RE
.RS +4
.TP
.ie t \(bu
.el o
If \fIshmaddr\fR is not equal to \fB(void *) 0\fR and (\fIshmflg\fR\fB&SHM_RND\fR) is false, the segment is attached to the address given by \fIshmaddr\fR.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The segment is attached for reading if (\fIshmflg\fR\fB&SHM_RDONLY\fR) is true \fB{READ}\fR, otherwise it is attached for reading and writing \fB{READ/WRITE}\fR.
.RE
.sp
.LP
The \fBshmdt()\fR function detaches from the calling process's data segment the shared memory segment located at the address specified by \fIshmaddr\fR.
.sp
.LP
Shared memory segments must be explicitly removed after the last reference to them has been removed.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, \fBshmat()\fR returns the data segment start address of the attached shared memory segment; \fBshmdt()\fR returns \fB0\fR. Otherwise, \fB\(mi1\fR is returned, the shared memory segment is not attached, and \fBerrno\fR is set to indicate the error.
.SH ERRORS
.sp
.LP
The \fBshmat()\fR function will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEACCES\fR\fR
.ad
.RS 10n
.rt  
Operation permission is denied to the calling process (see \fBIntro\fR(2)).
.RE

.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 10n
.rt  
The \fIshmid\fR argument is not a valid shared memory identifier.
.sp
The \fIshmaddr\fR argument is not equal to 0, and the value of (\fIshmaddr\fR\fB-\fR  (\fIshmaddr\fR modulus \fBSHMLBA\fR)) is an illegal address.
.sp
The \fIshmaddr\fR argument is not equal to 0, is an illegal address, and (\fIshmflg\fR\fB&SHM_RND\fR) is false.
.sp
The \fIshmaddr\fR argument is not equal to 0, is not properly aligned, and (\fIshmfg\fR\fB&SHM_SHARE_MMU\fR) is true.
.sp
\fBSHM_SHARE_MMU\fR is not supported in certain architectures.
.sp
Both (\fIshmflg\fR\fB&SHM_SHARE_MMU\fR) and \fI(shmflg\fR\fB&SHM_PAGEABLE\fR) are true.
.sp
(\fIshmflg\fR\fB&SHM_SHARE_MMU\fR) is true and the shared memory segment specified by \fBshmid()\fR had previously been attached by a call to \fBshmat()\fR in which (\fIshmflg\fR\fB&SHM_PAGEABLE\fR) was true.
.sp
(\fIshmflg\fR\fB&SHM_PAGEABLE\fR) is true and the shared memory segment specified by \fBshmid()\fR had previously been attached by a call to \fBshmat()\fR in which (\fIshmflg\fR\fB&SHM_SHARE_MMU\fR) was true.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEMFILE\fR\fR
.ad
.RS 10n
.rt  
The number of shared memory segments attached to the calling process would exceed the system-imposed limit.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOMEM\fR\fR
.ad
.RS 10n
.rt  
The available data space  is not large enough to accommodate the shared memory segment.
.RE

.sp
.LP
The \fBshmdt()\fR function will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 10n
.rt  
The \fIshmaddr\fR argument is not the data segment start address of a shared memory segment.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOMEM\fR\fR
.ad
.RS 10n
.rt  
(\fIshmflg\fR\fB&SHM_SHARE_MMU\fR) is true and attaching to the shared memory segment would exceed a limit or resource control on locked memory.
.RE

.SH WARNINGS
.sp
.LP
Using a fixed value for the \fIshmaddr\fR argument can adversely affect performance on certain platforms due to D-cache aliasing.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelAsync-Signal-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
\fBIntro\fR(2), \fBexec\fR(2), \fBexit\fR(2), \fBfork\fR(2), \fBshmctl\fR(2), \fBshmget\fR(2), \fBattributes\fR(5), \fBstandards\fR(5)
