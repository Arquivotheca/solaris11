'\" te
.\"  Copyright (c) 2000, Sun Microsystems, Inc.  All Rights Reserved
.TH csx_Parse_CISTPL_BYTEORDER  9F "20 Dec 1996" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
csx_Parse_CISTPL_BYTEORDER \- parse the Byte Order tuple
.SH SYNOPSIS
.LP
.nf
#include <sys/pccard.h> 



\fBint32_t\fR \fBcsx_Parse_CISTPL_BYTEORDER\fR(\fBclient_handle_t\fR \fIch\fR, \fBtuple_t *\fR\fItu\fR,
     \fBcistpl_byteorder_t *\fR\fIcbo\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris \fBDDI \fRSpecific (Solaris \fBDDI) \fR
.SH PARAMETERS
.sp
.ne 2
.mk
.na
\fB\fIch\fR \fR
.ad
.RS 8n
.rt  
Client handle returned from \fBcsx_RegisterClient\fR(9F). 
.RE

.sp
.ne 2
.mk
.na
\fB\fItu\fR \fR
.ad
.RS 8n
.rt  
Pointer to a \fBtuple_t\fR structure (see \fBtuple\fR(9S)) returned by a call to \fBcsx_GetFirstTuple\fR(9F) or \fBcsx_GetNextTuple\fR(9F). 
.RE

.sp
.ne 2
.mk
.na
\fB\fIcbo\fR \fR
.ad
.RS 8n
.rt  
Pointer to a \fBcistpl_byteorder_t\fR structure which contains the parsed \fBCISTPL_BYTEORDER\fR tuple information upon return from this function.
.RE

.SH DESCRIPTION
.sp
.LP
This function parses the Byte Order tuple, \fBCISTPL_BYTEORDER\fR, into a form usable by \fBPC \fRCard drivers.
.sp
.LP
The \fBCISTPL_BYTEORDER\fR tuple shall only appear in a partition tuple set for a memory-like partition. It specifies two parameters: the order for multi-byte data, and the order in which bytes map into words for 16-bit cards.
.SH STRUCTURE MEMBERS
.sp
.LP
The structure members of \fBcistpl_byteorder_t\fR are:
.sp
.in +2
.nf
uint32_t     order;     /* byte order code */
uint32_t     map;       /* byte mapping code */
.fi
.in -2

.sp
.LP
The fields are defined as follows:
.sp
.ne 2
.mk
.na
\fB\fBorder\fR \fR
.ad
.RS 10n
.rt  
This field specifies the byte order for multi-byte numeric data.
.sp
.ne 2
.mk
.na
\fBTPLBYTEORD_LOW\fR
.ad
.RS 18n
.rt  
Little endian order
.RE

.sp
.ne 2
.mk
.na
\fBTPLBYTEORD_VS\fR
.ad
.RS 18n
.rt  
Vendor specific
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBmap\fR \fR
.ad
.RS 10n
.rt  
This field specifies the byte mapping for 16-bit or wider cards.
.sp
.ne 2
.mk
.na
\fBTPLBYTEMAP_LOW\fR
.ad
.RS 19n
.rt  
Byte zero is least significant byte
.RE

.sp
.ne 2
.mk
.na
\fBTPLBYTEMAP_HIGH\fR
.ad
.RS 19n
.rt  
Byte zero is most significant byte
.RE

.sp
.ne 2
.mk
.na
\fBTPLBYTEMAP_VS\fR
.ad
.RS 19n
.rt  
Vendor specific mapping
.RE

.RE

.SH RETURN VALUES
.sp
.ne 2
.mk
.na
\fB\fBCS_SUCCESS\fR \fR
.ad
.RS 28n
.rt  
Successful operation.
.RE

.sp
.ne 2
.mk
.na
\fB\fBCS_BAD_HANDLE\fR \fR
.ad
.RS 28n
.rt  
Client handle is invalid.
.RE

.sp
.ne 2
.mk
.na
\fB\fBCS_UNKNOWN_TUPLE\fR \fR
.ad
.RS 28n
.rt  
Parser does not know how to parse tuple.
.RE

.sp
.ne 2
.mk
.na
\fB\fBCS_NO_CARD\fR \fR
.ad
.RS 28n
.rt  
No \fBPC \fRCard in socket.
.RE

.sp
.ne 2
.mk
.na
\fB\fBCS_NO_CIS\fR \fR
.ad
.RS 28n
.rt  
No Card Information Structure (CIS) \fBPC \fRCard.
.RE

.sp
.ne 2
.mk
.na
\fB\fBCS_UNSUPPORTED_FUNCTION\fR \fR
.ad
.RS 28n
.rt  
No \fBPCMCIA \fRhardware installed.
.RE

.SH CONTEXT
.sp
.LP
This function may be called from user or kernel context.
.SH SEE ALSO
.sp
.LP
\fBcsx_GetFirstTuple\fR(9F), \fBcsx_GetTupleData\fR(9F), \fBcsx_RegisterClient\fR(9F), \fBcsx_ValidateCIS\fR(9F), \fBtuple\fR(9S) 
.sp
.LP
\fIPC Card 95 Standard, PCMCIA/JEIDA\fR
