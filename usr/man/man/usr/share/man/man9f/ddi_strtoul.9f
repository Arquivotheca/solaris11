'\" te
.\"  Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved
.TH ddi_strtoul 9F "13 May 2004" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_strtoul \- String conversion functions
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h> 
#include <sys/sunddi.h>

\fBint\fR \fBddi_strtoul\fR(\fBconst char *\fR\fIstr\fR, \fBchar **\fR\fIendptr\fR, \fBint\fR \fIbase\fR, 
     \fBunsigned long *\fR\fIresult\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH PARAMETERS
.sp
.ne 2
.mk
.na
\fB\fIstr\fR \fR
.ad
.RS 11n
.rt  
Pointer to a character string to be converted.
.RE

.sp
.ne 2
.mk
.na
\fB\fIendptr\fR \fR
.ad
.RS 11n
.rt  
Post-conversion final string of unrecognized characters.
.RE

.sp
.ne 2
.mk
.na
\fB\fIbase\fR\fR
.ad
.RS 11n
.rt  
Radix used for conversion.
.RE

.sp
.ne 2
.mk
.na
\fB\fIresult\fR \fR
.ad
.RS 11n
.rt  
Pointer to variable which contains the converted value.
.RE

.SH DESCRIPTION
.sp
.LP
The \fBddi_strtoul()\fR function converts the initial portion of the string pointed to by \fIstr\fR to a type \fBunsigned long\fR int representation and stores the converted value in \fIresult\fR.
.sp
.LP
The  function first decomposes the input string into three parts:
.RS +4
.TP
1.
An initial (possibly empty) sequence of white-space characters (' ', '\et', '\en', '\er', '\ef')
.RE
.RS +4
.TP
2.
A subject sequence interpreted as an integer represented in some radix determined by the value of \fIbase\fR
.RE
.RS +4
.TP
3.
A final  string of one or more unrecognized characters, including the terminating null byte of the input string.
.RE
.sp
.LP
The \fBddi_strtoul()\fR function then attempts to convert the subject sequence to an \fBunsigned\fR integer and returns the result.
.sp
.LP
If the value of \fIbase\fR is 0, the expected form of the  subject sequence is that of a decimal constant, octal constant or hexadecimal constant, any of which may be preceded by a plus ("+") or minus ("-") sign. A decimal constant begins with a non-zero digit, and consists of a sequence of decimal digits. An octal constant consists  of  the prefix 0 optionally followed by a sequence of the digits 0 to 7 only. A hexadecimal  constant consists of the prefix 0x or 0X followed by a sequence of the decimal digits and letters a (or A) to f (or F) with values 10 to 15 respectively.
.sp
.LP
If the value of \fIbase\fR is between 2 and 36, the expected form of  the subject sequence is a sequence of letters and digits representing an integer with the radix specified by \fIbase\fR, optionally preceded by a plus or minus sign. The letters from a (or A) to z (or Z) inclusive are ascribed the values 10 to 35 and only letters whose ascribed values are less than that of \fIbase\fR are permitted. If the value of \fIbase\fR is 16, the characters 0x or 0X may optionally precede the sequence of letters and digits, following the sign if present.
.sp
.LP
The subject sequence is defined  as the longest initial subsequence of the input string, starting with the first non-white-space character that is of the expected form. The subject sequence contains no characters if the input string is empty or consists entirely of white-space characters, or if the first non-white-space character is other than a sign or a permissible letter or digit.
.sp
.LP
If the subject sequence has the expected form and the  value of \fIbase\fR is 0, the sequence of characters starting with the first digit is interpreted as an integer constant. If the subject sequence has the expected form and the value of \fIbase\fR is between 2 and 36, it is used as the \fIbase\fR for conversion, ascribing  to each letter its value as given above. If the subject sequence begins with a minus sign, the value resulting from the conversion is negated. A pointer to the final string is stored in the object pointed to by \fIendptr\fR, provided that \fIendptr\fR is not a null pointer.
.sp
.LP
If the subject sequence is empty or does not have the expected  form, no conversion is performed and the value of \fIstr\fR is stored in the object pointed to by \fIendptr\fR, provided that \fIendptr\fR is not a null pointer.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, \fBddi_strtoul()\fR returns \fB0\fR and stores the converted value in \fIresult\fR. If no conversion is performed due to invalid \fIbase\fR, \fBddi_strtoul()\fR returns \fBEINVAL\fR and the variable pointed by \fIresult\fR is not changed.
.sp
.LP
If the correct value is outside the range  of representable values, \fBddi_strtoul()\fR returns \fBERANGE\fR and the value pointed to by \fIresult\fR is not changed.
.SH CONTEXT
.sp
.LP
The \fBddi_strtoul()\fR function may be called from user, kernel or interrupt context.
.SH SEE ALSO
.sp
.LP
\fIWriting Device Drivers\fR
