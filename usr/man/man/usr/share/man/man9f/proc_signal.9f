'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc., All Rights Reserved
.TH proc_signal 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
proc_signal, proc_ref, proc_unref \- send a signal to a process
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>
#include <sys/signal.h>



\fBvoid *\fR\fBproc_ref\fR(void)
.fi

.LP
.nf
\fBvoid\fR\fBproc_unref\fR(\fBvoid\fR \fI*pref\fR);
.fi

.LP
.nf
\fBint\fR \fBproc_signal\fR(\fBvoid\fR \fI*pref\fR, \fBint\fR \fIsig\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
\fB\fIpref\fR\fR
.ad
.RS 8n
.rt  
A handle for the process to be signalled.
.RE

.sp
.ne 2
.mk
.na
\fB\fIsig\fR\fR
.ad
.RS 8n
.rt  
Signal number to be sent to the process.
.RE

.SH DESCRIPTION
.sp
.LP
This set of routines allows a driver to send a signal to a process. The routine \fBproc_ref()\fR is used to retrieve an unambiguous reference to the process for signalling purposes. The return value can be used as a unique handle on the process, even if the process dies. Because system resources are committed to a process reference, \fBproc_unref()\fR should be used to remove it as soon as it is no longer needed.\fBproc_signal()\fR is used to send signal \fIsig\fR to the referenced process. The following set of signals may be sent to a process from a driver:
.sp
.ne 2
.mk
.na
\fB\fBSIGHUP\fR\fR
.ad
.RS 12n
.rt  
The device has been disconnected.
.RE

.sp
.ne 2
.mk
.na
\fB\fBSIGINT\fR\fR
.ad
.RS 12n
.rt  
The interrupt character has been received.
.RE

.sp
.ne 2
.mk
.na
\fB\fBSIGQUIT\fR\fR
.ad
.RS 12n
.rt  
The quit character has been received.
.RE

.sp
.ne 2
.mk
.na
\fB\fBSIGPOLL\fR\fR
.ad
.RS 12n
.rt  
A pollable event has occurred.
.RE

.sp
.ne 2
.mk
.na
\fB\fBSIGKILL\fR\fR
.ad
.RS 12n
.rt  
Kill the process (cannot be caught or ignored).
.RE

.sp
.ne 2
.mk
.na
\fB\fBSIGWINCH\fR\fR
.ad
.RS 12n
.rt  
Window size change.
.RE

.sp
.ne 2
.mk
.na
\fB\fBSIGURG\fR\fR
.ad
.RS 12n
.rt  
Urgent data are available.
.RE

.sp
.LP
See \fBsignal.h\fR(3HEAD) for more details on the meaning of these signals.
.sp
.LP
If the process has exited at the time the signal was sent, \fBproc_signal()\fR returns an error code; the caller should remove the reference on the process by calling \fBproc_unref()\fR.
.sp
.LP
The driver writer must ensure that for each call made to \fBproc_ref()\fR, there is exactly one corresponding call to \fBproc_unref()\fR.
.SH RETURN VALUES
.sp
.LP
The \fBproc_ref()\fR returns the following:
.sp
.ne 2
.mk
.na
\fB\fIpref\fR\fR
.ad
.RS 8n
.rt  
An opaque handle used to refer to the current process.
.RE

.sp
.LP
The \fBproc_signal()\fR returns the following: 
.sp
.ne 2
.mk
.na
\fB\fB0\fR\fR
.ad
.RS 6n
.rt  
The process existed before the signal was sent.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-1\fR\fR
.ad
.RS 6n
.rt  
The process no longer exists; no signal was sent.
.RE

.SH CONTEXT
.sp
.LP
The \fBproc_unref()\fR and \fBproc_signal()\fR functions can be called from user, interrupt, or kernel context. The \fBproc_ref()\fR function should be called only from user context.
.SH SEE ALSO
.sp
.LP
\fBsignal.h\fR(3HEAD), \fBputnextctl1\fR(9F)
.sp
.LP
\fIWriting Device Drivers\fR
