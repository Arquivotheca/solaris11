'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc. All Rights Reserved.
.TH nvlist_add_boolean 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
nvlist_add_boolean, nvlist_add_boolean_value, nvlist_add_byte, nvlist_add_int8, nvlist_add_uint8, nvlist_add_int16, nvlist_add_uint16, nvlist_add_int32, nvlist_add_uint32, nvlist_add_int64, nvlist_add_uint64, nvlist_add_string, nvlist_add_nvlist, nvlist_add_nvpair, nvlist_add_boolean_array, nvlist_add_int8_array, nvlist_add_uint8_array, nvlist_add_nvlist_array, nvlist_add_byte_array, nvlist_add_int16_array, nvlist_add_uint16_array, nvlist_add_int32_array, nvlist_add_uint32_array, nvlist_add_int64_array, nvlist_add_uint64_array, nvlist_add_string_array, nvlist_t \- value pair functions
.SH SYNOPSIS
.LP
.nf
#include <sys/nvpair.h>

\fBint\fR \fBnvlist_add_boolean\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_boolean_value\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, 
      \fBboolean_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_byte\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBuchar_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int8\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBint8_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint8\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBuint8_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int16\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBint16_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint16\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBuint16_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int32\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBint32_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint32\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBuint32_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int64\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBint64_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint64\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBuint64_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_string\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBchar *\fR\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_nvlist\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBnvlist_t *\fR\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_nvpair\fR(\fBnvlist_t *\fR\fInvl\fR, \fBnvpair_t *\fR\fInvp\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_boolean_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, 
     \fBboolean_t *\fR\fIval\fR, \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_byte_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBuchar_t *\fR\fIval\fR,
     \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int8_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBint8_t *\fR\fIval\fR,
     \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint8_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, 
     \fBuint8_t *\fR\fIval\fR uint_t nelem);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int16_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBint16_t *\fR\fIval\fR,
     \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint16_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBuint16_t *\fR\fIval\fR,
     \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int32_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBint32_t *\fR\fIval\fR,
     \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint32_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBuint32_t *\fR\fIval\fR,
     \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int64_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBint64_t *\fR\fIval\fR,
     \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint64_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, \fBuint64_t *\fR\fIval\fR,
     \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_string_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, 
     \fBconst *char *\fR\fIval\fR, \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_nvlist_array\fR(\fBnvlist_t *\fR\fInvl\fR, \fBconst char *\fR\fIname\fR, 
     \fBnvlist_t **\fR\fIval\fR, \fBuint_t\fR \fInelem\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH PARAMETERS
.sp
.ne 2
.mk
.na
\fB\fInvl\fR\fR
.ad
.RS 9n
.rt  
The \fBnvlist_t\fR to be processed.
.RE

.sp
.ne 2
.mk
.na
\fB\fInvp\fR\fR
.ad
.RS 9n
.rt  
The \fBnvpair_t\fR (name-value pair) to be processed.
.RE

.sp
.ne 2
.mk
.na
\fB\fIname\fR\fR
.ad
.RS 9n
.rt  
Name of the name-value pair (\fBnvpair\fR).
.RE

.sp
.ne 2
.mk
.na
\fB\fInelem\fR\fR
.ad
.RS 9n
.rt  
Number of elements in value (that is, array size).
.RE

.sp
.ne 2
.mk
.na
\fB\fIval\fR\fR
.ad
.RS 9n
.rt  
Value or starting address of the array value.
.RE

.SH DESCRIPTION
.sp
.LP
These functions add a new name-value pair to an \fBnvlist_t\fR. The memory allocation policy follows that specified in \fBnvlist_alloc()\fR, \fBnvlist_unpack()\fR, or \fBnvlist_dup()\fR. See \fBnvlist_alloc\fR(9F). The uniqueness of \fBnvpair\fR name and data types follows the \fInvflag\fR argument specified in \fBnvlist_alloc()\fR.
.sp
.LP
If \fBNV_UNIQUE_NAME\fR was specified for \fInvflag\fR, existing \fBnvpair\fRs with matching names are removed before the new \fBnvpair\fR is added.
.sp
.LP
If \fBNV_UNIQUE_NAME_TYPE\fR was specified for \fInvflag\fR, existing \fBnvpair\fRs with matching names and data types are removed before the new \fBnvpair\fR is added.
.sp
.LP
If neither was specified for \fInvflag\fR, the new \fBnvpair\fR is unconditionally added at the end of the list. The library preserves the order of the name-value pairs across packing, unpacking, and duplication.
.sp
.LP
Multiple threads can simultaneously read the same nvlist_t, but only one thread may actively change a given nvlist_t at a time. The caller is responsible for the synchronization.
.sp
.LP
The \fBnvlist_add_boolean()\fR function is deprecated and the \fBnvlist_add_boolean_value()\fR function is used instead.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
\fB\fB0\fR\fR
.ad
.RS 10n
.rt  
success
.RE

.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 10n
.rt  
invalid argument
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOMEM\fR\fR
.ad
.RS 10n
.rt  
insufficient memory
.RE

.SH CONTEXT
.sp
.LP
These functions can be called from interrupt context only if (1) the default allocator is used and the \fBKM_NOSLEEP\fR flag is set, or (2) the specified allocator did not sleep for free memory (for example, if it uses a pre-allocated buffer for memory allocations). 
.sp
.LP
See \fBnvlist_alloc\fR(9F) for a description of pluggable allocators and KM_NOSLEEP. These functions can be called from user or kernel context in all cases.
