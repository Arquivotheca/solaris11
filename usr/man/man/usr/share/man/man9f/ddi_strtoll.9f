'\" te
.\" Copyright (c) 2001, The IEEE and The Open Group. All Rights Reserved.
.\" Portions Copyright (c) 2009, Sun Microsystems Inc. All Rights Reserved.
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.  This notice shall appear on any product containing this material.
.TH ddi_strtoll 9F "25 Feb 2009" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_strtoll, ddi_strtoull \- string conversion functions
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>

\fBint\fR \fBddi_strtoll\fR(\fBconst char *\fR\fIstr\fR, \fBchar **\fR\fIendptr\fR, \fBint\fR \fIbase\fR,
     \fBlonglong_t *\fR\fIresult\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_strtoull\fR(\fBconst char *\fR\fIstr\fR, \fBchar **\fR\fIendptr\fR, \fBint\fR \fIbase\fR,
     \fBu_longlong_t *\fR\fIresult\fR);
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
\fB\fIstr\fR\fR
.ad
.RS 10n
.rt  
pointer to a character string to be converted
.RE

.sp
.ne 2
.mk
.na
\fB\fIendptr\fR\fR
.ad
.RS 10n
.rt  
post-conversion final string of unrecognized characters
.RE

.sp
.ne 2
.mk
.na
\fB\fIbase\fR\fR
.ad
.RS 10n
.rt  
radix used for conversion
.RE

.sp
.ne 2
.mk
.na
\fB\fIresult\fR\fR
.ad
.RS 10n
.rt  
pointer to variable which contains the converted value
.RE

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH DESCRIPTION
.sp
.LP
The \fBddi_strtoll()\fR function converts the initial portion of the string pointed to by \fIstr\fR to a type \fBlonglong_t\fR representation and stores the converted value in \fIresult\fR.
.sp
.LP
The \fBddi_strtoull()\fR function converts the initial portion of the string pointed to by \fIstr\fR to a type \fBu_longlong_t\fR representation and stores the converted value in \fIresult\fR.
.sp
.LP
These functions first decomposes the input string into three parts:
.RS +4
.TP
1.
An initial (possibly empty) sequence of white-space characters (" ", "\et", "\en", "\er", "\ef")
.RE
.RS +4
.TP
2.
A subject sequence interpreted as an integer represented in some radix determined by the value of base
.RE
.RS +4
.TP
3.
A final string of one or more unrecognized characters, including the terminating null byte of the input string.
.RE
.sp
.LP
The \fBddi_strtoll()\fR function then attempts to convert the subject sequence to an integer and returns the result. The \fBddi_strtoull()\fR function attempts to convert the subject sequence to an unsigned integer and returns the result.
.sp
.LP
If the value of base is 0, the expected form of the subject sequence is that of a decimal constant, octal constant or hexadecimal constant, any of which may be preceded by a plus ("+") or minus ("-") sign. A decimal constant begins with a non-zero digit, and consists of a sequence of decimal digits. An octal constant consists of the prefix 0 optionally followed by a sequence of the digits 0 to 7 only. A hexadecimal constant consists of the prefix 0x or 0X followed by a sequence of the decimal digits and letters a (or A) to f (or F) with values 10 to 15 respectively.
.sp
.LP
If the value of base is between 2 and 36, the expected form of the subject sequence is a sequence of letters and digits representing an integer with the radix specified by base, optionally preceded by a plus or minus sign. The letters from a (or A) to z (or Z) inclusive are ascribed the values 10 to 35 and only letters whose ascribed values are less than that of base are permitted. If the value of base is 16, the characters 0x or 0X may optionally precede the sequence of letters and digits, following the sign if present.
.sp
.LP
The subject sequence is defined as the longest initial subsequence of the input string, starting with the first non-white-space character that is of the expected form. The subject sequence contains no characters if the input string is empty or consists entirely of white-space characters, or if the first non-white-space character is other than a sign or a permissible letter or digit.
.sp
.LP
If the subject sequence has the expected form and the value of base is 0, the sequence of characters starting with the first digit is interpreted as an integer constant. If the subject sequence has the expected form and the value of base is between 2 and 36, it is used as the base for conversion, ascribing to each letter its value as given above. If the subject sequence begins with a minus sign, the value resulting from the conversion is negated. A pointer to the final string is stored in the object pointed to by \fIendptr\fR, provided that \fIendptr\fR is not a null pointer.
.sp
.LP
If the subject sequence is empty or does not have the expected form, no conversion is performed and the value of \fIstr\fR is stored in the object pointed to by \fIendptr\fR, provided that \fIendptr\fR is not a null pointer.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, these functions return 0 and store the converted value in \fIresult\fR. If no conversion is performed due to an invalid base, these functions return \fBEINVAL\fR and the variable pointed by \fIresult\fR is not changed.
.SH CONTEXT
.sp
.LP
These functions may be called from user, kernel or interrupt context.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
\fIWriting Device Drivers\fR
