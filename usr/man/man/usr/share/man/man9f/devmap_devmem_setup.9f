'\" te
.\"  Copyright (c) 2006, Sun Microsystems, Inc. All Rights Reserved
.TH devmap_devmem_setup 9F "05 Jun 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
devmap_devmem_setup, devmap_umem_setup \- set driver memory mapping parameters 
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h> 
#include <sys/sunddi.h>



\fBint\fR \fBdevmap_devmem_setup\fR(\fBdevmap_cookie_t\fR \fIdhp\fR, \fBdev_info_t *\fR\fIdip\fR, 
     \fBstruct devmap_callback_ctl *\fR\fIcallbackops\fR, \fBuint_t\fR \fIrnumber\fR, 
     \fBoffset_t\fR \fIroff\fR,  \fBsize_t\fR \fIlen\fR, \fBuint_t\fR \fImaxprot\fR, 
     \fBuint_t\fR \fIflags\fR, \fBddi_device_acc_attr_t *\fR\fIaccattrp\fR);
.fi

.LP
.nf
\fBint\fR \fBdevmap_umem_setup\fR(\fBdevmap_cookie_t\fR \fIdhp\fR, \fBdev_info_t *\fR\fIdip\fR, 
     \fBstruct devmap_callback_ctl *\fR\fIcallbackops\fR, \fBddi_umem_cookie_t\fR \fIcookie\fR, 
     \fBoffset_t\fR \fIkoff\fR, \fBsize_t\fR \fIlen\fR, \fBuint_t\fR \fImaxprot\fR, \fBuint_t\fR \fIflags\fR, 
     \fBddi_device_acc_attr_t *\fR\fIaccattrp\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.LP
\fBdevmap_devmem_setup()\fR parameters:
.sp
.ne 2
.mk
.na
\fB\fIdhp\fR\fR
.ad
.RS 15n
.rt  
An opaque mapping handle that the system uses to describe the mapping.
.RE

.sp
.ne 2
.mk
.na
\fB\fIdip\fR\fR
.ad
.RS 15n
.rt  
Pointer to the device's \fBdev_info\fR structure.
.RE

.sp
.ne 2
.mk
.na
\fB\fIcallbackops\fR\fR
.ad
.RS 15n
.rt  
Pointer to a \fBdevmap_callback_ctl\fR(9S) structure. The structure contains pointers to device driver-supplied functions that manage events on the device mapping. The framework will copy the structure to the system private memory.
.RE

.sp
.ne 2
.mk
.na
\fB\fIrnumber\fR\fR
.ad
.RS 15n
.rt  
Index number to the register address space set.
.RE

.sp
.ne 2
.mk
.na
\fB\fIroff\fR\fR
.ad
.RS 15n
.rt  
Offset into the register address space.
.RE

.sp
.ne 2
.mk
.na
\fB\fIlen\fR\fR
.ad
.RS 15n
.rt  
Length (in bytes) of the mapping to be mapped.
.RE

.sp
.ne 2
.mk
.na
\fB\fImaxprot\fR\fR
.ad
.RS 15n
.rt  
Maximum protection flag possible for attempted mapping. Some combinations of possible settings are:
.sp
.ne 2
.mk
.na
\fB\fBPROT_READ\fR\fR
.ad
.RS 14n
.rt  
Read access is allowed.
.RE

.sp
.ne 2
.mk
.na
\fB\fBPROT_WRITE\fR\fR
.ad
.RS 14n
.rt  
Write access is allowed.
.RE

.sp
.ne 2
.mk
.na
\fB\fBPROT_EXEC\fR\fR
.ad
.RS 14n
.rt  
Execute access is allowed.
.RE

.sp
.ne 2
.mk
.na
\fB\fBPROT_USER\fR\fR
.ad
.RS 14n
.rt  
User-level access is allowed. The mapping is done as a result of a \fBmmap\fR(2) system call.
.RE

.sp
.ne 2
.mk
.na
\fB\fBPROT_ALL\fR\fR
.ad
.RS 14n
.rt  
All access is allowed.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fIflags\fR\fR
.ad
.RS 15n
.rt  
Used to determine the cache attribute.
.sp
Possible values of the cache attribute are:
.sp
.ne 2
.mk
.na
\fB\fBIOMEM_DATA_CACHED\fR\fR
.ad
.RS 28n
.rt  
The CPU can cache the data it fetches and push it to memory at a later time. This is the default attribute that is used if no cache attributes are specified.
.RE

.sp
.ne 2
.mk
.na
\fB\fBIOMEM_DATA_UC_WR_COMBINE\fR\fR
.ad
.RS 28n
.rt  
The CPU never caches the data, but writes can occur out of order or can be combined. Reordering is implied.
.sp
If \fBIOMEM_DATA_UC_WR_COMBINE\fR is specified but not supported, \fBIOMEM_DATA_UNCACHED\fR is used instead.
.RE

.sp
.ne 2
.mk
.na
\fB\fBIOMEM_DATA_UNCACHED\fR\fR
.ad
.RS 28n
.rt  
The CPU never caches data, but has uncacheable access to memory. Strict ordering is implied.
.RE

The cache attributes are mutually exclusive. Any combination of the values leads to a failure. On the SPARC architecture, only \fBIOMEM_DATA_CACHED\fR is meaningful. Others lead to a failure.
.RE

.sp
.ne 2
.mk
.na
\fB\fIaccattrp\fR\fR
.ad
.RS 15n
.rt  
Pointer to a \fBddi_device_acc_attr()\fR structure of the device. See \fBddi_device_acc_attr\fR(9S). The value in \fBdevacc_attr_dataorder\fR is ignored in the current release. The value in \fBdevacc_attr_endian_flags\fR is meaningful on the SPARC architecture only.
.RE

.sp
.LP
\fBdevmap_umem_setup()\fR parameters:
.sp
.ne 2
.mk
.na
\fB\fIdhp\fR\fR
.ad
.RS 15n
.rt  
An opaque data structure that the system uses to describe the mapping.
.RE

.sp
.ne 2
.mk
.na
\fB\fIdip\fR\fR
.ad
.RS 15n
.rt  
Pointer to the device's \fBdev_info\fR structure.
.RE

.sp
.ne 2
.mk
.na
\fB\fIcallbackops\fR\fR
.ad
.RS 15n
.rt  
Pointer to a \fBdevmap_callback_ctl\fR(9S) structure. The structure contains pointers to device driver-supplied functions that manage events on the device mapping.
.RE

.sp
.ne 2
.mk
.na
\fB\fIcookie\fR\fR
.ad
.RS 15n
.rt  
A kernel memory \fIcookie\fR (see \fBddi_umem_alloc\fR(9F)).
.RE

.sp
.ne 2
.mk
.na
\fB\fIkoff\fR\fR
.ad
.RS 15n
.rt  
Offset into the kernel memory defined by \fIcookie\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fIlen\fR\fR
.ad
.RS 15n
.rt  
Length (in bytes) of the mapping to be mapped.
.RE

.sp
.ne 2
.mk
.na
\fB\fImaxprot\fR\fR
.ad
.RS 15n
.rt  
Maximum protection flag possible for attempted mapping. Some combinations of possible settings are:
.sp
.ne 2
.mk
.na
\fB\fBPROT_READ\fR\fR
.ad
.RS 14n
.rt  
Read access is allowed.
.RE

.sp
.ne 2
.mk
.na
\fB\fBPROT_WRITE\fR\fR
.ad
.RS 14n
.rt  
Write access is allowed.
.RE

.sp
.ne 2
.mk
.na
\fB\fBPROT_EXEC\fR\fR
.ad
.RS 14n
.rt  
Execute access is allowed.
.RE

.sp
.ne 2
.mk
.na
\fB\fBPROT_USER\fR\fR
.ad
.RS 14n
.rt  
User-level access is allowed (the mapping is being done as a result of a \fBmmap\fR(2) system call).
.RE

.sp
.ne 2
.mk
.na
\fB\fBPROT_ALL\fR\fR
.ad
.RS 14n
.rt  
All access is allowed.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fIflags\fR\fR
.ad
.RS 15n
.rt  
Must be set to \fB0\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fIaccattrp\fR\fR
.ad
.RS 15n
.rt  
Pointer to a \fBddi_device_acc_attr\fR(9S) structure. Ignored in the current release. Reserved for future use.
.RE

.SH DESCRIPTION
.sp
.LP
The \fBdevmap_devmem_setup()\fR and \fBdevmap_umem_setup()\fR functions are used in the \fBdevmap\fR(9E) entry point to pass mapping parameters from the driver to the system.
.sp
.LP
The \fIdhp\fR argument specifies a device mapping handle that the system uses to store all mapping parameters of a physical contiguous memory. The system copies the data pointed to by \fIcallbackops\fR to a system private memory. This allows the driver to free the data after returning from either \fBdevmap_devmem_setup()\fR or \fBdevmap_umem_setup()\fR. The driver is notified of user events on the mappings via the entry points defined by \fBdevmap_callback_ctl\fR(9S). The driver is notified of the following user events:
.sp
.ne 2
.mk
.na
\fBMapping Setup\fR
.ad
.RS 17n
.rt  
User has called \fBmmap\fR(2) to create a mapping to the device memory.
.RE

.sp
.ne 2
.mk
.na
\fBAccess\fR
.ad
.RS 17n
.rt  
User has accessed an address in the mapping that has no translations.
.RE

.sp
.ne 2
.mk
.na
\fBDuplication\fR
.ad
.RS 17n
.rt  
User has duplicated the mapping. Mappings are duplicated when the process calls \fBfork\fR(2).
.RE

.sp
.ne 2
.mk
.na
\fBUnmapping\fR
.ad
.RS 17n
.rt  
User has called \fBmunmap\fR(2) on the mapping or is exiting, \fBexit\fR(2).
.RE

.sp
.LP
See \fBdevmap_map\fR(9E), \fBdevmap_access\fR(9E), \fBdevmap_dup\fR(9E), and \fBdevmap_unmap\fR(9E) for details on these entry points.
.sp
.LP
By specifying a valid \fIcallbackops\fR to the system, device drivers can manage events on a device mapping. For example, the \fBdevmap_access\fR(9E) entry point allows the drivers to perform context switching by unloading the mappings of other processes and to load the mapping of the calling process. Device drivers may specify \fINULL\fR to \fIcallbackops\fR which means the drivers do not want to be notified by the system.
.sp
.LP
The maximum protection allowed for the mapping is specified in \fImaxprot\fR. \fIaccattrp\fR defines the device access attributes. See \fBddi_device_acc_attr\fR(9S) for more details.
.sp
.LP
\fBdevmap_devmem_setup()\fR is used for device memory to map in the register set given by \fIrnumber\fR and the offset into the register address space given by \fIroff\fR. The system uses \fIrnumber\fR and \fIroff\fR to go up the device tree to get the physical address that corresponds to \fIroff\fR. The range to be affected is defined by \fIlen\fR and \fIroff\fR. The range from \fIroff\fR to \fIroff\fR \fI+\fR \fIlen\fR must be a physical contiguous memory and page aligned.
.sp
.LP
Drivers use \fBdevmap_umem_setup()\fR for kernel memory to map in the kernel memory described by \fIcookie\fR and the offset into the kernel memory space given by \fIkoff\fR. \fIcookie\fR is a kernel memory pointer obtained from \fBddi_umem_alloc\fR(9F). If \fIcookie\fR is \fINULL,\fR \fBdevmap_umem_setup()\fR returns \fB-1.\fR The range to be affected is defined by \fIlen\fR and \fIkoff\fR. The range from \fIkoff\fR to \fIkoff\fR \fI+\fR \fIlen\fR must be within the limits of the kernel memory described by \fIkoff\fR \fI+\fR \fIlen\fR and must be page aligned.
.sp
.LP
Drivers use \fBdevmap_umem_setup()\fR to export the kernel memory allocated by \fBddi_umem_alloc\fR(9F) to user space. The system selects a user virtual address that is aligned with the kernel virtual address being mapped to avoid cache incoherence if the mapping is not \fBMAP_FIXED.\fR 
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
\fB\fB0\fR\fR
.ad
.RS 6n
.rt  
Successful completion.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-1\fR\fR
.ad
.RS 6n
.rt  
An error occurred.
.RE

.SH CONTEXT
.sp
.LP
\fBdevmap_devmem_setup()\fR and \fBdevmap_umem_setup()\fR can be called from user, kernel, and interrupt context.
.SH SEE ALSO
.sp
.LP
\fBexit\fR(2), \fBfork\fR(2), \fBmmap\fR(2), \fBmunmap\fR(2), \fBdevmap\fR(9E), \fBddi_umem_alloc\fR(9F), \fBddi_device_acc_attr\fR(9S), \fBdevmap_callback_ctl\fR(9S)
.sp
.LP
\fIWriting Device Drivers\fR
