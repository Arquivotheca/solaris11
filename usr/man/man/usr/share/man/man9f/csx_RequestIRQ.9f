'\" te
.\"  Copyright (c) 2000, Sun Microsystems, Inc.  All Rights Reserved
.TH csx_RequestIRQ 9F "19 Jul 1996" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
csx_RequestIRQ, csx_ReleaseIRQ \- request or release IRQ resource
.SH SYNOPSIS
.LP
.nf
#include <sys/pccard.h>



\fBint32_t\fR \fBcsx_RequestIRQ\fR(\fBclient_handle_t\fR \fIch\fR, \fBirq_req_t *\fR\fIir\fR);
.fi

.LP
.nf
\fBint32_t\fR \fBcsx_ReleaseIRQ\fR(\fBclient_handle_t\fR \fIch\fR, \fBirq_req_t *\fR\fIir\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris \fBDDI\fR Specific (Solaris \fBDDI\fR)
.SH PARAMETERS
.sp
.ne 2
.mk
.na
\fB\fIch\fR \fR
.ad
.RS 7n
.rt  
Client handle returned from \fBcsx_RegisterClient\fR(9F). 
.RE

.sp
.ne 2
.mk
.na
\fB\fIir\fR \fR
.ad
.RS 7n
.rt  
Pointer to an \fBirq_req_t\fR structure.
.RE

.SH DESCRIPTION
.sp
.LP
The function \fBcsx_RequestIRQ()\fR requests an \fBIRQ\fR resource and registers the client's \fBIRQ\fR handler with Card Services.
.sp
.LP
If a client requires an \fBIRQ\fR,\fBcsx_RequestIRQ()\fR must be called to request an \fBIRQ\fR resource as well as to register the client's \fBIRQ\fR handler with Card Services. The client will not receive callbacks at the \fBIRQ\fR callback handler until \fBcsx_RequestConfiguration\fR(9F) or \fBcsx_ModifyConfiguration\fR(9F) has successfully returned when either of these functions are called with the \fBCONF_ENABLE_IRQ_STEERING\fR bit set.
.sp
.LP
The function \fBcsx_ReleaseIRQ()\fR releases a previously requested \fBIRQ\fR resource.
.sp
.LP
The Card Services \fBIRQ\fR resource list is adjusted by \fBcsx_ReleaseIRQ()\fR. Depending on the adapter hardware, the host bus \fBIRQ\fR connection might also be disabled. Client \fBIRQ\fR handlers always run above lock level and so should take care to perform only Solaris operations that are appropriate for an above-lock-level \fBIRQ\fR handler.
.sp
.LP
\fBcsx_RequestIRQ()\fR fails if it has already been called without a corresponding \fBcsx_ReleaseIRQ()\fR. 
.SH STRUCTURE MEMBERS
.sp
.LP
The structure members of \fBirq_req_t\fR are:
.sp
.in +2
.nf
uint32_t                Socket;          /* socket number */
uint32_t                Attributes;      /* IRQ attribute flags */
csfunction_t            *irq_handler;    /* IRQ handler */
void                    *irq_handler_arg; /* IRQ handler argument */
ddi_iblock_cookie_t     *iblk_cookie;    /* IRQ interrupt 
                                         /*   block cookie */
ddi_idevice_cookie_t    *idev_cookie;    /* IRQ interrupt device 
                                         /*   cookie */
.fi
.in -2

.sp
.LP
The fields are defined as follows:
.sp
.ne 2
.mk
.na
\fB\fBSocket\fR \fR
.ad
.RS 20n
.rt  
Not used in Solaris, but for portability with other Card Services implementations, it should be set to the logical socket number.
.RE

.sp
.ne 2
.mk
.na
\fB\fBAttributes\fR \fR
.ad
.RS 20n
.rt  
This field is bit-mapped. It specifies details about the type of \fBIRQ\fR desired by the client. The following bits are defined:
.sp
.ne 2
.mk
.na
\fB\fBIRQ_TYPE_EXCLUSIVE\fR\fR
.ad
.RS 22n
.rt  
\fBIRQ\fR is exclusive to this socket. This bit must be set. It indicates that the system IRQ is dedicated to this PC Card.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBirq_handler\fR \fR
.ad
.RS 20n
.rt  
The client \fBIRQ\fR callback handler entry point is passed in the \fBirq_handler\fR field.
.RE

.sp
.ne 2
.mk
.na
\fB\fBirq_handler_arg\fR \fR
.ad
.RS 20n
.rt  
The client can use the \fBirq_handler_arg\fR field to pass client-specific data to the client \fBIRQ\fR callback handler.
.RE

.sp
.ne 2
.mk
.na
\fB\fBiblk_cookie\fR \fR
.ad
.br
.na
\fB\fBidev_cookie\fR \fR
.ad
.RS 20n
.rt  
These fields must be used by the client to set up mutexes that are used in the client's \fBIRQ\fR callback handler.
.RE

.sp
.LP
For a specific \fBcsx_ReleaseIRQ()\fR call, the values in the \fBirq_req_t\fR structure must be the same as those returned from the previous  \fBcsx_RequestIRQ()\fR call; otherwise, \fBCS_BAD_ARGS\fR is returned and no changes are made to Card Services resources or the socket and adapter hardware.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
\fB\fBCS_SUCCESS\fR \fR
.ad
.RS 28n
.rt  
Successful operation.
.RE

.sp
.ne 2
.mk
.na
\fB\fBCS_BAD_ARGS\fR \fR
.ad
.RS 28n
.rt  
\fBIRQ\fR description does not match allocation.
.RE

.sp
.ne 2
.mk
.na
\fB\fBCS_BAD_ATTRIBUTE\fR \fR
.ad
.RS 28n
.rt  
\fBIRQ_TYPE_EXCLUSIVE\fR not set, or an unsupported or reserved 		bit is set.
.RE

.sp
.ne 2
.mk
.na
\fB\fBCS_BAD_HANDLE\fR \fR
.ad
.RS 28n
.rt  
Client handle is invalid or \fBcsx_RequestConfiguration\fR(9F) not done.
.RE

.sp
.ne 2
.mk
.na
\fB\fBCS_BAD_IRQ\fR \fR
.ad
.RS 28n
.rt  
Unable to allocate \fBIRQ\fR resources.
.RE

.sp
.ne 2
.mk
.na
\fB\fBCS_IN_USE\fR \fR
.ad
.RS 28n
.rt  
\fBcsx_RequestIRQ()\fR already done or a previous \fBcsx_RequestIRQ()\fR has not been done for a corresponding \fBcsx_ReleaseIRQ()\fR. 
.RE

.sp
.ne 2
.mk
.na
\fB\fBCS_CONFIGURATION_LOCKED\fR \fR
.ad
.RS 28n
.rt  
\fBcsx_RequestConfiguration\fR(9F) already done or \fBcsx_ReleaseConfiguration\fR(9F) has not been done.
.RE

.sp
.ne 2
.mk
.na
\fB\fBCS_NO_CARD\fR \fR
.ad
.RS 28n
.rt  
No \fBPC\fR Card in socket.
.RE

.sp
.ne 2
.mk
.na
\fB\fBCS_UNSUPPORTED_FUNCTION\fR \fR
.ad
.RS 28n
.rt  
No \fBPCMCIA\fR hardware installed.
.RE

.SH CONTEXT
.sp
.LP
These functions may be called from user or kernel context.
.SH SEE ALSO
.sp
.LP
\fBcsx_ReleaseConfiguration\fR(9F), \fBcsx_RequestConfiguration\fR(9F) 
.sp
.LP
\fIPC Card Card 95 Standard\fR, PCMCIA/JEIDA
