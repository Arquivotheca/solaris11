'\" te
.\" Copyright (c) 2003, 2011, Oracle and/or its affiliates. 保留所有权利。
.TH cfgadm_sbd 1M "2003 年 10 月 13 日" "SunOS 5.11" "系统管理命令"
.SH 名称
cfgadm_sbd \- \fBcfgadm\fR 命令，用于系统板管理
.SH 用法概要
.LP
.nf
\fBcfgadm \fR \fB-l\fR [\fB-a\fR] [\fB-o\fR parsable] \fI ap_id\fR...
.fi

.LP
.nf
\fBcfgadm \fR \fB-c \fR \fIfunction\fR [\fB-f\fR] [\fB-y\fR | \fB-n\fR] 
     [\fB-o\fR unassign | nopoweroff] [\fB-v\fR] \fI ap_id\fR...
.fi

.LP
.nf
\fBcfgadm \fR \fB-t\fR [\fB-v\fR] \fI ap_id\fR...
.fi

.LP
.nf
\fBcfgadm \fR \fB-x \fR [\fB-f\fR] [\fB-v\fR] \fIfunction\fR \fI ap_id\fR...
.fi

.SH 描述
.sp
.LP
\fBcfgadm_sbd\fR 插件提供动态重新配置功能，适用于 \fBsbd\fR 类系统板的连接、配置、取消配置和断开连接操作。此外，您还可以通过它连接系统板或断开其与正在运行的系统的连接而不必重新引导系统。
.sp
.LP
\fBcfgadm\fR 命令驻留在 \fB/usr/sbin\fR 中。请参见 \fBcfgadm\fR(1M)。\fBcfgadm_sbd\fR 插件驻留在 \fB/usr/platform/sun4u/lib/cfgadm\fR 中。
.sp
.LP
每个板槽都会在设备树中显示为单个挂接点。每个组件都会显示为一个动态挂接点。您可以使用 \fB-a\fR 选项查看每个组件的类型、状态和状况，以及每个板槽的状态和状况。
.sp
.LP
\fBcfgadm\fR 选项的执行情况取决于具体的平台。此外，挂接点的形式在不同的平台也各不相同。有关更多信息，请参见\fB\fR"平台说明"部分。
.SS "组件状况"
.sp
.LP
以下为组件状况的名称和描述：
.sp
.ne 2
.mk
.na
\fBfailed（失败）\fR
.ad
.sp .6
.RS 4n
组件测试失败。
.RE

.sp
.ne 2
.mk
.na
\fBok（正常）\fR
.ad
.sp .6
.RS 4n
组件运行正常。
.RE

.sp
.ne 2
.mk
.na
\fBunknown（未知）\fR
.ad
.sp .6
.RS 4n
组件未经测试。
.RE

.SS "组件状态"
.sp
.LP
以下为组件插口状态的名称和描述：
.sp
.ne 2
.mk
.na
\fBconnected（连接）\fR
.ad
.sp .6
.RS 4n
组件已连接到板槽。
.RE

.sp
.LP
以下为组件插卡状态的名称和描述：
.sp
.ne 2
.mk
.na
\fBconfigured（已配置）\fR
.ad
.sp .6
.RS 4n
组件可供 Solaris 操作环境使用。
.RE

.sp
.ne 2
.mk
.na
\fBunconfigured（未配置）\fR
.ad
.sp .6
.RS 4n
组件无法供 Solaris 操作环境使用。
.RE

.SS "板状况"
.sp
.LP
以下为板状况的名称和描述：
.sp
.ne 2
.mk
.na
\fBfailed（失败）\fR
.ad
.sp .6
.RS 4n
板测试失败。
.RE

.sp
.ne 2
.mk
.na
\fBok（正常）\fR
.ad
.sp .6
.RS 4n
板运行正常。
.RE

.sp
.ne 2
.mk
.na
\fBunknown（未知）\fR
.ad
.sp .6
.RS 4n
板未经测试。
.RE

.sp
.ne 2
.mk
.na
\fBunusable（不可用）\fR
.ad
.sp .6
.RS 4n
板槽不可用。
.RE

.SS "板状态"
.sp
.LP
插入板时，插口状态将从 empty（空）更改为 disconnected（断开）。移除板时，插口状态将从 disconnected（断开）更改为 empty（空）。
.sp
.LP
\fB注意：\fR移除处于 connected（已连接）状态或虽已通电但仍处于 disconnected（断开）状态的板会导致操作系统崩溃，并可能造成系统的永久损坏。
.sp
.LP
以下为板的插口状态的名称和描述：
.sp
.ne 2
.mk
.na
\fBconnected（已连接）\fR
.ad
.sp .6
.RS 4n
板已通电并连接到系统总线。您只能在板进入 connected（已连接）状态以后才能查看其上的组件。
.RE

.sp
.ne 2
.mk
.na
\fBdisconnected（断开）\fR
.ad
.sp .6
.RS 4n
板已断开与系统总线的连接。板在不断电的情况下，也可以处于 disconnected（断开）状态。不过，在将板从插槽中移除之前，该板必须已断电并处于 disconnected（断开）状态。
.RE

.sp
.ne 2
.mk
.na
\fBempty（空）\fR
.ad
.sp .6
.RS 4n
板不存在。
.RE

.sp
.LP
断开的板的插卡状态始终为 unconfigured（未配置）。下表包含板的插卡状态的名称和描述：
.sp
.ne 2
.mk
.na
\fBconfigured（已配置）\fR
.ad
.sp .6
.RS 4n
板上至少有一个组件已配置。
.RE

.sp
.ne 2
.mk
.na
\fBunconfigured（未配置）\fR
.ad
.sp .6
.RS 4n
板上的所有组件均未配置。
.RE

.SS "动态系统域"
.sp
.LP
基于动态系统域 (dynamic system domain, DSD)（在本文档中简称域）的平台可以将机箱中的插槽分隔成以电子方式隔离的硬件分区（即 DSD）。不基于 DSD 的平台可将所有插槽永久性地分配给系统。
.sp
.LP
插槽可以为空，也可以处于填充状态，还可以分配或提供给任何数目的域使用。可供给定域使用的插槽数由在系统控制器上进行维护的可用组件列表 (\fBACL\fR) 控制。\fBACL\fR 不是指由 Solaris 操作环境提供的访问控制列表。
.sp
.LP
插槽仅在位于域的 \fBACL\fR 中且尚未分配给其他域的情况下才对该域可见。未分配的插槽对于其 \fBACL\fR 中包含该插槽的所有域均可见。将插槽分配给某个域以后，该插槽对于其他任何域都不再可见。
.sp
.LP
如果插槽对于某个域可见但尚未分配，则必须先将该插槽分配给该域，然后才能应用其他任何状态更改命令。分配操作可以通过 \fB\fR\fB-x\fR\fB assign\fR 显式完成，也可以在连接过程中隐式完成。必须先取消分配给某个域的插槽，然后才能允许其他域使用该插槽。取消分配始终是显式的，可以直接使用 \fB\fR\fB-x\fR\fB unassign\fR 取消分配，也可以使用 \fB\fR\fB-o\fR\fB unassign\fR 以选项方式断开连接。 
.SS "状态更改函数"
.sp
.LP
更改板槽状态或板上组件状态的函数可以针对任何挂接点并行发出。在某个给定时间，只允许一个状态更改操作。状态更改信息中 "Busy"（忙）字段中的 \fBY\fR 表示某个操作正在进行中。
.sp
.LP
以下列表包含可以进行状态更改的函数： 
.RS +4
.TP
.ie t \(bu
.el o
configure
.RE
.RS +4
.TP
.ie t \(bu
.el o
unconfigure
.RE
.RS +4
.TP
.ie t \(bu
.el o
connect
.RE
.RS +4
.TP
.ie t \(bu
.el o
disconnect
.RE
.SS "可用性更改函数"
.sp
.LP
更改板可用性的命令可以针对任何挂接点并行发出。在某个给定时间，只允许一个可用性更改操作。这些函数也更改 \fBcfgadm\fR \fB-l\fR 输出中的信息字符串。"Busy"（忙）字段中的 \fBY\fR 表示某个操作正在进行中。
.sp
.LP
以下列表包含可以进行可用性更改的函数： 
.RS +4
.TP
.ie t \(bu
.el o
\fBassign\fR
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBunassign\fR
.RE
.SS "状况更改函数"
.sp
.LP
更改板槽状况或板上组件状况的函数可以针对任何挂接点并行发出。在某个给定时间，只允许一个状况更改操作。这些函数也更改 \fBcfgadm\fR \fB-l\fR 输出中的信息字符串。"Busy"（忙）字段中的 \fBY\fR 表示某个操作正在进行中。
.sp
.LP
以下列表包含可以进行状况更改的函数： 
.RS +4
.TP
.ie t \(bu
.el o
\fBpoweron\fR
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBpoweroff\fR
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBtest\fR
.RE
.SS "取消配置过程"
.sp
.LP
本节包含取消配置过程的描述，并说明了在移动常驻内存过程中的不同阶段源板和目标板的状态。
.sp
.LP
在以下代码示例中，板 0 上的常驻内存必须移至域中的其他板。因此，板 0 为源板，板 1 为目标板。
.sp
.LP
当系统将板的状态标记为忙时，不能在该板上启动状态更改操作。为了简便起见，已删除代理示例中的 \fBCPU\fR 信息。
.sp
.LP
此过程通过以下命令开始：
.sp
.in +2
.nf
# \fBcfgadm -c unconfigure -y SB0::memory &\fR
.fi
.in -2
.sp

.sp
.LP
首先，必须删除板 1 上与板 0 上的常驻内存处于同一地址范围内的内存。在此阶段，源板、目标板和内存挂接点均标记为忙。可以使用以下命令来显示状态：
.sp
.in +2
.nf
# \fBcfgadm -a -s cols=ap_id:type:r_state:o_state:busy SB0 SB1\fR

Ap_Id         Type      Receptacle     Occupant       Busy
SB0           CPU       connected      configured     y
SB0::memory   memory    connected      configured     y
SB1           CPU       connected      configured     y
SB1::memory   memory    connected      configured     y
 
.fi
.in -2
.sp

.sp
.LP
删除板 1 上的相应内存以后，该内存将标记为 unconfigured（未配置）。板 0 上的内存始终为 configured（已配置），但仍会标记为忙，如下例所示。
.sp
.in +2
.nf
Ap_Id         Type      Receptacle     Occupant       Busy
SB0           CPU       connected      configured     y 
SB0::memory   memory    connected      configured     y 
SB1           CPU       connected      configured     y 
SB1::memory   memory    connected      unconfigured   n 
  
.fi
.in -2
.sp

.sp
.LP
然后，板 0 上的内存将复制到板 1。复制完成以后，将切换内存的插卡状态。板 0 上的内存变为 unconfigured（未配置），而板 1 上的内存变为 configured（已配置）。在该过程的这一阶段，仅板 0 的状态仍为忙，如下例所示。
.sp
.in +2
.nf
Ap_Id         Type      Receptacle     Occupant       Busy
SB0           CPU       connected      configured     y 
SB0::memory   memory    connected      unconfigured   n 
SB1           CPU       connected      configured     n 
SB1::memory   memory    connected      configured     n 
  
.fi
.in -2
.sp

.sp
.LP
整个过程完成以后，板 0 上的内存仍为 unconfigured（未配置），但挂接点的状态不为忙，如下例所示。
.sp
.in +2
.nf
Ap_Id         Type      Receptacle     Occupant       Busy
SB0           CPU       connected      configured     n 
SB0::memory   memory    connected      unconfigured   n 
SB1           CPU       connected      configured     n 
SB1::memory   memory    connected      configured     n 
  
.fi
.in -2
.sp

.sp
.LP
常驻内存已移动，板 0 上的内存已取消配置。此时，您可以在任意一个板上启动新的状态更改操作。
.SS "特定于平台的选项"
.sp
.LP
您可以紧随由系统板插件进行解释的选项之后指定特定于平台的选项。所有特定于平台的选项必须以 \fBplatform\fR 关键字开头。以下示例包含了带特定于平台的选项的命令的通用格式：
.sp
.LP
\fB\fIcommand\fR -o \fIsbd_options\fR,platform=\fIplatform_options\fR\fR
.SH 选项
.sp
.LP
此手册页不包括 \fBcfgadm\fR 命令的 \fB-v\fR、\fB-a\fR、\fB-s\fR 或 \fB-h\fR 选项。有关这些选项的描述，请参见 \fBcfgadm\fR(1M)。以下选项受 \fBcfgadm_sbd\fR 插件支持：
.sp
.ne 2
.mk
.na
\fB\fB-c \fR\fIfunction\fR\fR
.ad
.sp .6
.RS 4n
执行状态更改函数。您可以使用以下函数：
.sp
.ne 2
.mk
.na
\fBunconfigure\fR
.ad
.sp .6
.RS 4n
将插卡状态更改为 unconfigured（未配置）。此函数适用于系统板槽以及系统板上的所有组件。
.sp
\fBunconfigure\fR 函数可从 \fBCPU\fR 列表中移除 \fBCPU\fR，并从系统内存池中删除物理内存。如果有设备仍处于使用状态，\fBcfgadm\fR 命令会失败并将失败情况报告给用户。只要设备不再处于忙的状态，您就可以立即重试该命令。如果 \fBCPU\fR 仍在使用，则在继续操作之前，必须确保该 CPU 已关闭。请参见 \fBpbind\fR(1M)、\fBpsradm\fR(1M) 和 \fBpsrinfo\fR(1M)。
.sp
\fBunconfigure\fR 函数会将物理内存移至其他系统板，然后才会将该内存从要取消配置的板上删除。如果无法在其他板上找到足够的内存，或者无法找到合适的物理内存范围，命令将失败，具体取决于要移动的内存的类型。
.sp
对于常驻内存，必须在移动内存以及对内存控制器进行重新编程时暂停（即停止）操作系统。如果必须暂停操作系统，系统会提示您执行该操作。您始终可以使用 \fB-y\fR 或 \fB-n\fR 选项来回答（分别代表"是"或"否"）。
.sp
移动内存可能需要数分钟才能完成，具体取决于内存量和系统负载。您可以通过对内存挂接点发出状态命令来监视操作进度。您也可以通过停止 \fBcfgadm\fR 命令来中断内存操作。删除的内存将返回给系统内存池。
.RE

.sp
.ne 2
.mk
.na
\fBdisconnect\fR
.ad
.sp .6
.RS 4n
将插口状态更改为 disconnected（断开）。此函数仅适用于系统板槽。
.sp
如果插卡状态为 configured（已配置），\fBdisconnect\fR 函数会尝试取消对该插卡的配置，然后才会关闭系统板的电源。此时可以将板从插槽中移除。
.sp
应用此函数后，板在支持动态系统域的平台上将处于 assigned（已分配）状态。
.sp
如果指定 \fB-o nopoweroff\fR，则 \fBdisconnect\fR 函数将使板处于通电状态。如果指定 \fB-o unassign\fR，则 \fBdisconnect\fR 函数将从域中取消对板的分配。
.sp
如果从域中取消对板的分配，可将其分配给其他域。不过，如果将其分配给其他域，该板将无法提供给取消分配操作所发生的域使用。
.RE

.sp
.ne 2
.mk
.na
\fBconfigure\fR
.ad
.sp .6
.RS 4n
将插卡状态更改为 configured（已配置）。此函数适用于系统板槽以及系统板上的任意组件。
.sp
如果插口状态为 disconnected（断开），\fBconfigure\fR 函数会尝试连接该插口。然后，它会遍历由 \fBconnect\fR 函数创建的设备树，并在必要情况下附加这些设备。运行该函数可以对板上的所有组件进行配置，已经配置的组件除外。
.sp
对于 \fBCPU\fR，\fBconfigure\fR 函数可将 \fBCPU\fR 添加到 \fBCPU\fR 列表。对于内存，\fBconfigure\fR 函数会在确保内存已初始化的基础上将其添加到系统内存池。\fBCPU\fR 和内存在 \fBconfigure\fR 函数成功完成后即可使用。
.sp
对于 I/O 设备，必须在使用设备之前先使用 \fBmount\fR 和 \fBifconfig\fR 命令。请参见 \fBifconfig\fR(1M) 和 \fBmount\fR(1M)。
.RE

.sp
.ne 2
.mk
.na
\fBconnect\fR
.ad
.sp .6
.RS 4n
将插口状态更改为 connected（已连接）。此函数仅适用于系统板槽。
.sp
如果板槽尚未分配给域，\fBconnect\fR 函数会尝试将该板槽分配给域。接下来，该函数会对板执行通电和测试操作，然后会将板以电子方式连接到系统总线并对组件进行探测。
.sp
成功完成 \fBconnect\fR 函数以后，可使用 \fB-a\fR 选项来查看板上组件的状态。\fBconnect\fR 函数可以让所有组件都处于 unconfigured（未配置）状态。
.sp
赋值步骤仅适用于支持动态系统域的平台。
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.sp .6
.RS 4n
覆盖软件状态更改约束。 
.sp
\fB-f\fR 选项从不覆盖硬件和操作系统的基本安全性和可用性约束。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-l\fR\fR
.ad
.sp .6
.RS 4n
列出按 \fB-s\fR、\fB-v\fR 和 \fB-a\fR 选项（详见 \fBcfgadm\fR(1M)）控制格式指定的挂接点的状态和状况。\fBcfgadm_sbd\fR 插件在 info（信息）字段中提供了具体的信息，如下所述。该信息的格式可通过 \fB\fR\fB-o\fR\fB parsable\fR 选项进行更改。
.sp
可解析的 \fBinfo\fR（信息）字段由以下内容组成： 
.sp
.ne 2
.mk
.na
\fBcpu\fR
.ad
.sp .6
.RS 4n
\fBcpu\fR 类型显示以下信息：
.sp
.ne 2
.mk
.na
\fB\fBcpuid=\fR\fI#\fR\fB[,\fR\fI#\fR\fB\&.\|.\|.]\fR\fR
.ad
.sp .6
.RS 4n
其中 \fI#\fR 为数字，表示 \fBCPU\fR 的 \fBID\fR。如果存在多个 \fI#\fR，则表示该 \fBCPU\fR 具有多个活动的虚拟处理器。
.RE

.sp
.ne 2
.mk
.na
\fB\fBspeed=\fR\fI#\fR\fR
.ad
.sp .6
.RS 4n
其中 \fI#\fR 为数字，表示 \fBCPU\fR 的速度（单位：\fBMHz\fR）。
.RE

.sp
.ne 2
.mk
.na
\fB\fBecache=\fR\fI#\fR\fR
.ad
.sp .6
.RS 4n
其中 \fI#\fR 为数字，表示 ecache 的大小（单位：MB）。如果 \fBCPU\fR 具有多个活动的虚拟处理器，则 ecache 既可在这些虚拟处理器之间共享，也可在其间进行划分。
.RE

.RE

.sp
.ne 2
.mk
.na
\fB存储区\fR
.ad
.sp .6
.RS 4n
\fBmemory\fR 类型会根据情况显示以下信息：
.sp
.ne 2
.mk
.na
\fBaddress=\fI#\fR\fR
.ad
.sp .6
.RS 4n
其中 \fI#\fR 为数字，表示基本物理地址。
.RE

.sp
.ne 2
.mk
.na
\fBsize=\fI#\fR\fR
.ad
.sp .6
.RS 4n
其中 \fI#\fR 为数字，表示内存大小（单位：\fBKB\fR）。
.RE

.sp
.ne 2
.mk
.na
\fB永久的=\fI#\fR\fR
.ad
.sp .6
.RS 4n
其中 \fI#\fR 为数字，表示常驻内存的大小（单位：\fBKB\fR）。
.RE

.sp
.ne 2
.mk
.na
\fBunconfigurable\fR
.ad
.sp .6
.RS 4n
一种操作系统设置，可防止取消对内存的配置。
.RE

.sp
.ne 2
.mk
.na
\fBinter-board-interleave\fR
.ad
.sp .6
.RS 4n
该板与其他板交错在一起。
.RE

.sp
.ne 2
.mk
.na
\fBsource=\fIap_id\fR\fR
.ad
.sp .6
.RS 4n
表示源挂接点。
.RE

.sp
.ne 2
.mk
.na
\fBtarget=\fIap_id\fR\fR
.ad
.sp .6
.RS 4n
表示目标挂接点。
.RE

.sp
.ne 2
.mk
.na
\fBdeleted=\fI#\fR\fR
.ad
.sp .6
.RS 4n
其中 \fI#\fR 为数字，表示已删除的内存量（单位：\fBKB\fR）。
.RE

.sp
.ne 2
.mk
.na
\fBremaining=\fI#\fR\fR
.ad
.sp .6
.RS 4n
其中 \fI#\fR 为数字，表示要删除的内存量（单位：\fBKB\fR）。
.RE

.RE

.sp
.ne 2
.mk
.na
\fBio\fR
.ad
.sp .6
.RS 4n
\fBio\fR 类型显示以下信息：
.sp
.ne 2
.mk
.na
\fBdevice=\fIpath\fR\fR
.ad
.sp .6
.RS 4n
表示 I/O 组件的物理路径。
.RE

.sp
.ne 2
.mk
.na
\fB引用的\fR
.ad
.sp .6
.RS 4n
引用了 I/O 组件。
.RE

.RE

.sp
.ne 2
.mk
.na
\fB板\fR
.ad
.sp .6
.RS 4n
\fBboard\fR 类型显示以下布尔名称。如果这些名称不存在，则使用相反的名称。
.sp
.ne 2
.mk
.na
\fBassigned\fR
.ad
.sp .6
.RS 4n
板已分配给域。
.RE

.sp
.ne 2
.mk
.na
\fBpowered-on\fR
.ad
.sp .6
.RS 4n
板已通电。
.RE

如果未指定 \fB-o\fR \fBparsable\fR 选项，同样的项会以更具可读性的格式显示在 \fBinfo\fR（信息）字段中。
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fB-o\fR parsable\fR
.ad
.sp .6
.RS 4n
以布尔 \fIname\fR 或一组由空格字符分隔的 \fBname=value\fR 对的方式返回 \fBinfo\fR（信息）字段中的信息。 
.sp
\fB-o parsable\fR 选项可与 \fB-s\fR 选项结合使用。有关 \fB-s\fR 选项的更多信息，请参见 \fBcfgadm\fR(1M) 手册页。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-t\fR\fR
.ad
.sp .6
.RS 4n
对板进行测试。
.sp
连接板之前，该板必须通过相应级别的测试。 
.sp
使用此选项时，将始终尝试对板进行测试，即使该板已通过相应级别的测试也是如此。发出 \fB\fR\fB-c\fR\fB connect\fR 状态更改函数时，也会进行测试，此时，如果该板显示已完成相应级别的测试，则可跳过测试步骤。因此，可以使用 \fB-t\fR 选项来明确要求对板进行测试。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-x\fR\fI function\fR\fR
.ad
.sp .6
.RS 4n
执行 sbd-class 函数。您可以使用以下函数：
.sp
.ne 2
.mk
.na
\fBassign\fR
.ad
.sp .6
.RS 4n
将板分配给域。
.sp
插口状态必须为 disconnected（断开）或 empty（空）。板也必须列在域可用组件列表中。请参见"动态系统域"。
.RE

.sp
.ne 2
.mk
.na
\fBunassign\fR
.ad
.sp .6
.RS 4n
从域中取消对板的分配。
.sp
插口状态必须为 disconnected（断开）或 empty（空）。板也必须列在域可用组件列表中。请参见"动态系统域"。
.RE

.sp
.ne 2
.mk
.na
\fBpoweron\fR
.ad
.sp .6
.RS 4n
为系统板通电。
.sp
插口状态必须为 disconnected（断开）。
.RE

.sp
.ne 2
.mk
.na
\fBpoweroff\fR
.ad
.sp .6
.RS 4n
关闭系统板的电源。
.sp
插口状态必须为 disconnected（断开）。
.RE

.RE

.SH 操作数
.sp
.LP
支持下列操作数：
.sp
.ne 2
.mk
.na
\fBReceptacle \fIap_id\fR\fR
.ad
.sp .6
.RS 4n
对于 Sun Fire 15K 之类的 Sun Fire 高端系统来说，插口挂接点 \fBID\fR 采用的是 \fBSB\fIX\fR\fR 或 \fBIO\fIX\fR\fR 格式，其中 \fIX\fR 即槽号。
.sp
具体格式取决于平台，通常与计算机上的物理标签相对应。请参见\fB\fR"说明"部分中特定于平台的信息。
.RE

.sp
.ne 2
.mk
.na
\fBComponent \fIap_id\fR\fR
.ad
.sp .6
.RS 4n
组件挂接点 \fBID\fR 采用 \fIcomponent_typeX\fR 格式，其中 \fIcomponent_type\fR 即"组件类型"中描述的组件类型之一，\fIX\fR 即组件号。组件号是与板相关的设备号。
.sp
上述约定不适用于内存组件。内存挂接点上的任何 DR 操作都会影响系统板上的所有内存。
.RE

.SH 示例
.sp
.LP
以下示例显示了 Sun Fire 15K 系统上的用户输入和系统输出。用户输入（尤其是对挂接点的引用）和系统输出在诸如 Sun Fire 中型系统（如 6800）之类的其他 Sun Fire 系统上可能会有所不同。有关如何在非 Sun Fire 高端机型上使用 \fBcfgadm_sbd\fR 插件的具体信息，请参见"平台说明"。
.LP
\fB示例 1 \fR列出所有系统板
.sp
.in +2
.nf
# \fBcfgadm -a -s "select=class(sbd)"\fR

Ap_Id         Type      Receptacle     Occupant       Condition
SB0           CPU       connected      configured     ok
SB0::cpu0     cpu       connected      configured     ok
SB0::memory   memory    connected      configured     ok
IO1           HPCI      connected      configured     ok
IO1::pci0     io        connected      configured     ok
IO1::pci1     io        connected      configured     ok
SB2           CPU       disconnected   unconfigured   failed
SB3           CPU       disconnected   unconfigured   unusable
SB4           unknown   empty          unconfigured   unknown
.fi
.in -2
.sp

.sp
.LP
本示例演示以下状况的映射：

.RS +4
.TP
.ie t \(bu
.el o
插槽 2 中的板测试失败。
.RE
.RS +4
.TP
.ie t \(bu
.el o
插槽 3 不可用，因此无法将板以热插拔方式插入该插槽。
.RE
.LP
\fB示例 2 \fR列出系统板上的所有 \fBCPU\fR
.sp
.in +2
.nf
# \fBcfgadm -a -s "select=class(sbd):type(cpu)"\fR

Ap_Id         Type      Receptacle     Occupant       Condition
SB0::cpu0     cpu       connected      configured     ok
SB0::cpu1     cpu       connected      configured     ok
SB0::cpu2     cpu       connected      configured     ok
SB0::cpu3     cpu       connected      configured     ok
.fi
.in -2
.sp

.LP
\fB示例 3 \fR显示 \fBCPU\fR 信息字段
.sp
.in +2
.nf
# \fBcfgadm -l -s noheadings,cols=info SB0::cpu0\fR

cpuid 16, speed 400 MHz, ecache 8 Mbytes
.fi
.in -2
.sp

.LP
\fB示例 4 \fR显示可解析格式的 \fBCPU\fR 信息字段
.sp
.in +2
.nf
# \fBcfgadm -l -s noheadings,cols=info -o parsable SB0::cpu0\fR

cpuid=16 speed=400 ecache=8
.fi
.in -2
.sp

.LP
\fB示例 5 \fR显示 I/O 板上的设备
.sp
.in +2
.nf
# \fBcfgadm -a -s noheadings,cols=ap_id:info -o parsable IO1\fR

IO1       powered-on assigned
IO1::pci0 device=/devices/saf@0/pci@0,2000 referenced
IO1::pci1 device=/devices/saf@0/pci@1,2000 referenced
.fi
.in -2
.sp

.LP
\fB示例 6 \fR监视取消配置操作
.sp
.LP
在以下示例中，显示的内存大小以 KB 为单位。

.sp
.in +2
.nf
# \fBcfgadm -c unconfigure -y SB0::memory &\fR
# \fBcfgadm -l -s noheadings,cols=info -o parsable SB0::memory SB1::memory\fR

address=0x0 size=2097152 permanent=752592 target=SB1::memory 
     deleted=1273680 remaining=823472
address=0x1000000 size=2097152 source=SB0::memory
.fi
.in -2
.sp

.LP
\fB示例 7 \fR将插槽分配给域
.sp
.in +2
.nf
# \fBcfgadm -x assign SB2\fR
.fi
.in -2
.sp

.LP
\fB示例 8 \fR从域中取消对插槽的分配
.sp
.in +2
.nf
# \fBcfgadm -x unassign SB3\fR
.fi
.in -2
.sp

.SH 属性
.sp
.LP
有关以下属性的说明，请参见 \fBattributes\fR(5)：
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
属性类型属性值
_
可用性\fBsystem/library/platform\fR
_
稳定性请参见下文。
.TE

.sp
.LP
接口稳定性在提升。输出稳定性并不稳定。
.SH 另请参见
.sp
.LP
\fBcfgadm\fR(1M)、\fBdevfsadm\fR(1M)、\fBifconfig\fR(1M)、\fBmount\fR(1M)、\fBpbind\fR(1M)、\fBpsradm\fR(1M)、\fBpsrinfo\fR(1M)、\fBconfig_admin\fR(3CFGADM)、\fBattributes\fR(5)
.SH 附注
.sp
.LP
本节包含有关如何监视内存删除操作进度的信息，以及特定于平台的信息。
.SS "内存删除监视"
.sp
.LP
可以使用以下 shell 脚本来监视内存删除操作的进度。  
.sp
.in +2
.nf
# \fBcfgadm -c unconfigure -y SB0::memory &\fR
# \fBwatch_memdel SB0\fR

#!/bin/sh
# This is the watch_memdel script.

if [ -z "$1" ]; then
        printf "usage:  %s board_id\en" `basename $0`
        exit 1
fi

board_id=$1

cfgadm_info='cfgadm -s noheadings,cols=info -o parsable'

eval `$cfgadm_info $board_id::memory`

if [ -z "$remaining" ]; then
        echo no memory delete in progress involving $board_id
        exit 0
fi

echo deleting target $target

while true
do
        eval `$cfgadm_info $board_id::memory`

        if [ -n "$remaining" -a "$remaining" -ne 0 ]
        then
                echo $deleted KBytes deleted, $remaining KBytes remaining
                remaining=
        else
                echo memory delete is done
                exit 0
        fi
        sleep 1
done
exit 0
.fi
.in -2
.sp

.SS "Sun Enterprise 10000 平台说明"
.sp
.LP
以下语法用于引用 Sun Enterprise 10000 系统上的挂接点：
.sp
.in +2
.nf
\fIboard\fR::\fIcomponent\fR
.fi
.in -2
.sp

.sp
.LP
\&...其中 \fIboard\fR 是指系统板，\fIcomponent\fR 是指单个组件。系统板的编号范围是 \fBSB0\fR（零）到 \fBSB15\fR。最多可提供十六个系统板。
.sp
.LP
在 Sun Enterprise 10000 域上运行的 DR 3.0 型号只支持 \fBcfgadm_sbd\fR 插件所提供功能中很有限的一部分。唯一支持的操作是查看域中挂接点的状态。这对应于 \fB-l\fR 选项及其所有关联的选项。 
.sp
.LP
尝试在域中执行其他任何操作都会导致错误，指出操作不受支持。所有添加或移除系统板的操作都必须从系统服务处理器启动。
.SS "Sun Fire 高端系统平台说明"
.sp
.LP
以下语法用于引用 Sun Fire 高端系统上的挂接点：
.sp
.in +2
.nf
\fIboard\fR::\fIcomponent\fR
.fi
.in -2
.sp

.sp
.LP
其中 \fIboard\fR 是指系统板或 I/O 板，\fIcomponent\fR 是指单个组件。 
.sp
.LP
系统板的编号范围从 \fBSB0\fR（零）到 \fBSB17\fR，I/O 板的编号范围从 \fBIO0\fR（IO 零）到 \fBIO17\fR，具体取决于系统的配置。（最多可提供十八个系统板和 I/O 板。） 
.sp
.LP
\fB-t\fR 和 \fB-x\fR 选项在 Sun Fire 高端系统平台上的行为并不相同。以下列表对其行为进行了描述：
.sp
.ne 2
.mk
.na
\fB\fB-t\fR\fR
.ad
.sp .6
.RS 4n
系统控制器可通过运行 \fBLPOST\fR，按 \fBhpost\fR 命令排序使用 CPU 来测试系统板。测试 I/O 板时，驱动程序会按 \fB-t\fR 选项的要求开始测试，且测试不需用户干预即可自动运行。驱动程序将取消对某个 CPU 及某段连续物理内存的配置，然后向系统控制器发送进行板测试的命令。系统控制器将使用 CPU 和内存从事务/错误箱内部对 I/O 板进行测试。只能使用系统板（而非 MCPU 板）上的 CPU 来测试 I/O 板。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-x\fR \fBassign | unassign\fR\fR
.ad
.sp .6
.RS 4n
在 Sun Fire 高端系统管理模型中，平台管理员可以使用每个域的可用组件列表来控制平台硬件。此信息保留在系统控制器上。只有平台管理员可以修改域的可用组件列表。
.sp
仅当该域的可用组件列表中包含某个板的情况下，域管理员才能对该板执行分配或取消分配操作。平台管理员没有这种限制，因此即使在域的可用组件列表中不含某个板，也可以对该板执行分配或取消分配操作。 
.RE

.SS "Sun Fire 15K 组件类型"
.sp
.LP
以下为组件类型的名称和描述：
.sp
.ne 2
.mk
.na
\fB\fBcpu\fR\fR
.ad
.sp .6
.RS 4n
\fBCPU\fR
.RE

.sp
.ne 2
.mk
.na
\fB\fBio\fR\fR
.ad
.sp .6
.RS 4n
\fBI/O\fR 设备
.RE

.sp
.ne 2
.mk
.na
\fB\fBmemory（内存）\fR\fR
.ad
.sp .6
.RS 4n
内存
.RE

.sp
.LP
\fB注意：\fR针对某个内存组件的操作会影响板上的所有内存组件。
.SS "Sun Fire 中型系统平台说明"
.sp
.LP
Sun Fire 中端服务器（如 6800、4810、4800 及 3800 系统）上的挂接点引用与 Sun Fire 高端系统上的挂接点引用略有不同。以下语法用于引用除 Sun Fire 15K 之外的 Sun Fire 系统上的挂接点：
.sp
.in +2
.nf
N#.\fIboard\fR::\fIcomponent\fR
.fi
.in -2
.sp

.sp
.LP
其中 \fBN#\fR 是指节点，\fIboard\fR 是指系统板或 I/O 板，\fIcomponent\fR 是指单个组件。 
.sp
.LP
系统板的编号范围从 \fBSB0\fR 到 \fBSB5\fR，I/O 板的编号范围从 \fBIB6\fR 到 \fBIB9\fR，具体取决于系统的配置。（最多可提供六个系统板和四个 I/O 板。） 
.SS "Sun Fire 中型系统组件类型"
.sp
.LP
以下为组件类型的名称和描述：
.sp
.ne 2
.mk
.na
\fB\fBcpu\fR\fR
.ad
.sp .6
.RS 4n
\fBCPU\fR
.RE

.sp
.ne 2
.mk
.na
\fB\fBpci\fR\fR
.ad
.sp .6
.RS 4n
\fBI/O\fR 设备
.RE

.sp
.ne 2
.mk
.na
\fB\fBmemory（内存）\fR\fR
.ad
.sp .6
.RS 4n
内存
.RE

.sp
.LP
\fB注意：\fR针对某个内存组件的操作会影响板上的所有内存组件。
