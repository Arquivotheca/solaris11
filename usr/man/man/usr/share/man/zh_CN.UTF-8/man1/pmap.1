'\" te
.\" 版权所有 (c) 1998，2010，Oracle 和/或其附属公司。保留所有权利。
.TH pmap 1 "2010 年 7 月 14 日" "SunOS 5.11" "用户命令"
.SH 名称
pmap \- 显示进程的地址空间的相关信息
.SH 用法概要
.LP
.nf
\fB/usr/bin/pmap\fR [\fB-rslF\fR] [\fB-A\fR \fIaddress_range\fR] [\fIpid\fR | \fIcore\fR]...
.fi

.LP
.nf
\fB/usr/bin/pmap\fR \fB-L\fR [\fB-rslF\fR] [\fB-A\fR \fIaddress_range\fR] [\fIpid\fR] ...
.fi

.LP
.nf
\fB/usr/bin/pmap\fR \fB-x\fR [\fB-aslF\fR] [\fB-A\fR \fIaddress_range\fR] [\fIpid\fR | \fIcore\fR]...
.fi

.LP
.nf
\fB/usr/bin/pmap\fR \fB-S\fR [\fB-alF\fR] [\fB-A\fR \fIaddress_range\fR] [\fIpid\fR | \fIcore\fR]...
.fi

.SH 描述
.sp
.LP
\fBpmap\fR 实用程序显示进程的地址空间的相关信息。
.SH 选项
.sp
.LP
支持下列选项：
.sp
.ne 2
.mk
.na
\fB\fB-a\fR\fR
.ad
.RS 20n
.rt  
输出用于共享映射的匿名和交换预留空间。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-A\fR \fIaddress_range\fR\fR
.ad
.RS 20n
.rt  
指定要显示的地址空间子范围。\fIaddress_range\fR 是以下列格式之一指定的：
.sp
.ne 2
.mk
.na
\fB\fIstart_addr\fR\fR
.ad
.sp .6
.RS 4n
单个地址，将输出限制为包含该地址的段（或页面，如果提供了 \fB-L\fR 选项）。如果指定的地址对应于某个段的起始地址，则输出将始终包括整个段，即使指定了 \fB-L\fR 选项。
.RE

.sp
.ne 2
.mk
.na
\fB\fIstart_addr\fR\fB,\fR\fR
.ad
.sp .6
.RS 4n
后跟逗号但没有结束地址的地址，将输出限制为从包含指定地址的段开始的所有段（或页面，如果提供了 \fB-L\fR 选项）。 
.RE

.sp
.ne 2
.mk
.na
\fB\fIstart_addr\fR\fB,\fR\fIend_addr\fR\fR
.ad
.sp .6
.RS 4n
由起始地址和结束地址指定的地址范围，将输出限制为从包含起始地址的段或页面到包含结束地址的段或页面之间的所有段（或页面，如果提供了 \fB-L\fR 选项）。 
.RE

.sp
.ne 2
.mk
.na
\fB\fB,\fR\fIend_addr\fR\fR
.ad
.sp .6
.RS 4n
前接逗号但没有起始地址的地址范围，将输出限制为从第一个段（或页面，如果提供了 \fB-L\fR 选项）到包含指定地址的段（或页面，如果提供了 \fB-L\fR 选项）之间的所有段或页面。
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fB-F\fR\fR
.ad
.RS 20n
.rt  
强制。抓取目标进程，即使另一进程已掌握了控制权。
.sp
请参见\fB用法\fR。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-l\fR\fR
.ad
.RS 20n
.rt  
显示未解析的动态链接程序映射名称。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-L\fR\fR
.ad
.RS 20n
.rt  
输出其中包含为虚拟内存提供后备支持的物理内存的 lgroup。 
.RE

.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.RS 20n
.rt  
输出进程的保留地址。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-s\fR\fR
.ad
.RS 20n
.rt  
输出 \fBHAT\fR 页面大小信息。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-S\fR\fR
.ad
.RS 20n
.rt  
显示每个映射的交换预留空间信息。有关更多信息，请参见"用法"。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-x\fR\fR
.ad
.RS 20n
.rt  
显示每个映射的其他信息。有关更多信息，请参见"用法"。
.RE

.SH 用法
.sp
.LP
\fBpmap\fR 实用程序显示进程的地址空间的相关信息。
.sp
.ne 2
.mk
.na
\fB进程映射\fR
.ad
.sp .6
.RS 4n
.sp
.in +2
.nf
/usr/bin/pmap [ -rslF ] [-A \fIaddress_range\fR] [ \fIpid\fR | \fIcore\fR ] ...
.fi
.in -2
.sp

缺省情况下，\fBpmap\fR 按映射被映射到进程的虚拟地址顺序显示所有映射。将显示映射大小、标志和被映射对象的名称。
.sp
可以使用 \fB-A\fR 选项将输出限制到指定的地址范围。指定的地址向上或向下舍入到段边界，输出包括由这些地址界定的段。
.RE

.sp
.ne 2
.mk
.na
\fB进程 Lgroup 映射\fR
.ad
.sp .6
.RS 4n
.sp
.in +2
.nf
/usr/bin/pmap -L [ -rslF ] [-A \fIaddress_range\fR] \fIpid\fR ...
.fi
.in -2
.sp

可使用 \fB-L\fR 选项来确定包含为指定虚拟内存提供后备支持的物理内存的 lgroup。与 \fB-A\fR 选项一起使用时，指定的地址向上或向下舍入到页面边界，输出被限制到由这些地址界定的页面。
.sp
这可以与 \fBplgrp\fR(1) 结合使用来查明所关注的线程的主 lgroup 是否与内存所在位置一样，以及该位置是否应当为该线程的内存地址。\fBlgrpinfo\fR(1) 命令与该 \fBpmap\fR 选项结合使用时也很有用。它显示 lgroup 分层结构、内容和特征，这提供了内存分布于其中的各个 lgroup 的详细信息、这些 lgroup 相互之间的关系以及它们与所关注的任何其他 lgroup 的关系。
.sp
此外，可以通过使用 \fBplgrp\fR(1)、\fBpmadvise\fR(1) 或 \fBmadv.so.1\fR(1) 更改线程和内存的布置。
.RE

.sp
.ne 2
.mk
.na
\fB线程匿名/被锁定映射的详细信息\fR
.ad
.sp .6
.RS 4n
.sp
.in +2
.nf
/usr/bin/pmap -x [ -aslF ] [-A \fIaddress_range\fR] [ \fIpid\fR | \fIcore\fR ] ...
.fi
.in -2
.sp

\fB-x\fR 选项显示每个映射的其他信息。使用此选项可显示每个映射的大小、驻留物理内存 (resident physical memory, RSS) 量、匿名内存量以及锁定的内存量。此选项不包括内核地址空间因该进程而占用的匿名内存。
.RE

.sp
.ne 2
.mk
.na
\fB交换预留空间\fR
.ad
.sp .6
.RS 4n
.sp
.in +2
.nf
/usr/bin/pmap -S [ -alF ] [-A \fIaddress_range\fR] [ \fIpid\fR | \fIcore\fR ] ...
.fi
.in -2
.sp

\fB-S\fR 选项显示每个映射的交换预留空间信息。
.RE

.sp
.LP
使用 \fB-F\fR 标志时应谨慎。在一个被调试的进程上施加两个控制进程可能会导致混乱。仅当主控制进程（通常是调试器）已停止了被调试的进程，并且在应用 \fBproc\fR 工具的可疑时刻主控制进程未在执行任何操作，才能保证安全。
.SH 显示格式
.sp
.LP
除非指定了 -\fB-s\fR 或 -\fB-L\fR 选项，否则将为进程内的每个映射显示一行输出。使用 \fB-s\fR 选项时，将为每个硬件转换页面大小的连续映射显示一行。使用 \fB-L\fR 选项时，将为属于同一 lgroup 的连续映射显示一行。同时使用 \fB-L\fR 和 \fB-s\fR 选项时，将为属于同一 lgroup 的每个硬件转换页面大小的连续映射显示一行。下面的括号中显示的是列标题。
.sp
.ne 2
.mk
.na
\fB虚拟地址 (\fBAddress\fR)\fR
.ad
.sp .6
.RS 4n
输出的第一列表示每个映射的起始虚拟地址。虚拟地址是以升序显示的。
.RE

.sp
.ne 2
.mk
.na
\fB虚拟映射大小 (\fBKbytes\fR)\fR
.ad
.sp .6
.RS 4n
每个映射的虚拟大小（以千字节为单位）。
.RE

.sp
.ne 2
.mk
.na
\fB驻留物理内存 (\fBRSS\fR)\fR
.ad
.sp .6
.RS 4n
为每个映射驻留的物理内存量（以千字节为单位），包括与其他地址空间共享的物理内存。
.RE

.sp
.ne 2
.mk
.na
\fB匿名内存 (\fBAnon\fR)\fR
.ad
.sp .6
.RS 4n
使用系统页面大小计数的与指定映射相关联的匿名内存的页面数。不包括与其他地址空间共享的匿名内存，除非指定了 \fB-a\fR 选项。
.sp
为包含通过 \fBMAP_PRIVATE\fR（请参见 \fBmmap\fR(2)）映射的映射的"写入时复制"页面的进程堆、栈报告匿名内存。
.RE

.sp
.ne 2
.mk
.na
\fB锁定 (\fBLocked\fR)\fR
.ad
.sp .6
.RS 4n
映射内被锁定的页面数。典型示例有通过 \fBmlock()\fR 锁定的内存和通过 \fBSHM_SHARE_MMU\fR 创建的 System V 共享内存。
.RE

.sp
.ne 2
.mk
.na
\fB权限/标志 (\fBMode\fR)\fR
.ad
.sp .6
.RS 4n
显示每个映射的虚拟内存权限。有效权限有：
.sp
.ne 2
.mk
.na
\fB\fBr:\fR\fR
.ad
.RS 9n
.rt  
进程可以读取映射。
.RE

.sp
.ne 2
.mk
.na
\fB\fBw:\fR\fR
.ad
.RS 9n
.rt  
进程可以写入映射。
.RE

.sp
.ne 2
.mk
.na
\fB\fBx：:\fR\fR
.ad
.RS 9n
.rt  
进程可以执行驻留在映射内的指令。
.RE

可以显示为每个映射显示其他信息的标志：
.sp
.ne 2
.mk
.na
\fB\fBs:\fR\fR
.ad
.RS 6n
.rt  
映射是共享的，因此在所观察的地址空间中所做的更改将提交到映射的文件，且可以从共享该映射的所有其他进程中看到这些更改。
.RE

.sp
.ne 2
.mk
.na
\fB\fBR:\fR\fR
.ad
.RS 6n
.rt  
没有为此映射预留交换空间。使用 \fBMAP_NORESERVE\fR 创建的映射和 System V \fBISM\fR 共享内存映射不预留交换空间。
.RE

.sp
.ne 2
.mk
.na
\fB\fB*:\fR\fR
.ad
.RS 6n
.rt  
核心文件中不存在映射数据（仅当应用于核心文件时适用）。有关配置核心文件内容的信息，请参见 \fBcoreadm\fR(1M)。
.RE

.RE

.sp
.ne 2
.mk
.na
\fBLgroup (\fBLgrp\fR)\fR
.ad
.sp .6
.RS 4n
包含为指定映射提供后备支持的物理内存的 lgroup。
.RE

.sp
.ne 2
.mk
.na
\fB映射名称 (\fBMapped File\fR)\fR
.ad
.sp .6
.RS 4n
每个映射的说明性名称。将为映射显示下列主要的名称类型：
.RS +4
.TP
.ie t \(bu
.el o
\fB映射的文件：\fR对于进程与文件之间的映射，\fBpmap\fR 命令会尝试解析每个映射的文件名。如果无法解析文件名，\fBpmap\fR 将显示包含该文件的主设备号和从设备号，以及文件的文件系统 inode 编号。
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fB匿名内存：\fR将与文件系统内的任何已命名对象或文件都不相关的内存报告为 \fB[ anon ]\fR。
.sp
\fBpmap\fR 命令显示某些已知匿名内存映射的通用名称：
.RS

.sp
.ne 2
.mk
.na
\fB\fB[ heap ]\fR\fR
.ad
.RS 22n
.rt  
映射是进程堆。
.RE

.sp
.ne 2
.mk
.na
\fB\fB[ stack ]\fR\fR
.ad
.RS 22n
.rt  
映射是主栈。
.RE

.sp
.ne 2
.mk
.na
\fB\fB[ stack tid=\fIn\fR ]\fR\fR
.ad
.RS 22n
.rt  
映射是线程 \fIn\fR 的栈。
.RE

.sp
.ne 2
.mk
.na
\fB\fB[ altstack tid=\fIn\fR ]\fR\fR
.ad
.RS 22n
.rt  
映射用作线程 \fIn\fR 的备用信号栈。
.RE

.RE

如果映射的通用名称未知，\fBpmap\fR 将 \fB[ anon ]\fR 显示为映射名称。
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBSystem V 共享内存：\fR使用 System V 共享内存系统调用创建的映射是通过下面显示的名称报告的：
.RS

.sp
.ne 2
.mk
.na
\fB\fBshmid=n：\fR\fR
.ad
.RS 19n
.rt  
映射是 System V 共享内存映射。报告了创建映射时使用的共享内存标识符。
.RE

.sp
.ne 2
.mk
.na
\fB\fBism shmid=n：\fR\fR
.ad
.RS 19n
.rt  
映射是 System V 共享内存的"锁定共享内存"（ISM） 变体。\fBISM\fR 映射是在设置了 \fBSHM_SHARE_MMU\fR 标志的情况下依照 \fBshmat\fR(2) 创建的（请参见 \fBshmop\fR(2)）。
.RE

.sp
.ne 2
.mk
.na
\fB\fBdism shmid=n：\fR\fR
.ad
.RS 19n
.rt  
映射是 \fBISM\fR 的可分页变体。可分页的 \fBISM\fR 是在设置了 \fBSHM_PAGEABLE\fR 标志的情况下依照 \fBshmat\fR(2) 创建的（请参见 \fBshmop\fR(2)）。
.RE

.RE

.RE
.RS +4
.TP
.ie t \(bu
.el o
\fB其他：\fR其他对象（包括帧缓冲区等设备）的映射。对于其他被映射的对象，没有显示映射名称。
.RE
.RE

.sp
.ne 2
.mk
.na
\fB页面大小 (\fBPgsz\fR)\fR
.ad
.sp .6
.RS 4n
用于该映射的硬件地址转换的页面大小（以千字节为单位）。有关详细信息，请参见 \fBmemcntl\fR(2)。
.RE

.sp
.ne 2
.mk
.na
\fB交换空间 (\fBSwap\fR)\fR
.ad
.sp .6
.RS 4n
为该映射预留的交换空间量（以千字节为单位）。即，从由 \fBswap\fR \fB-s\fR 命令显示的总的可用预留交换空间池中扣除的交换空间。请参见 \fBswap\fR(1M)。
.RE

.SH 示例
.LP
\fB示例 1 \fR显示进程映射
.sp
.LP
缺省情况下，\fBpmap\fR 为目标进程的地址空间内的每个映射输出一行。下面的示例显示了典型 bourne shell 的地址空间：

.sp
.in +2
.nf
example$ pmap 102905
102905:    sh
00010000    192K r-x--  /usr/bin/ksh
00040000      8K rwx--  /usr/bin/ksh
00042000     40K rwx--    [ heap ]
FF180000    664K r-x--  /usr/lib/libc.so.1
FF236000     24K rwx--  /usr/lib/libc.so.1
FF23C000      8K rwx--  /usr/lib/libc.so.1
FF250000      8K rwx--    [ anon ]
FF260000     16K r-x--  /usr/lib/en_US.ISO8859-1.so.2
FF272000     16K rwx--  /usr/lib/en_US.ISO8859-1.so.2
FF280000    560K r-x--  /usr/lib/libnsl.so.1
FF31C000     32K rwx--  /usr/lib/libnsl.so.1
FF324000     32K rwx--  /usr/lib/libnsl.so.1
FF350000     16K r-x--  /usr/lib/libmp.so.2
FF364000      8K rwx--  /usr/lib/libmp.so.2
FF380000     40K r-x--  /usr/lib/libsocket.so.1
FF39A000      8K rwx--  /usr/lib/libsocket.so.1
FF3A0000      8K r-x--  /usr/lib/libdl.so.1
FF3B0000      8K rwx--    [ anon ]
FF3C0000    152K r-x--  /usr/lib/ld.so.1
FF3F6000      8K rwx--  /usr/lib/ld.so.1
FFBFC000     16K rw---    [ stack ]
 total     1864
.fi
.in -2
.sp

.LP
\fB示例 2 \fR显示内存分配和映射类型
.sp
.LP
可使用 \fB-x\fR 选项提供有关每个映射的内存分配和映射类型的信息。为每个映射显示了驻留的、非共享匿名的和锁定的内存量：

.sp
.in +2
.nf
example$ pmap -x 102908
102908:   sh
Address   Kbytes     RSS    Anon  Locked Mode   Mapped File
00010000      88      88       -       - r-x--  sh
00036000       8       8       8       - rwx--  sh
00038000      16      16      16       - rwx--    [ heap ]
FF260000      16      16       -       - r-x--  en_US.ISO8859-1.so.2
FF272000      16      16       -       - rwx--  en_US.ISO8859-1.so.2
FF280000     664     624       -       - r-x--  libc.so.1
FF336000      32      32       8       - rwx--  libc.so.1
FF380000      24      24       -       - r-x--  libgen.so.1
FF396000       8       8       -       - rwx--  libgen.so.1
FF3A0000       8       8       -       - r-x--  libdl.so.1
FF3B0000       8       8       8       - rwx--    [ anon ]
FF3C0000     152     152       -       - r-x--  ld.so.1
FF3F6000       8       8       8       - rwx--  ld.so.1
FFBFE000       8       8       8       - rw---    [ stack ]
--------   -----   -----   -----   ------
total Kb    1056    1016      56       -
.fi
.in -2
.sp

.sp
.LP
通过使用每个映射的驻留内存计数和匿名内存计数可以估算进程的每个附加实例使用的增量内存量。

.sp
.LP
在上面的示例中，bourne shell 具有 1032 千字节的驻留内存大小。不过，该 shell 使用的大量物理内存是与 shell 的其他实例共享的。shell 的另一相同实例会尽可能地与该 shell 共享物理内存，并为任何非共享部分分配匿名内存。在上面的示例中，每个附加 bourne shell 使用了大约 56 千字节的附加物理内存。

.sp
.LP
下面的较复杂示例显示了包含不同映射类型的进程的输出格式。在此示例中，映射如下所示：

.sp
.in +2
.nf
0001000: Executable text, mapped from 'maps' program

0002000: Executable data, mapped from 'maps' program

0002200: Program heap


0300000: A mapped file, mapped MAP_SHARED
0400000: A mapped file, mapped MAP_PRIVATE

0500000: A mapped file, mapped MAP_PRIVATE | MAP_NORESERVE

0600000: Anonymous memory, created by mapping /dev/zero

0700000: Anonymous memory, created by mapping /dev/zero
         with MAP_NORESERVE

0800000: A DISM shared memory mapping, created with SHM_PAGEABLE
         with 8MB locked via mlock(2)

0900000: A DISM shared memory mapping, created with SHM_PAGEABLE,
         with 4MB of its pages touched.

0A00000: A DISM shared memory mapping, created with SHM_PAGEABLE,
         with none of its pages touched.

0B00000: An ISM shared memory mapping, created with SHM_SHARE_MMU
.fi
.in -2
.sp

.sp
.in +2
.nf
example$ pmap -x 15492
15492:  ./maps
 Address  Kbytes     RSS    Anon  Locked Mode   Mapped File
00010000       8       8       -       - r-x--  maps
00020000       8       8       8       - rwx--  maps
00022000   20344   16248   16248       - rwx--    [ heap ]
03000000    1024    1024       -       - rw-s-  dev:0,2 ino:4628487
04000000    1024    1024     512       - rw---  dev:0,2 ino:4628487
05000000    1024    1024     512       - rw--R  dev:0,2 ino:4628487
06000000    1024    1024    1024       - rw---    [ anon ]
07000000     512     512     512       - rw--R    [ anon ]
08000000    8192    8192       -    8192 rwxs-    [ dism shmid=0x5]
09000000    8192    4096       -       - rwxs-    [ dism shmid=0x4]
0A000000    8192    8192       -    8192 rwxsR    [ ism shmid=0x2 ]
0B000000    8192    8192       -    8192 rwxsR    [ ism shmid=0x3 ]
FF280000     680     672       -       - r-x--  libc.so.1
FF33A000      32      32      32       - rwx--  libc.so.1
FF3A0000       8       8       -       - r-x--  libdl.so.1
FF3B0000       8       8       8       - rwx--    [ anon ]
FF3C0000     152     152       -       - r-x--  ld.so.1
FF3F6000       8       8       8       - rwx--  ld.so.1
FFBFA000      24      24      24       - rwx--    [ stack ]
-------- ------- ------- ------- -------
total Kb   50456   42256   18888   16384
.fi
.in -2
.sp

.LP
\fB示例 3 \fR显示页面大小信息
.sp
.LP
可以使用 \fB-s\fR 选项为地址空间的每一部分显示硬件转换页面大小。（有关 Solaris 多页面大小支持的详细信息，请参见 \fBmemcntl\fR(2)）。

.sp
.LP
在下面的示例中，我们可以看到绝大部分映射使用 8 KB 的页面大小，而堆使用 4 MB 的页面大小。

.sp
.LP
请注意，相同页面大小的驻留页面的非连续区域报告为单独的映射。在下面的示例中，\fBlibc.so\fR 库被报告为多个单独的映射，因为只有部分 \fBlibc.so\fR 文本是驻留的：

.sp
.in +2
.nf
example$ pmap -xs 15492
15492:  ./maps
 Address  Kbytes     RSS    Anon  Locked Pgsz Mode   Mapped File
00010000       8       8       -       -   8K r-x--  maps
00020000       8       8       8       -   8K rwx--  maps
00022000    3960    3960    3960       -   8K rwx--    [ heap ]
00400000    8192    8192    8192       -   4M rwx--    [ heap ]
00C00000    4096       -       -       -    - rwx--    [ heap ]
01000000    4096    4096    4096       -   4M rwx--    [ heap ]
03000000    1024    1024       -       -   8K rw-s-  dev:0,2 ino:4628487
04000000     512     512     512       -   8K rw---  dev:0,2 ino:4628487
04080000     512     512       -       -    - rw---  dev:0,2 ino:4628487
05000000     512     512     512       -   8K rw--R  dev:0,2 ino:4628487
05080000     512     512       -       -    - rw--R  dev:0,2 ino:4628487
06000000    1024    1024    1024       -   8K rw---    [ anon ]
07000000     512     512     512       -   8K rw--R    [ anon ]
08000000    8192    8192       -    8192    - rwxs-    [ dism shmid=0x5 ]
09000000    4096    4096       -       -   8K rwxs-    [ dism shmid=0x4 ]
0A000000    4096       -       -       -    - rwxs-    [ dism shmid=0x2 ]
0B000000    8192    8192       -    8192   4M rwxsR    [ ism shmid=0x3 ]
FF280000     136     136       -       -   8K r-x--  libc.so.1
FF2A2000     120     120       -       -    - r-x--  libc.so.1
FF2C0000     128     128       -       -   8K r-x--  libc.so.1
FF2E0000     200     200       -       -    - r-x--  libc.so.1
FF312000      48      48       -       -   8K r-x--  libc.so.1
FF31E000      48      40       -       -    - r-x--  libc.so.1
FF33A000      32      32      32       -   8K rwx--  libc.so.1
FF3A0000       8       8       -       -   8K r-x--  libdl.so.1
FF3B0000       8       8       8       -   8K rwx--    [ anon ]
FF3C0000     152     152       -       -   8K r-x--  ld.so.1
FF3F6000       8       8       8       -   8K rwx--  ld.so.1
FFBFA000      24      24      24       -   8K rwx--    [ stack ]
     -------- ------- ------- ------- -------
total Kb   50456   42256   18888   16384
.fi
.in -2
.sp

.LP
\fB示例 4 \fR显示交换预留空间
.sp
.LP
可使用 \fB-S\fR 选项来描述进程的交换预留空间。将为进程内的每个映射显示预留的交换空间量。对于共享的映射，交换预留空间报告为零，因为这类预留空间仅在系统范围内计入一次。

.sp
.in +2
.nf
example$ pmap -S 15492
15492:  ./maps
 Address  Kbytes    Swap Mode   Mapped File
00010000       8       - r-x--  maps
00020000       8       8 rwx--  maps
00022000   20344   20344 rwx--    [ heap ]
03000000    1024       - rw-s-  dev:0,2 ino:4628487
04000000    1024    1024 rw---  dev:0,2 ino:4628487
05000000    1024     512 rw--R  dev:0,2 ino:4628487
06000000    1024    1024 rw---    [ anon ]
07000000     512     512 rw--R    [ anon ]
08000000    8192       - rwxs-    [ dism shmid=0x5]
09000000    8192       - rwxs-    [ dism shmid=0x4]
0A000000    8192       - rwxs-    [ dism shmid=0x2]
0B000000    8192       - rwxsR    [ ism shmid=0x3]
FF280000     680       - r-x--  libc.so.1
FF33A000      32      32 rwx--  libc.so.1
FF3A0000       8       - r-x--  libdl.so.1
FF3B0000       8       8 rwx--    [ anon ]
FF3C0000     152       - r-x--  ld.so.1
FF3F6000       8       8 rwx--  ld.so.1
FFBFA000      24      24 rwx--    [ stack ]
-------- ------- -------
total Kb   50456   23496
.fi
.in -2
.sp

.sp
.LP
可以使用交换预留空间信息估算每个附加进程使用的虚拟交换量。每个进程都使用全局虚拟交换池中的虚拟交换。全局交换预留空间是由 \fBswap\fR(1M) 命令的"\fBavail\fR"字段报告的。

.LP
\fB示例 5 \fR标记多线程进程中的栈
.sp
.in +2
.nf
example$ pmap 121969
121969: ./stacks
00010000       8K r-x--  /tmp/stacks
00020000       8K rwx--  /tmp/stacks
FE8FA000       8K rwx-R    [ stack tid=11 ]
FE9FA000       8K rwx-R    [ stack tid=10 ]
FEAFA000       8K rwx-R    [ stack tid=9 ]
FEBFA000       8K rwx-R    [ stack tid=8 ]
FECFA000       8K rwx-R    [ stack tid=7 ]
FEDFA000       8K rwx-R    [ stack tid=6 ]
FEEFA000       8K rwx-R    [ stack tid=5 ]
FEFFA000       8K rwx-R    [ stack tid=4 ]
FF0FA000       8K rwx-R    [ stack tid=3 ]
FF1FA000       8K rwx-R    [ stack tid=2 ]
FF200000      64K rw---    [ altstack tid=8 ]
FF220000      64K rw---    [ altstack tid=4 ]
FF240000     112K rw---    [ anon ]
FF260000      16K rw---    [ anon ]
FF280000     672K r-x--  /usr/lib/libc.so.1
FF338000      24K rwx--  /usr/lib/libc.so.1
FF33E000       8K rwx--  /usr/lib/libc.so.1
FF35A000       8K rwxs-    [ anon ]
FF360000     104K r-x--  /usr/lib/libthread.so.1
FF38A000       8K rwx--  /usr/lib/libthread.so.1
FF38C000       8K rwx--  /usr/lib/libthread.so.1
FF3A0000       8K r-x--  /usr/lib/libdl.so.1
FF3B0000       8K rwx--    [ anon ]
FF3C0000     152K r-x--  /usr/lib/ld.so.1
FF3F6000       8K rwx--  /usr/lib/ld.so.1
FFBFA000      24K rwx--    [ stack ]
 total      1384
.fi
.in -2
.sp

.LP
\fB示例 6 \fR显示 lgroup 内存分配
.sp
.LP
下面的示例按映射显示 lgroup 内存分配：

.sp
.in +2
.nf
example$ pmap -L `pgrep nscd`
100095: /usr/sbin/nscd
00010000       8K r-x--   2 /usr/sbin/nscd
00012000      48K r-x--   1 /usr/sbin/nscd
0002E000       8K rwx--   2 /usr/sbin/nscd
00030000      16K rwx--   2   [ heap ]
00034000       8K rwx--   1   [ heap ]
         .
         .
         .
FD80A000      24K rwx--   2   [ anon ]
FD820000       8K r-x--   2 /lib/libmd5.so.1
FD840000      16K r-x--   1 /lib/libmp.so.2
FD860000       8K r-x--   2 /usr/lib/straddr.so.2
FD872000       8K rwx--   1 /usr/lib/straddr.so.2
FD97A000       8K rw--R   1   [ stack tid=24 ]
FD990000       8K r-x--   2 /lib/nss_nis.so.1
FD992000      16K r-x--   1 /lib/nss_nis.so.1
FD9A6000       8K rwx--   1 /lib/nss_nis.so.1
FD9C0000       8K rwx--   2   [ anon ]
FD9D0000       8K r-x--   2 /lib/nss_files.so.1
FD9D2000      16K r-x--   1 /lib/nss_files.so.1
FD9E6000       8K rwx--   2 /lib/nss_files.so.1
FDAFA000       8K rw--R   2   [ stack tid=23 ]
FDBFA000       8K rw--R   1   [ stack tid=22 ]
FDCFA000       8K rw--R   1   [ stack tid=21 ]
FDDFA000       8K rw--R   1   [ stack tid=20 ]
    .
    .
    .
FEFFA000       8K rw--R   1   [ stack tid=2 ]
FF000000       8K rwx--   2   [ anon ]
FF004000      16K rwx--   1   [ anon ]
FF00A000      16K rwx--   1   [ anon ]
    .
    .
    .
FF3EE000       8K rwx--   2 /lib/ld.so.1
FFBFE000       8K rw---   2   [ stack ]
 total      2968K
.fi
.in -2
.sp

.SH 退出状态
.sp
.LP
将返回以下退出值：
.sp
.ne 2
.mk
.na
\fB\fB0\fR\fR
.ad
.RS 13n
.rt  
操作成功。
.RE

.sp
.ne 2
.mk
.na
\fB非零值\fR
.ad
.RS 13n
.rt  
出现错误。
.RE

.SH 文件
.sp
.ne 2
.mk
.na
\fB\fB/proc/*\fR\fR
.ad
.RS 19n
.rt  
进程文件
.RE

.sp
.ne 2
.mk
.na
\fB\fB/usr/proc/lib/*\fR\fR
.ad
.RS 19n
.rt  
\fBproc\fR 工具支持文件
.RE

.SH 属性
.sp
.LP
有关下列属性的描述，请参见 \fBattributes\fR(5)：
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
属性类型属性值
_
可用性system/core-os
_
接口稳定性请参见下文。
.TE

.sp
.LP
命令语法是 "Committed"（已确定）。\fB-L\fR 选项和输出格式是 "Uncommitted"（未确定）。
.SH 另请参见
.sp
.LP
\fBldd\fR(1)、\fBlgrpinfo\fR(1)、\fBmadv.so.1\fR(1)、\fBmdb\fR(1)、\fBplgrp\fR(1)、\fBpmadvise\fR(1)、\fBproc\fR(1)、\fBps\fR(1)、\fBcoreadm\fR(1M)、\fBprstat\fR(1M)、\fBswap\fR(1M)、\fBmmap\fR(2)、\fBmemcntl\fR(2)、\fBmeminfo\fR(2)、\fBshmop\fR(2)、\fBdlopen\fR(3C)、\fBproc\fR(4)、\fBattributes\fR(5)
