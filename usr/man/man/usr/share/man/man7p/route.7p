'\" te
.\" Copyright (c) 1990, 1991, 1993 The Regents of the University of California. All rights reserved.
.\" Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. All advertising materials mentioning features or use of this software must display the following acknowledgement: This product includes software developed by the University of California, Berkeley and its contributors. 4. Neither the name of the University nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\" Portions Copyright (c) 2009, Sun Microsystems, Inc. All Rights Reserved.
.TH route 7P "13 Nov 2009" "SunOS 5.11" "Protocols"
.SH NAME
route \- kernel packet forwarding database
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/socket.h>
#include <net/if.h>
#include <net/route.h>

\fBint\fR \fBsocket\fR(\fB\fR\fIPF_ROUTE\fR, \fB\fR\fISOCK_RAW\fR, \fBint\fR \fIprotocol\fR);
.fi

.SH DESCRIPTION
.sp
.LP
UNIX provides some packet routing facilities. The kernel maintains a routing information database, which is used in selecting the appropriate network interface when transmitting packets.
.sp
.LP
A user process (or possibly multiple co-operating processes) maintains this database by sending messages over a special kind of socket. This supplants fixed size \fBioctl\fR(2)'s specified in \fBrouting\fR(7P). Routing table changes can only be carried out by the superuser.
.sp
.LP
The operating system might spontaneously emit routing messages in response to external events, such as receipt of a re-direct, or failure to locate a suitable route for a request. The message types are described in greater detail below.
.sp
.LP
Routing database entries come in two flavors: entries for a specific host, or entries for all hosts on a generic subnetwork (as specified by a bit mask and value under the mask). The effect of wildcard or default route can be achieved by using a mask of all zeros, and there can be hierarchical routes.
.sp
.LP
When the system is booted and addresses are assigned to the network interfaces, the internet protocol family installs a routing table entry for each interface when it is ready for traffic. Normally the protocol specifies the route through each interface as a \fIdirect\fR connection to the destination host or network. If the route is direct, the transport layer of a protocol family usually requests the packet be sent to the same host specified in the packet. Otherwise, the interface is requested to address the packet to the gateway listed in the routing entry, that is, the packet is forwarded.
.sp
.LP
When routing a packet, the kernel attempts to find the most specific route matching the destination. If no entry is found, the destination is declared to be unreachable, and a routing-miss message is generated if there are any listeners on the routing control socket (described below). If there are two different mask and value-under-the-mask pairs that match, the more specific is the one with more bits in the mask. A route to a host is regarded as being supplied with a mask of as many ones as there are bits in the destination.
.sp
.LP
A wildcard routing entry is specified with a zero destination address value, and a mask of all zeroes. Wildcard routes are used when the system fails to find other routes matching the destination. The combination of wildcard routes and routing redirects can provide an economical mechanism for routing traffic.
.sp
.LP
One opens the channel for passing routing control messages by using the socket call. There can be more than one routing socket open per system.
.sp
.LP
Messages are formed by a header followed by a small number of \fBsockaddrs\fR, whose length depend on the address family. \fBsockaddrs\fR are interpreted by position. An example of a type of message with three addresses might be a \fBCIDR\fR prefix route: Destination, Netmask, and Gateway. The interpretation of which addresses are present is given by a bit mask within the header, and the sequence is least significant to most significant bit within the vector.
.sp
.LP
Any messages sent to the kernel are returned, and copies are sent to all interested listeners. The kernel provides the process \fBID\fR of the sender, and the sender can use an additional sequence field to distinguish between outstanding messages. However, message replies can be lost when kernel buffers are exhausted.
.sp
.LP
The \fIprotocol\fR parameter specifies which messages an application listening on the routing socket is interested in seeing, based on the the address family of the \fBsockaddrs\fR present. Currently, you can specify \fBAF_INET\fR and \fBAF_INET6\fR to filter the messages seen by the listener, or alternatively, you can specify \fBAF_UNSPEC\fR to indicate that the listener is interested in all routing messages. 
.sp
.LP
The kernel might reject certain messages, and indicates this by filling in the \fBrtm_errno\fR field of the \fBrt_msghdr\fR struct (see below). The following codes are returned:
.sp
.ne 2
.mk
.na
\fB\fBEEXIST\fR\fR
.ad
.RS 11n
.rt  
If requested to duplicate an existing entry
.RE

.sp
.ne 2
.mk
.na
\fB\fBESRCH\fR\fR
.ad
.RS 11n
.rt  
If requested to delete a non-existent entry
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOBUFS\fR\fR
.ad
.RS 11n
.rt  
If insufficient resources were available to install a new route.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEPERM\fR\fR
.ad
.RS 11n
.rt  
If the calling process does not have appropriate privileges to alter the routing table.
.RE

.sp
.LP
In the current implementation, all routing processes run locally, and the values for \fBrtm_errno\fR are available through the normal \fBerrno\fR mechanism, even if the routing reply message is lost.
.sp
.LP
A process can avoid the expense of reading replies to its own messages by issuing a \fBsetsockopt\fR(3SOCKET) call indicating that the \fBSO_USELOOPBACK\fR option at the \fBSOL_SOCKET\fR level is to be turned off. A process can ignore all messages from the routing socket by doing a \fBshutdown\fR(3SOCKET) system call for further input.
.sp
.LP
By default, underlying IP interfaces in an IPMP group are not visible to routing sockets. As such, routing sockets do not receive events related to underlying IP interface in an IPMP group. For consistency, when an IP interface is placed into an IPMP group, \fBRTM_DELADDR\fR messages are generated for each \fBIFF_UP\fR address that is not migrated to the corresponding IPMP IP interface and an \fBRTM_IFINFO\fR message is sent indicating the interface is down. Similarly, when an underlying interface is removed from an IPMP group, an \fBRTM_IFINFO\fR message is sent indicating the interface is again up and \fBRTM_NEWADDR\fR messages are generated for each \fBIFF_UP\fR address found on the interface.
.sp
.LP
The \fBRT_AWARE\fR socket option at the \fBSOL_ROUTE\fR level allows an application to indicate its awareness of certain features, which control routing socket behavior. The supported values are:
.sp
.ne 2
.mk
.na
\fB\fBRTAW_DEFAULT\fR\fR
.ad
.RS 20n
.rt  
Default awareness.
.RE

.sp
.ne 2
.mk
.na
\fB\fBRTAW_UNDER_IPMP\fR\fR
.ad
.RS 20n
.rt  
IPMP underlying interface awareness. When enabled, underlying IP interfaces in an IPMP group remain visible to the routing socket and events related to them continue to be generated.
.RE

.sp
.LP
An \fBRTM_ADD\fR request tied to an underlying IP interface in an IPMP group is translated to an \fBRTM_ADD\fR request for its corresponding IPMP IP interface. All routing socket requests other than \fBRTM_ADD\fR and \fBRTM_GET\fR fail when issued on an underlying IP interface in an IPMP group.
.sp
.LP
If a route is in use when it is deleted, the routing entry is marked down and removed from the routing table, but the resources associated with it are not reclaimed until all references to it are released.
.sp
.LP
The \fBRTM_IFINFO\fR, \fBRTM_NEWADDR\fR, and \fBRTM_ADD\fR messages associated with interface configuration (setting the \fBIFF_UP\fR bit) are normally delayed until after Duplicate Address Detection completes. Thus, applications that configure interfaces and wish to wait until the interface is ready can wait until \fBRTM_IFINFO\fR is returned and \fBSIOCGLIFFLAGS\fR shows that \fBIFF_DUPLICATE\fR is not set.
.SS "Messages"
.sp
.LP
User processes can obtain information about the routing entry to a specific destination by using a \fBRTM_GET\fR message.
.sp
.LP
Messages include: 
.sp
.in +2
.nf
#define RTM_ADD      0x1   /* Add Route */
#define RTM_DELETE   0x2   /* Delete Route */
#define RTM_CHANGE   0x3   /* Change Metrics, Flags, or Gateway */
#define RTM_GET      0x4   /* Report Information */
#define RTM_LOSING   0x5   /* Kernel Suspects Partitioning */
#define RTM_REDIRECT 0x6   /* Told to use different route */
#define RTM_MISS     0x7   /* Lookup failed on this address */
#define RTM_LOCK     0x8   /* fix specified metrics */
#define RTM_OLDADD   0x9   /* caused by SIOCADDRT */
#define RTM_OLDDEL   0xa   /* caused by SIOCDELRT */
#define RTM_RESOLVE  0xb   /* request to resolve dst to LL addr */
#define RTM_NEWADDR  0xc   /* address being added to iface */
#define RTM_DELADDR  0xd   /* address being removed from iface */
#define RTM_IFINFO   0xe   /* iface going up/down etc. */
.fi
.in -2

.sp
.LP
A message header consists of:
.sp
.in +2
.nf
struct rt_msghdr {
  ushort_t rtm_msglen;    /* to skip over non-understood messages */
  uchar_t  rtm_version;   /* future binary compatibility */
  uchar_t  rtm_type;      /* message type */
  ushort_t rtm_index;     /* index for associated ifp */
  pid_t   rtm_pid;        /* identify sender */
  int     rtm_addrs;      /* bitmask identifying sockaddrs in msg */
  int     rtm_seq;        /* for sender to identify action */
  int     rtm_errno;      /* why failed */
  int     rtm_flags;      /*  flags,  incl  kern  &  message, e.g., DONE */
  int     rtm_use;        /* from rtentry */
  uint_t  rtm_inits;      /* which values we are initializing */

struct  rt_metrics rtm_rmx;   /* metrics themselves */
     };
.fi
.in -2

.sp
.LP
where
.sp
.in +2
.nf
struct rt_metrics {
  uint32_t rmx_locks;      /* Kernel must leave  these  values alone */
  uint32_t rmx_mtu;        /* MTU for this path */     
  uint32_t rmx_hopcount;   /* max hops expected */
  uint32_t rmx_expire;     /* lifetime for route, e.g., redirect */
  uint32_t rmx_recvpipe;   /* inbound delay-bandwidth  product */
  uint32_t rmx_sendpipe;   /* outbound delay-bandwidth product */
  uint32_t rmx_ssthresh;   /* outbound gateway buffer limit */
  uint32_t rmx_rtt;        /* estimated round trip time */
  uint32_t rmx_rttvar;     /* estimated rtt variance */
  uint32_t rmx_pksent;     /* packets sent using this route */
 };

/* Flags include the values */


#define RTF_UP         0x1     /* route usable */
#define RTF_GATEWAY    0x2     /* destination is a gateway */
#define RTF_HOST       0x4     /* host entry (net otherwise) */
#define RTF_REJECT     0x8     /* host or net unreachable */
#define RTF_DYNAMIC    0x10    /* created dynamically(by redirect) */
#define RTF_MODIFIED   0x20    /* modified dynamically(by redirect) */
#define RTF_DONE       0x40    /* message confirmed */
#define RTF_MASK       0x80    /* subnet mask present */
#define RTF_CLONING    0x100   /* generate new routes on use */
#define RTF_XRESOLVE   0x200   /* external daemon resolves name */
#define RTF_LLINFO     0x400   /* generated by ARP */
#define RTF_STATIC     0x800   /* manually added */
#define RTF_BLACKHOLE  0x1000  /* just discard pkts (during updates) */
#define RTF_PRIVATE    0x2000  /* do not advertise this route */
#define RTF_PROTO2     0x4000  /* protocol specific routing flag #2 */
#define RTF_PROTO1     0x8000  /* protocol specific routing flag #1 */
#define RTF_MULTIRT    0x10000 /* multiroute */
#define RTF_SETSRC     0x20000 /* set default outgoing src address */
#define RTF_INDIRECT   0x40000 /* gateway not directly reachable */
#define RTF_KERNEL     0x80000 /* created by kernel; can't delete */

/* Specifiers for metric values in rmx_locks and rtm_inits are */

#define RTV_MTU        0x1     /* init or lock _mtu */
#define RTV_HOPCOUNT   0x2     /* init or lock _hopcount */
#define RTV_EXPIRE     0x4     /* init or lock _expire */
#define RTV_RPIPE      0x8     /* init or lock _recvpipe */
#define RTV_SPIPE      0x10    /* init or lock _sendpipe */
#define RTV_SSTHRESH   0x20    /* init or lock _ssthresh */
#define RTV_RTT        0x40    /* init or lock _rtt */
#define RTV_RTTVAR     0x80    /* init or lock _rttvar */

/* Specifiers for which addresses are present in  the  messages are */

#define RTA_DST        0x1     /* destination sockaddr present */
#define RTA_GATEWAY    0x2     /* gateway sockaddr present */
#define RTA_NETMASK    0x4     /* netmask sockaddr present */
#define RTA_GENMASK    0x8     /* cloning mask sockaddr present */
#define RTA_IFP        0x10    /* interface name sockaddr present */
#define RTA_IFA        0x20    /* interface addr sockaddr present */
#define RTA_AUTHOR     0x40    /* sockaddr for author of redirect */
#define RTA_BRD        0x80    /* for NEWADDR, broadcast or p-p dest addr */
.fi
.in -2

.SH SEE ALSO
.sp
.LP
\fBioctl\fR(2), \fBsetsockopt\fR(3SOCKET), \fBshutdown\fR(3SOCKET), \fBrouting\fR(7P)
.SH NOTES
.sp
.LP
Some of the metrics might not be implemented and return zero. The implemented metrics are set in \fBrtm_inits\fR.
.sp
.LP
The RTF_INDIRECT flag allows adding routes where the gateway is not directly reachable. When an indirect route is the best match for a packet to be sent or forwarded, then IP proceeds to lookup that gateway to find a route that is directly reachable. The RTF_INDIRECT flag can be used even if the gateway is directly reachable.
.sp
.LP
When the routing table contains several equal routes, that is, routes for the same destination and mask, then IP attempts to spread the traffic over those routes. The spreading is such that an individual transport connection uses the same route to avoid packet reordering as seen by e.g., TCP. The details of the spreading algoritm is not documented and is likely to evolve over time.
