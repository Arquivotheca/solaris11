.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLFAQ1 1"
.TH PERLFAQ1 1 "2004-06-08" "perl v5.8.4" "Perl Programmers Reference Guide"
.SH "NAME"
perlfaq1 \- General Questions About Perl ($Revision: 1.14 $, $Date: 2003/11/23 08:02:29 $)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This section of the \s-1FAQ\s0 answers very general, high-level questions
about Perl.
.Sh "What is Perl?"
.IX Subsection "What is Perl?"
Perl is a high-level programming language with an eclectic heritage
written by Larry Wall and a cast of thousands.  It derives from the
ubiquitous C programming language and to a lesser extent from sed,
awk, the Unix shell, and at least a dozen other tools and languages.
Perl's process, file, and text manipulation facilities make it
particularly well-suited for tasks involving quick prototyping, system
utilities, software tools, system management tasks, database access,
graphical programming, networking, and world wide web programming.
These strengths make it especially popular with system administrators
and \s-1CGI\s0 script authors, but mathematicians, geneticists, journalists,
and even managers also use Perl.  Maybe you should, too.
.Sh "Who supports Perl?  Who develops it?  Why is it free?"
.IX Subsection "Who supports Perl?  Who develops it?  Why is it free?"
The original culture of the pre-populist Internet and the deeply-held
beliefs of Perl's author, Larry Wall, gave rise to the free and open
distribution policy of perl.  Perl is supported by its users.  The
core, the standard Perl library, the optional modules, and the
documentation you're reading now were all written by volunteers.  See
the personal note at the end of the \s-1README\s0 file in the perl source
distribution for more details.  See perlhist (new as of 5.005)
for Perl's milestone releases.
.PP
In particular, the core development team (known as the Perl Porters)
are a rag-tag band of highly altruistic individuals committed to
producing better software for free than you could hope to purchase for
money.  You may snoop on pending developments via the archives at
http://www.xray.mpe.mpg.de/mailing\-lists/perl5\-porters/
and http://archive.develooper.com/perl5\-porters@perl.org/
or the news gateway nntp://nntp.perl.org/perl.perl5.porters or
its web interface at http://nntp.perl.org/group/perl.perl5.porters ,
or read the faq at http://simon\-cozens.org/writings/p5p\-faq ,
or you can subscribe to the mailing list by sending
perl5\-porters\-request@perl.org a subscription request
(an empty message with no subject is fine).
.PP
While the \s-1GNU\s0 project includes Perl in its distributions, there's no
such thing as \*(L"\s-1GNU\s0 Perl\*(R".  Perl is not produced nor maintained by the
Free Software Foundation.  Perl's licensing terms are also more open
than \s-1GNU\s0 software's tend to be.
.PP
You can get commercial support of Perl if you wish, although for most
users the informal support will more than suffice.  See the answer to
\&\*(L"Where can I buy a commercial version of perl?\*(R" for more information.
.Sh "Which version of Perl should I use?"
.IX Subsection "Which version of Perl should I use?"
You should definitely use version 5.  Version 4 is old, limited, and
no longer maintained; its last patch (4.036) was in 1992, long ago and
far away.  Sure, it's stable, but so is anything that's dead; in fact,
perl4 had been called a dead, flea-bitten camel carcass.  The most
recent production release is 5.8.2 (although 5.005_03 and 5.6.2 are
still supported). The most cutting-edge development release is 5.9.
Further references to the Perl language in this document refer to the
production release unless otherwise specified.  There may be one or
more official bug fixes by the time you read this, and also perhaps
some experimental versions on the way to the next release.
All releases prior to 5.004 were subject to buffer overruns, a grave
security issue.
.Sh "What are perl4 and perl5?"
.IX Subsection "What are perl4 and perl5?"
Perl4 and perl5 are informal names for different versions of the Perl
programming language.  It's easier to say \*(L"perl5\*(R" than it is to say
\&\*(L"the 5(.004) release of Perl\*(R", but some people have interpreted this
to mean there's a language called \*(L"perl5\*(R", which isn't the case.
Perl5 is merely the popular name for the fifth major release (October 1994),
while perl4 was the fourth major release (March 1991).  There was also a
perl1 (in January 1988), a perl2 (June 1988), and a perl3 (October 1989).
.PP
The 5.0 release is, essentially, a ground-up rewrite of the original
perl source code from releases 1 through 4.  It has been modularized,
object\-oriented, tweaked, trimmed, and optimized until it almost doesn't
look like the old code.  However, the interface is mostly the same, and
compatibility with previous releases is very high.
See \*(L"Perl4 to Perl5 Traps\*(R" in perltrap.
.PP
To avoid the \*(L"what language is perl5?\*(R" confusion, some people prefer to
simply use \*(L"perl\*(R" to refer to the latest version of perl and avoid using
\&\*(L"perl5\*(R" altogether.  It's not really that big a deal, though.
.PP
See perlhist for a history of Perl revisions.
.Sh "What is Ponie?"
.IX Subsection "What is Ponie?"
At The O'Reilly Open Source Software Convention in 2003, Artur
Bergman, Fotango, and The Perl Foundation announced a project to
run perl5 on the Parrot virtual machine named Ponie. Ponie stands for
Perl On New Internal Engine.  The Perl 5.10 language implementation
will be used for Ponie, and there will be no language level
differences between perl5 and ponie.  Ponie is not a complete rewrite
of perl5.
.PP
For more details, see http://www.poniecode.org/
.Sh "What is perl6?"
.IX Subsection "What is perl6?"
At The Second O'Reilly Open Source Software Convention, Larry Wall
announced Perl6 development would begin in earnest. Perl6 was an oft
used term for Chip Salzenberg's project to rewrite Perl in \*(C+ named
Topaz. However, Topaz provided valuable insights to the next version
of Perl and its implementation, but was ultimately abandoned.
.PP
If you want to learn more about Perl6, or have a desire to help in
the crusade to make Perl a better place then peruse the Perl6 developers
page at http://dev.perl.org/perl6/ and get involved.
.PP
Perl6 is not scheduled for release yet, and Perl5 will still be supported
for quite awhile after its release. Do not wait for Perl6 to do whatever
you need to do.
.PP
\&\*(L"We're really serious about reinventing everything that needs reinventing.\*(R"
\&\-\-Larry Wall
.Sh "How stable is Perl?"
.IX Subsection "How stable is Perl?"
Production releases, which incorporate bug fixes and new functionality,
are widely tested before release.  Since the 5.000 release, we have
averaged only about one production release per year.
.PP
Larry and the Perl development team occasionally make changes to the
internal core of the language, but all possible efforts are made toward
backward compatibility.  While not quite all perl4 scripts run flawlessly
under perl5, an update to perl should nearly never invalidate a program
written for an earlier version of perl (barring accidental bug fixes
and the rare new keyword).
.Sh "Is Perl difficult to learn?"
.IX Subsection "Is Perl difficult to learn?"
No, Perl is easy to start learning\*(--and easy to keep learning.  It looks
like most programming languages you're likely to have experience
with, so if you've ever written a C program, an awk script, a shell
script, or even a \s-1BASIC\s0 program, you're already partway there.
.PP
Most tasks only require a small subset of the Perl language.  One of
the guiding mottos for Perl development is \*(L"there's more than one way
to do it\*(R" (\s-1TMTOWTDI\s0, sometimes pronounced \*(L"tim toady\*(R").  Perl's
learning curve is therefore shallow (easy to learn) and long (there's
a whole lot you can do if you really want).
.PP
Finally, because Perl is frequently (but not always, and certainly not by
definition) an interpreted language, you can write your programs and test
them without an intermediate compilation step, allowing you to experiment
and test/debug quickly and easily.  This ease of experimentation flattens
the learning curve even more.
.PP
Things that make Perl easier to learn: Unix experience, almost any kind
of programming experience, an understanding of regular expressions, and
the ability to understand other people's code.  If there's something you
need to do, then it's probably already been done, and a working example is
usually available for free.  Don't forget the new perl modules, either.
They're discussed in Part 3 of this \s-1FAQ\s0, along with \s-1CPAN\s0, which is
discussed in Part 2.
.Sh "How does Perl compare with other languages like Java, Python, \s-1REXX\s0, Scheme, or Tcl?"
.IX Subsection "How does Perl compare with other languages like Java, Python, REXX, Scheme, or Tcl?"
Favorably in some areas, unfavorably in others.  Precisely which areas
are good and bad is often a personal choice, so asking this question
on Usenet runs a strong risk of starting an unproductive Holy War.
.PP
Probably the best thing to do is try to write equivalent code to do a
set of tasks.  These languages have their own newsgroups in which you
can learn about (but hopefully not argue about) them.
.PP
Some comparison documents can be found at http://language.perl.com/versus/
if you really can't stop yourself.
.Sh "Can I do [task] in Perl?"
.IX Subsection "Can I do [task] in Perl?"
Perl is flexible and extensible enough for you to use on virtually any
task, from one-line file-processing tasks to large, elaborate systems.
For many people, Perl serves as a great replacement for shell scripting.
For others, it serves as a convenient, high-level replacement for most of
what they'd program in low-level languages like C or \*(C+.  It's ultimately
up to you (and possibly your management) which tasks you'll use Perl
for and which you won't.
.PP
If you have a library that provides an \s-1API\s0, you can make any component
of it available as just another Perl function or variable using a Perl
extension written in C or \*(C+ and dynamically linked into your main
perl interpreter.  You can also go the other direction, and write your
main program in C or \*(C+, and then link in some Perl code on the fly,
to create a powerful application.  See perlembed.
.PP
That said, there will always be small, focused, special-purpose
languages dedicated to a specific problem domain that are simply more
convenient for certain kinds of problems.  Perl tries to be all things
to all people, but nothing special to anyone.  Examples of specialized
languages that come to mind include prolog and matlab.
.Sh "When shouldn't I program in Perl?"
.IX Subsection "When shouldn't I program in Perl?"
When your manager forbids it\*(--but do consider replacing them :\-).
.PP
Actually, one good reason is when you already have an existing
application written in another language that's all done (and done
well), or you have an application language specifically designed for a
certain task (e.g. prolog, make).
.PP
For various reasons, Perl is probably not well-suited for real-time
embedded systems, low-level operating systems development work like
device drivers or context-switching code, complex multi-threaded
shared-memory applications, or extremely large applications.  You'll
notice that perl is not itself written in Perl.
.PP
The new, native-code compiler for Perl may eventually reduce the
limitations given in the previous statement to some degree, but understand
that Perl remains fundamentally a dynamically typed language, not
a statically typed one.  You certainly won't be chastised if you don't
trust nuclear-plant or brain-surgery monitoring code to it.  And Larry
will sleep easier, too\*(--Wall Street programs not withstanding. :\-)
.ie n .Sh "What's the difference between ""perl"" and ""Perl""?"
.el .Sh "What's the difference between ``perl'' and ``Perl''?"
.IX Subsection "What's the difference between perl and Perl?"
One bit.  Oh, you weren't talking \s-1ASCII\s0? :\-) Larry now uses \*(L"Perl\*(R" to
signify the language proper and \*(L"perl\*(R" the implementation of it,
i.e. the current interpreter.  Hence Tom's quip that \*(L"Nothing but perl
can parse Perl.\*(R"  You may or may not choose to follow this usage.  For
example, parallelism means \*(L"awk and perl\*(R" and \*(L"Python and Perl\*(R" look
\&\s-1OK\s0, while \*(L"awk and Perl\*(R" and \*(L"Python and perl\*(R" do not.  But never
write \*(L"\s-1PERL\s0\*(R", because perl is not an acronym, apocryphal
folklore and post-facto expansions notwithstanding.
.Sh "Is it a Perl program or a Perl script?"
.IX Subsection "Is it a Perl program or a Perl script?"
Larry doesn't really care.  He says (half in jest) that \*(L"a script is
what you give the actors.  A program is what you give the audience.\*(R"
.PP
Originally, a script was a canned sequence of normally interactive
commands\*(--that is, a chat script.  Something like a \s-1UUCP\s0 or \s-1PPP\s0 chat
script or an expect script fits the bill nicely, as do configuration
scripts run by a program at its start up, such \fI.cshrc\fR or \fI.ircrc\fR,
for example.  Chat scripts were just drivers for existing programs,
not stand-alone programs in their own right.
.PP
A computer scientist will correctly explain that all programs are
interpreted and that the only question is at what level.  But if you
ask this question of someone who isn't a computer scientist, they might
tell you that a \fIprogram\fR has been compiled to physical machine code
once and can then be run multiple times, whereas a \fIscript\fR must be
translated by a program each time it's used.
.PP
Perl programs are (usually) neither strictly compiled nor strictly
interpreted.  They can be compiled to a byte-code form (something of a
Perl virtual machine) or to completely different languages, like C or
assembly language.  You can't tell just by looking at it whether the
source is destined for a pure interpreter, a parse-tree interpreter,
a byte-code interpreter, or a native-code compiler, so it's hard to give
a definitive answer here.
.PP
Now that \*(L"script\*(R" and \*(L"scripting\*(R" are terms that have been seized by
unscrupulous or unknowing marketeers for their own nefarious purposes,
they have begun to take on strange and often pejorative meanings,
like \*(L"non serious\*(R" or \*(L"not real programming\*(R".  Consequently, some Perl
programmers prefer to avoid them altogether.
.Sh "What is a \s-1JAPH\s0?"
.IX Subsection "What is a JAPH?"
These are the \*(L"just another perl hacker\*(R" signatures that some people
sign their postings with.  Randal Schwartz made these famous.  About
100 of the earlier ones are available from
http://www.cpan.org/misc/japh .
.Sh "Where can I get a list of Larry Wall witticisms?"
.IX Subsection "Where can I get a list of Larry Wall witticisms?"
Over a hundred quips by Larry, from postings of his or source code,
can be found at http://www.cpan.org/misc/lwall\-quotes.txt.gz .
.Sh "How can I convince my sysadmin/supervisor/employees to use version 5/5.6.1/Perl instead of some other language?"
.IX Subsection "How can I convince my sysadmin/supervisor/employees to use version 5/5.6.1/Perl instead of some other language?"
If your manager or employees are wary of unsupported software, or
software which doesn't officially ship with your operating system, you
might try to appeal to their self\-interest.  If programmers can be
more productive using and utilizing Perl constructs, functionality,
simplicity, and power, then the typical manager/supervisor/employee
may be persuaded.  Regarding using Perl in general, it's also
sometimes helpful to point out that delivery times may be reduced
using Perl compared to other languages.
.PP
If you have a project which has a bottleneck, especially in terms of
translation or testing, Perl almost certainly will provide a viable,
quick solution.  In conjunction with any persuasion effort, you
should not fail to point out that Perl is used, quite extensively, and
with extremely reliable and valuable results, at many large computer
software and hardware companies throughout the world.  In fact,
many Unix vendors now ship Perl by default.  Support is usually
just a news-posting away, if you can't find the answer in the
\&\fIcomprehensive\fR documentation, including this \s-1FAQ\s0.
.PP
See http://www.perl.org/advocacy/ for more information.
.PP
If you face reluctance to upgrading from an older version of perl,
then point out that version 4 is utterly unmaintained and unsupported
by the Perl Development Team.  Another big sell for Perl5 is the large
number of modules and extensions which greatly reduce development time
for any given task.  Also mention that the difference between version
4 and version 5 of Perl is like the difference between awk and \*(C+.
(Well, \s-1OK\s0, maybe it's not quite that distinct, but you get the idea.)
If you want support and a reasonable guarantee that what you're
developing will continue to work in the future, then you have to run
the supported version.  As of December 2003 that means running either
5.8.2 (released in November 2003), or one of the older releases like
5.6.2 (also released in November 2003; a maintenance release to let perl
5.6 compile on newer systems as 5.6.1 was released in April 2001) or
5.005_03 (released in March 1999),
although 5.004_05 isn't that bad if you \fBabsolutely\fR need such an old
version (released in April 1999) for stability  reasons.
Anything older than 5.004_05 shouldn't be used.
.PP
Of particular note is the massive bug hunt for buffer overflow
problems that went into the 5.004 release.  All releases prior to
that, including perl4, are considered insecure and should be upgraded
as soon as possible.
.PP
In August 2000 in all Linux distributions a new security problem was
found in the optional 'suidperl' (not built or installed by default)
in all the Perl branches 5.6, 5.005, and 5.004, see
http://www.cpan.org/src/5.0/sperl\-2000\-08\-05/
Perl maintenance releases 5.6.1 and 5.8.0 have this security hole closed.
Most, if not all, Linux distribution have patches for this
vulnerability available, see http://www.linuxsecurity.com/advisories/ ,
but the most recommendable way is to upgrade to at least Perl 5.6.1.
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Copyright (c) 1997, 1998, 1999, 2000, 2001 Tom Christiansen and Nathan
Torkington.  All rights reserved.
.PP
This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
Irrespective of its distribution, all code examples here are in the public
domain.  You are permitted and encouraged to use this code and any
derivatives thereof in your own programs for fun or for profit as you
see fit.  A simple comment in the code giving credit to the \s-1FAQ\s0 would
be courteous but is not required.
