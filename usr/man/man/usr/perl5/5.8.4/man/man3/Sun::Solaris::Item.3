.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` 
.    ds C' 
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SUN::SOLARIS::ITEM 1"
.TH SUN::SOLARIS::ITEM 1 "2004-06-14" "perl v5.8.4" "Perl Programmers Reference Guide"
.SH "NAME"
Sun::Solaris::Exacct::Object::Item \- exacct item manipulation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Sun::Solaris::Exacct::Object;
\& my $ea_item = Sun::Solaris::Exacct::Object::Item->new(
\&     &EXT_UINT64 | &EXC_DEFAULT | &EXD_PROC_PID, $$);
.Ve
.PP
This module is used for manipulating \f(CW\*(C`libexacct(3LIB)\*(C'\fR data Items. A
libexacct Item is represented as an opaque reference blessed into the
\&\f(CW\*(C`Sun::Solaris::Exacct::Object::Item\*(C'\fR class, which is a subclass of the
\&\f(CW\*(C`Sun::Solaris::Exacct::Object\*(C'\fR class. The underlying libexacct data types are
mapped onto Perl types as follows:
.PP
\&\fB\f(CB\*(C` libexacct type                Perl internal type\*(C'\fB\fR
.PP
.Vb 1
\& EXT_UINT8                     IV (integer)
.Ve
.PP
.Vb 1
\& EXT_UINT16                    IV (integer)
.Ve
.PP
.Vb 1
\& EXT_UINT32                    IV (integer)
.Ve
.PP
.Vb 1
\& EXT_UINT64                    IV (integer)
.Ve
.PP
.Vb 1
\& EXT_DOUBLE                    NV (double)
.Ve
.PP
.Vb 1
\& EXT_STRING                    PV (string)
.Ve
.PP
.Vb 1
\& EXT_RAW                       PV (string)
.Ve
.PP
.Vb 1
\& EXT_EXACCT_OBJECT             Sun::Solaris::Exacct::Object subclass
.Ve
.Sh "Constants"
.IX Subsection "Constants"
None.
.Sh "Functions"
.IX Subsection "Functions"
None.
.Sh "Class methods"
.IX Subsection "Class methods"
Class methods include those inherited from the \f(CW\*(C`Sun::Solaris::Exacct::Object\*(C'\fR
base class, plus the following:
.PP
\&\fB\f(CB\*(C`new($catalog, $value)\*(C'\fB\fR
.PP
This method creates and returns a new \f(CW\*(C`Sun::Solaris::Exacct::Object::Item\*(C'\fR.
The catalog tag can be either an integer or a
\&\f(CW\*(C`Sun::Solaris::Exacct::Catalog\*(C'\fR. This catalog tag controls the conversion of
the Perl value to the corresponding Perl exacct data type as described in the
table above. If the catalog tag has a type field of \f(CW\*(C`EXT_EXACCT_OBJECT\*(C'\fR, the
value must be a reference to either an Item or a Group object and the passed
object is recursively copied and stored inside the new Item. Because the
returned Item is constant, it is impossible, for example, to create an Item
representing \s-1CPU\s0 seconds and subsequently modify its value or change its
catalog value. This behavior is intended to prevent mismatches between the
catalog tag and the data value.
.Sh "Object methods"
.IX Subsection "Object methods"
Object methods are those inherited from the \f(CW\*(C`Sun::Solaris::Exacct::Object\*(C'\fR.
.Sh "Exports"
.IX Subsection "Exports"
None.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
See \f(CWattributes(5)\fR for descriptions of the following attributes:
.PP
.Vb 7
\&  ___________________________________________________________
\& |       ATTRIBUTE TYPE        |       ATTRIBUTE VALUE       |
\& |_____________________________|_____________________________|
\& | Availability                | CPAN (http://www.cpan.org)  |
\& |_____________________________|_____________________________|
\& | Interface Stability         | Evolving                    |
\& |_____________________________|_____________________________|
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CWSun::Solaris::Exacct(3)\fR, \f(CWSun::Solaris::Exacct::Catalog(3)\fR,
\&\f(CWSun::Solaris::Exacct::File(3)\fR, \f(CWSun::Solaris::Exacct::Object(3)\fR,
\&\f(CWSun::Solaris::Exacct::Object::Group(3)\fR, \f(CW\*(C`libexacct(3LIB)\*(C'\fR, \f(CWattributes(5)\fR
