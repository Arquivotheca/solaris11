.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` 
.    ds C' 
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SUN::SOLARIS::UCRED 1"
.TH SUN::SOLARIS::UCRED 1 "2004-06-14" "perl v5.8.4" "Perl Programmers Reference Guide"
.SH "NAME"
Sun::Solaris::Ucred \- Perl interface to User Credentials
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Sun::Solaris::Ucred qw(:ALL);
.Ve
.PP
This module provides wrappers for the Ucred-related system and
library calls.
.Sh "Functions"
.IX Subsection "Functions"
\&\fB\f(CB\*(C`ucred_get($pid)\*(C'\fB\fR
.PP
This function returns the credential of the process specified by \f(CW$pid\fR,
if the process exists and the calling process is permitted to obtain
the credentials of that process.
.PP
\&\fB\f(CB\*(C`getpeerucred($fd)\*(C'\fB\fR
.PP
If \f(CW$fd\fR is a connected connection oriented \s-1TLI\s0 endpoint, a connected
\&\s-1SOCK_STREAM\s0 or \s-1SOCK_SEQPKT\s0 socket, getpeerucred will return the user
credential of the peer at the time the connection was established,
if availble.
.PP
\&\fB\f(CB\*(C`ucred_geteuid($ucred)\*(C'\fB\fR
.PP
This function returns the effective uid of a user credential, if available.
.PP
\&\fB\f(CB\*(C`ucred_getruid($ucred)\*(C'\fB\fR
.PP
This function returns the real uid of a user credential, if available.
.PP
\&\fB\f(CB\*(C`ucred_getsuid($ucred)\*(C'\fB\fR
.PP
This function returns the saved uid of a user credential, if available.
.PP
\&\fB\f(CB\*(C`ucred_getegid($ucred)\*(C'\fB\fR
.PP
This function returns the effective group of a user credential, if available.
.PP
\&\fB\f(CB\*(C`ucred_getrgid($ucred)\*(C'\fB\fR
.PP
This function returns the real group of a user credential, if available.
.PP
\&\fB\f(CB\*(C`ucred_getsgid($ucred)\*(C'\fB\fR
.PP
This function returns the saved group of a user credential, if available.
.PP
\&\fB\f(CB\*(C`ucred_getgroups($ucred)\*(C'\fB\fR
.PP
This function returns the list of supplemental groups of a user
credential, if available.  An array of groups is returned in \s-1ARRAY\s0
context; the number of groups is returned in \s-1SCALAR\s0 context.
.PP
\&\fB\f(CB\*(C`ucred_getprivset($ucred, $which)\*(C'\fB\fR
.PP
This function returns the privilege set specified by \f(CW$which\fR of a user
credential, if available.
.PP
\&\fB\f(CB\*(C`ucred_getpflags($ucred, $flags)\*(C'\fB\fR
.PP
This function returns the value of a specific process flag of a user
credential, if available.
.PP
\&\fB\f(CB\*(C`ucred_getpid($ucred)\*(C'\fB\fR
.PP
This function returns the process id of a user credential, if available.
.PP
\&\fB\f(CB\*(C`ucred_getzoneid($ucred)\*(C'\fB\fR
.PP
This function returns the zone id of a user credential, if available.
.Sh "Class methods"
.IX Subsection "Class methods"
None.
.Sh "Object methods"
.IX Subsection "Object methods"
None.
.Sh "Exports"
.IX Subsection "Exports"
By default nothing is exported from this module. The following tags can be
used to selectively import constants and functions defined in this module:
.PP
.Vb 1
\& :SYSCALLS    ucred_get(), getpeerucred()
.Ve
.PP
.Vb 4
\& :LIBCALLS    ucred_geteuid(), ucred_getruid(), ucred_getsuid(),
\&              ucred_getegid(), ucred_getrgid(), ucred_getsgid(),
\&              ucred_getgroups(), ucred_getprivset(), ucred_getpflags(),
\&              ucred_getpid(), ucred_getzone()
.Ve
.PP
.Vb 1
\& :CONSTANTS
.Ve
.PP
.Vb 1
\& :VARIABLES   %PRIVILEGES, %PRIVSETS
.Ve
.PP
.Vb 1
\& :ALL         :SYSCALLS, :LIBCALLS, and :CONSTANTS
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
See \f(CWattributes(5)\fR for descriptions of the following attributes:
.PP
.Vb 7
\&  ___________________________________________________________
\& |       ATTRIBUTE TYPE        |       ATTRIBUTE VALUE       |
\& |_____________________________|_____________________________|
\& | Availability                | CPAN (http://www.cpan.org)  |
\& |_____________________________|_____________________________|
\& | Interface Stability         | Evolving                    |
\& |_____________________________|_____________________________|
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CWgetpeerucred(2)\fR, \f(CW\*(C`ucred_get(3C)\*(C'\fR, \f(CWattributes(5)\fR
