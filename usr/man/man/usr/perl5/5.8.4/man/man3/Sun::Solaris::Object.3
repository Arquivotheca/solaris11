.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` 
.    ds C' 
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SUN::SOLARIS::OBJECT 1"
.TH SUN::SOLARIS::OBJECT 1 "2004-06-14" "perl v5.8.4" "Perl Programmers Reference Guide"
.SH "NAME"
Sun::Solaris::Exacct::Object \- exacct object manipulation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Sun::Solaris::Exacct::Object qw(:ALL);
\& print($ea_obj->value(), "\en");
.Ve
.PP
This module is used as a parent of the two possible types of Perl exacct
objects: Items and Groups. An Item is either a single data value such as the
number of seconds of user \s-1CPU\s0 time consumed by a process, an embedded Perl
exacct object, or a block of raw data. A Group is an ordered collection of
Perl exacct Items such as all of the resource usage values for a particular
process or task. If Groups need to be nested within each other, the inner
Groups can be stored as embedded Perl exacct objects inside the enclosing
Group.
.PP
This module contains methods that are common to both Perl exacct Items and
Groups. The attributes of \f(CW\*(C`Sun::Solaris::Exacct::Object\*(C'\fR and all classes
derived from it are read-only after initial creation with \fInew()\fR. This behavior
prevents the inadvertent modification of the attributes that could produce
inconsistent catalog tags and data values. The only exception is the array
used to store the Items inside a Group object, which can be modified using the
normal Perl array operators. See the \f(CW\*(C`value()\*(C'\fR method below.
.Sh "Constants"
.IX Subsection "Constants"
\&\f(CW\*(C`EO_ERROR\*(C'\fR, \f(CW\*(C`EO_NONE\*(C'\fR, \f(CW\*(C`EO_ITEM\*(C'\fR, and \f(CW\*(C`EO_GROUP\*(C'\fR.
.Sh "Functions"
.IX Subsection "Functions"
None.
.Sh "Class methods"
.IX Subsection "Class methods"
\&\fB\f(CB\*(C`dump($object, $filehandle)\*(C'\fB\fR
.PP
This method dumps formatted text representation of a Perl exacct object to the
supplied file handle. If no file handle is specified, the text representation
is dumped to \f(CW\*(C`STDOUT\*(C'\fR. See \s-1EXAMPLES\s0 below for sample output.
.Sh "Object methods"
.IX Subsection "Object methods"
\&\fB\f(CB\*(C`type()\*(C'\fB\fR
.PP
This method returns the type field of the Perl exacct object. The value of the
type field is returned as a dual-typed scalar and is either \f(CW\*(C`EO_ITEM\*(C'\fR,
\&\f(CW\*(C`EO_GROUP\*(C'\fR, or \f(CW\*(C`EO_NONE\*(C'\fR.
.PP
\&\fB\f(CB\*(C`catalog()\*(C'\fB\fR
.PP
This method returns the catalog field of the Perl exacct object. The value is
returned as a \f(CW\*(C`Sun::Solaris::Exacct::Catalog\*(C'\fR object.
.PP
\&\fB\f(CB\*(C`match_catalog($catalog)\*(C'\fB\fR
.PP
This method matches the passed catalog tag against the object. \f(CW\*(C`true\*(C'\fR is
returned of a match occurs. Otherwise \f(CW\*(C`false\*(C'\fR is returned. This method has
the same behavior as the underlying \f(CW\*(C`ea_match_object_catalog(3EXACCT)\*(C'\fR
function.
.PP
\&\fB\f(CB\*(C`value()\*(C'\fB\fR
.PP
This method returns the value of the Perl exacct object. In the case of an
Item, this object will normally be a Perl scalar, either a number or string.
For raw Items, the buffer contained inside the object is returned as a Perl
string that can be manipulated with the Perl \f(CW\*(C`unpack()\*(C'\fR function. If the Item
contains either a nested Item or a nested Group, the enclosed Item is returned
as a reference to an object of the appropriate subtype of the
\&\f(CW\*(C`Sun::Solaris::Exacct::Object\*(C'\fR class.
.PP
For Group objects, if \f(CW\*(C`value()\*(C'\fR is called in a scalar context, the return
value is a reference to the underlying array used to store the component Items
of the Group. Since this array can be manipulated with the normal Perl array
indexing syntax and array operators, the objects inside the Group can be
manipulated. All objects in the array must be derived from the
\&\f(CW\*(C`Sun::Solaris::Exacct::Object\*(C'\fR class. Any attempt to insert something else
into the array will generate a fatal runtime error that can be caught with an
\&\f(CW\*(C`eval { }\*(C'\fR block.
.PP
If \f(CW\*(C`value()\*(C'\fR is called in a list context for a Group object, it returns a
list of all the objects in the Group. Unlike the array reference returned in a
scalar context, this list cannot be manipulated to add or delete Items from a
Group. This mechanism is considerably faster than the array mechanism
described above and is the preferred mechanism if a Group is being examined in
a read-only manner.
.Sh "Exports"
.IX Subsection "Exports"
By default nothing is exported from this module. The following tags can be
used to selectively import constants and functions defined in this module:
.PP
.Vb 1
\& :CONSTANTS   EO_ERROR, EO_NONE, EO_ITEM, and EO_GROUP
.Ve
.PP
.Vb 1
\& :ALL         :CONSTANTS
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
The following is an example of output of the \f(CW\*(C`dump()\*(C'\fR method for a Perl exacct
Group object.
.PP
.Vb 21
\& GROUP
\&   Catalog = EXT_GROUP|EXC_DEFAULT|EXD_GROUP_PROC_PARTIAL
\&   ITEM
\&     Catalog = EXT_UINT32|EXC_DEFAULT|EXD_PROC_PID
\&     Value = 3
\&    ITEM
\&      Catalog = EXT_UINT32|EXC_DEFAULT|EXD_PROC_UID
\&      Value = 0
\&    ITEM
\&      Catalog = EXT_UINT32|EXC_DEFAULT|EXD_PROC_GID
\&      Value = 0
\&    ITEM
\&      Catalog = EXT_UINT32|EXC_DEFAULT|EXD_PROC_PROJID
\&      Value = 0
\&    ITEM
\&      Catalog = EXT_UINT32|EXC_DEFAULT|EXD_PROC_TASKID
\&      Value = 0
\&    ITEM
\&      Catalog = EXT_STRING|EXC_DEFAULT|EXD_PROC_COMMAND
\&      Value = fsflush
\& ENDGROUP
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
See \f(CWattributes(5)\fR for descriptions of the following attributes:
.PP
.Vb 7
\&  ___________________________________________________________
\& |       ATTRIBUTE TYPE        |       ATTRIBUTE VALUE       |
\& |_____________________________|_____________________________|
\& | Availability                | CPAN (http://www.cpan.org)  |
\& |_____________________________|_____________________________|
\& | Interface Stability         | Evolving                    |
\& |_____________________________|_____________________________|
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CW\*(C`ea_match_object_catalog(3EXACCT)\*(C'\fR, \f(CWSun::Solaris::Exacct(3)\fR,
\&\f(CWSun::Solaris::Exacct::Catalog(3)\fR, \f(CWSun::Solaris::Exacct::File(3)\fR,
\&\f(CWSun::Solaris::Exacct::Object::Group(3)\fR,
\&\f(CWSun::Solaris::Exacct::Object::Item(3)\fR, \f(CW\*(C`libexacct(3LIB)\*(C'\fR, \f(CWattributes(5)\fR
