.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` 
.    ds C' 
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SUN::SOLARIS::PRIVILEGE 1"
.TH SUN::SOLARIS::PRIVILEGE 1 "2004-06-14" "perl v5.8.4" "Perl Programmers Reference Guide"
.SH "NAME"
Sun::Solaris::Privilege \- Perl interface to Privileges
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Sun::Solaris::Privilege qw(:ALL);
.Ve
.PP
This module provides wrappers for the Privilege-related system and
library calls. Also provided are constants from the various
Privilege-related headers and dynamically generated constants for all
the privileges and privilege sets.
.Sh "Functions"
.IX Subsection "Functions"
\&\fB\f(CB\*(C`getppriv($which)\*(C'\fB\fR
.PP
This function returns the process privilege set specified by \f(CW$which\fR.
.PP
\&\fB\f(CB\*(C`setppriv($op, $which, $set)\*(C'\fB\fR
.PP
This function modified the privilege set specified by \f(CW$which\fR in the
as specified by the \f(CW$op\fR and \f(CW$set\fR arguments.  If \f(CW$op\fR is \s-1PRIV_ON\s0 the
privileges in \f(CW$set\fR are added to the set specified; if \f(CW$op\fR is \s-1PRIV_OFF\s0,
the privileges in \f(CW$set\fR are removed from the set specified; if \f(CW$op\fR
is \s-1PRIV_SET\s0, the specified set is made equal to \f(CW$set\fR.
.PP
\&\fB\f(CB\*(C`getpflags($flag)\*(C'\fB\fR
.PP
Returns the value associated with process \f(CW$flag\fR or undef on error.
Possible values for \f(CW$flag\fR are \s-1PRIV_AWARE\s0 and \s-1PRIV_DEBUG\s0.
.PP
\&\fB\f(CB\*(C`setppflags($flag, $val)\*(C'\fB\fR
.PP
Sets the process flag \f(CW$flag\fR to \f(CW$val\fR.
.PP
\&\fB\f(CB\*(C`priv_fillset()\*(C'\fB\fR
.PP
This returns a new privilege set with all privileges set.
.PP
\&\fB\f(CB\*(C`priv_emptyset()\*(C'\fB\fR
.PP
This returns a new empty privilege set.
.PP
\&\fB\f(CB\*(C`priv_isemptyset($set)\*(C'\fB\fR
.PP
This function returns whether \f(CW$set\fR is empty or not.
.PP
\&\fB\f(CB\*(C`priv_isfullset($set)\*(C'\fB\fR
.PP
This function returns whether \f(CW$set\fR is full or not.
.PP
\&\fB\f(CB\*(C`priv_isequalset($a, $b)\*(C'\fB\fR
.PP
This function returns whether sets \f(CW$a\fR and \f(CW$b\fR are equal.
.PP
\&\fB\f(CB\*(C`priv_issubset($a, $b)\*(C'\fB\fR
.PP
This function returns whether set \f(CW$a\fR is a subset of \f(CW$b\fR.
.PP
\&\fB\f(CB\*(C`priv_ismember($set, $priv)\*(C'\fB\fR
.PP
This function returns whether \f(CW$priv\fR is a member of \f(CW$set\fR.
.PP
\&\fB\f(CB\*(C`priv_ineffect($priv)\*(C'\fB\fR
.PP
This function returned whether \f(CW$priv\fR is in the process' effective set.
.PP
\&\fB\f(CB\*(C`priv_intersect($a, $b)\*(C'\fB\fR
.PP
This function returns a new privilege set which is the intersection of \f(CW$a\fR
and \f(CW$b\fR
.PP
\&\fB\f(CB\*(C`priv_union($a, $b)\*(C'\fB\fR
.PP
This function returns a new privilege set which is the union of \f(CW$a\fR
and \f(CW$b\fR
.PP
\&\fB\f(CB\*(C`priv_inverse($a)\*(C'\fB\fR
.PP
This function returns a new privilege set which is the inverse of \f(CW$a\fR.
.PP
\&\fB\f(CB\*(C`priv_addset($set, $priv)\*(C'\fB\fR
.PP
This functon adds the privilege \f(CW$priv\fR to \f(CW$set\fR.
.PP
\&\fB\f(CB\*(C`priv_copyset($a)\*(C'\fB\fR
.PP
This function returns a copy of the privilege set \f(CW$a\fR.
.PP
\&\fB\f(CB\*(C`priv_delset($set, $priv)\*(C'\fB\fR
.PP
This function remove the privilege \f(CW$priv\fR from \f(CW$set\fR.
.Sh "Class methods"
.IX Subsection "Class methods"
None.
.Sh "Object methods"
.IX Subsection "Object methods"
None.
.Sh "Exports"
.IX Subsection "Exports"
By default nothing is exported from this module. The following tags can be
used to selectively import constants and functions defined in this module:
.PP
.Vb 1
\& :SYSCALLS    getppriv(), setppriv()
.Ve
.PP
.Vb 6
\& :LIBCALLS    priv_addset(), priv_copyset(), priv_delset(),
\&              priv_emptyset(), priv_fillset(), priv_intersect(),
\&              priv_inverse(), priv_isemptyset(), priv_isequalset(),
\&              priv_isfullset(), priv_ismember(), priv_issubset(),
\&              priv_gettext(), priv_union(), priv_set_to_str(),
\&              priv_str_to_set()
.Ve
.PP
.Vb 3
\& :CONSTANTS   PRIV_STR_SHORT PRIV_STR_LIT PRIV_STR_PORT PRIV_ON PRIV_OFF
\&              PRIV_SET PRIV_ALLSETS PRIV_AWARE PRIV_DEBUG
\&              plus constant for all privileges and privilege sets.
.Ve
.PP
.Vb 1
\& :VARIABLES   %PRIVILEGES, %PRIVSETS
.Ve
.PP
.Vb 1
\& :ALL         :SYSCALLS, :LIBCALLS, :CONSTANTS and :VARIABLES
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
See \f(CWattributes(5)\fR for descriptions of the following attributes:
.PP
.Vb 7
\&  ___________________________________________________________
\& |       ATTRIBUTE TYPE        |       ATTRIBUTE VALUE       |
\& |_____________________________|_____________________________|
\& | Availability                | CPAN (http://www.cpan.org)  |
\& |_____________________________|_____________________________|
\& | Interface Stability         | Evolving                    |
\& |_____________________________|_____________________________|
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CWgetpflags(2)\fR, \f(CWgetppriv(2)\fR, \f(CW\*(C`priv_addset(3C)\*(C'\fR, \f(CW\*(C`priv_str_to_set(3C)\*(C'\fR,
\&\f(CW\*(C`priv_set(3C)\*(C'\fR, \f(CWprivileges(5)\fR, \f(CWattributes(5)\fR
