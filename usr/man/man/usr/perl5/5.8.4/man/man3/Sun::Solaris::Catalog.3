.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` 
.    ds C' 
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SUN::SOLARIS::CATALOG 1"
.TH SUN::SOLARIS::CATALOG 1 "2004-06-14" "perl v5.8.4" "Perl Programmers Reference Guide"
.SH "NAME"
Sun::Solaris::Exacct::Catalog \- exacct catalog tag manipulation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Sun::Solaris::Exacct::Catalog qw(:ALL);
\& my $ea_cat = Sun::Solaris::Exacct::Catalog->new(
\&     &EXT_UINT64 | &EXC_DEFAULT | &EXD_PROC_PID);
.Ve
.PP
This class provides a wrapper around the 32\-bit integer used as a catalog tag.
The catalog tag is represented as a Perl object blessed into the
\&\f(CW\*(C`Sun::Solaris::Exacct::Catalog\*(C'\fR class so that methods can be used to manipulate
fields in a catalog tag.
.Sh "Constants"
.IX Subsection "Constants"
All the \f(CW\*(C`EXT_*\*(C'\fR, \f(CW\*(C`EXC_*\*(C'\fR, and \f(CW\*(C`EXD_*\*(C'\fR macros are provided as constants.
Constants passed to the methods below can either be the integer value such as
\&\f(CW\*(C`EXT_UINT8\*(C'\fR or the string representation such as \f(CW"EXT_UINT8"\fR.
.Sh "Functions"
.IX Subsection "Functions"
None.
.Sh "Class methods"
.IX Subsection "Class methods"
\&\fB\f(CB\*(C`register($cat_pfx, $catalog_id, $export, @idlist)\*(C'\fB\fR
.PP
This method is used to register application-defined \f(CW\*(C`libexacct(3LIB)\*(C'\fR
catalogs with the exacct Perl library. See
\&\fI/usr/include/sys/exacct_catalog.h\fR for details of the catalog tag format.
This method allows symbolic names and strings to be used for manipulating
application-defined catalogs. The first two parameters define the catalog
prefix and associated numeric catalog \s-1ID\s0. If the \f(CW$export\fR parameter is true,
the constants are exported into the caller's package. The final parameter is a
list of \f(CW\*(C`(id, name)\*(C'\fR pairs that identify the required constants. The
constants created by this method are formed by appending \f(CW$cat_pfx\fR and
\&\f(CW"_"\fR to each name in the list, replacing any spaces with underscore
characters and converting the resulting string to uppercase characters. The
\&\f(CW$catalog_name\fR value is also created as a constant by prefixing it with
\&\f(CW\*(C`EXC_\*(C'\fR and converting it to uppercase characters. Its value becomes that of
\&\f(CW$catalog_id\fR shifted left by 24 bits. For example, the following call:
.PP
.Vb 2
\& Sun::Solaris::Exacct::Catalog->ea_register("MYCAT", 0x01, 1,
\&     FIRST => 0x00000001, SECOND => 0x00000010);
.Ve
.PP
results in the definition of the following constants:
.PP
.Vb 3
\& EXC_MYCAT    0x01 << 24
\& MYCAT_FIRST  0x00000001
\& MYCAT_SECOND 0x00000010
.Ve
.PP
Only the catalog \s-1ID\s0 value of 0x01 is available for application use
\&\f(CW\*(C`(EXC_LOCAL)\*(C'\fR. All other values are reserved. While it is possible to use
values other than 0x01, they might conflict with future extensions to the
libexacct file format.
.PP
If any errors are detected during this method, a string is returned containing
the appropriate error message. If the call is sucessful, \f(CW\*(C`undef\*(C'\fR is returned.
.PP
\&\fB\f(CB\*(C`new($integer)\*(C'\fB\fR
.PP
\&\fB\f(CB\*(C`new($cat_obj)\*(C'\fB\fR
.PP
\&\fB\f(CB\*(C`new($type, $catalog, $id)\*(C'\fB\fR
.PP
This method creates and returns a new Catalog object, which is a wrapper
around a 32\-bit integer catalog tag. Three possible argument lists can be
given. The first variant is to pass an integer formed by bitwise-inclusive \s-1OR\s0
of the appropriate \f(CW\*(C`EX[TCD]_*\*(C'\fR constants. The second variant is to pass an
existing Catalog object that will be copied. The final variant is to pass in
the type, catalog and \s-1ID\s0 fields as separate values. Each of these values can
be either an appropriate integer constant or the string representation of the
constant.
.Sh "Object methods"
.IX Subsection "Object methods"
\&\fB\f(CB\*(C`value()\*(C'\fB\fR
.PP
This method allows the value of the catalog tag to be queried. In a scalar
context it returns the 32\-bit integer representing the tag. In a list context
it returns a \f(CW\*(C`(type, catalog, id)\*(C'\fR triplet, where each member of the triplet
is a dual-typed scalar.
.PP
\&\fB\f(CB\*(C`type()\*(C'\fB\fR
.PP
This method returns the type field of the catalog tag as a dual-typed scalar.
.PP
\&\fB\f(CB\*(C`catalog()\*(C'\fB\fR
.PP
This method returns the catalog field of the catalog tag as a dual-typed
scalar.
.PP
\&\fB\f(CB\*(C`id()\*(C'\fB\fR
.PP
This method returns the id field of the catalog tag as a dual-typed scalar.
.PP
\&\fB\f(CB\*(C`type_str()\*(C'\fB\fR
.PP
\&\fB\f(CB\*(C`catalog_str()\*(C'\fB\fR
.PP
\&\fB\f(CB\*(C`id_str()\*(C'\fB\fR
.PP
These methods return string representations of the appropriate value. These
methods can be used for textual output of the various catalog fields. The
string representations of the constants are formed by removing the \f(CW\*(C`EXT_\*(C'\fR,
\&\f(CW\*(C`EXC_\*(C'\fR, or \f(CW\*(C`EXD_\*(C'\fR prefix, replacing any underscore characters with spaces,
and converting the remaining string to lowercase characters.
.Sh "Exports"
.IX Subsection "Exports"
By default nothing is exported from this module. The following tags can be
used to selectively import constants and functions defined in this module:
.PP
.Vb 1
\& :CONSTANTS   EXT_*, EXC_*, and EXD_*
.Ve
.PP
.Vb 1
\& :ALL         :CONSTANTS
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
See \f(CWattributes(5)\fR for descriptions of the following attributes:
.PP
.Vb 7
\&  ___________________________________________________________
\& |       ATTRIBUTE TYPE        |       ATTRIBUTE VALUE       |
\& |_____________________________|_____________________________|
\& | Availability                | CPAN (http://www.cpan.org)  |
\& |_____________________________|_____________________________|
\& | Interface Stability         | Evolving                    |
\& |_____________________________|_____________________________|
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CWSun::Solaris::Exacct(3)\fR, \f(CWSun::Solaris::Exacct::File(3)\fR,
\&\f(CWSun::Solaris::Exacct::Object(3)\fR, \f(CWSun::Solaris::Exacct::Object::Group(3)\fR,
\&\f(CWSun::Solaris::Exacct::Object::Item(3)\fR, \f(CW\*(C`libexacct(3LIB)\*(C'\fR, \f(CWattributes(5)\fR
