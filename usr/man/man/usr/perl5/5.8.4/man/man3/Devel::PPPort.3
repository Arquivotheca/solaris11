.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Devel::PPPort 3"
.TH Devel::PPPort 3 "2001-09-21" "perl v5.8.4" "Perl Programmers Reference Guide"
.SH "NAME"
Devel::PPPort \- Perl/Pollution/Portability
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    Devel::PPPort::WriteFile() ; # defaults to ./ppport.h
\&    Devel::PPPort::WriteFile('someheader.h') ;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl has changed over time, gaining new features, new functions,
increasing its flexibility, and reducing the impact on the C namespace
environment (reduced pollution). The header file, typicaly \f(CW\*(C`ppport.h\*(C'\fR,
written by this module attempts to bring some of the newer Perl
features to older versions of Perl, so that you can worry less about
keeping track of old releases, but users can still reap the benefit.
.PP
Why you should use \f(CW\*(C`ppport.h\*(C'\fR in modern code: so that your code will work
with the widest range of Perl interpreters possible, without significant
additional work.
.PP
Why you should attempt older code to fully use \f(CW\*(C`ppport.h\*(C'\fR: because
the reduced pollution of newer Perl versions is an important thing, so
important that the old polluting ways of original Perl modules will not be
supported very far into the future, and your module will almost certainly
break! By adapting to it now, you'll gained compatibility and a sense of
having done the electronic ecology some good.
.PP
How to use ppport.h: Don't direct the user to download \f(CW\*(C`Devel::PPPort\*(C'\fR,
and don't make \f(CW\*(C`ppport.h\*(C'\fR optional. Rather, just take the most recent
copy of \f(CW\*(C`ppport.h\*(C'\fR that you can find (probably in \f(CW\*(C`Devel::PPPort\*(C'\fR
on \s-1CPAN\s0), copy it into your project, adjust your project to use it,
and distribute the header along with your module.
.PP
\&\f(CW\*(C`Devel::PPPort\*(C'\fR contains a single function, called \f(CW\*(C`WriteFile\*(C'\fR. It's
purpose is to write a 'C' header file that is used when writing \s-1XS\s0
modules. The file contains a series of macros that allow \s-1XS\s0 modules to
be built using older versions of Perl.
.PP
This module is used by h2xs to write the file \fIppport.h\fR. 
.Sh "WriteFile"
.IX Subsection "WriteFile"
\&\f(CW\*(C`WriteFile\*(C'\fR takes a zero or one parameters. When called with one
parameter it expects to be passed a filename. When called with no
parameters, it defults to the filename \f(CW\*(C`./pport.h\*(C'\fR.
.PP
The function returns \s-1TRUE\s0 if the file was written successfully. Otherwise
it returns \s-1FALSE\s0.
.SH "ppport.h"
.IX Header "ppport.h"
The file written by this module, typically \f(CW\*(C`ppport.h\*(C'\fR, provides access
to the following Perl \s-1API\s0 if not already available (and in some cases [*]
even if available, access to a fixed interface):
.PP
.Vb 82
\&    aMY_CXT
\&    aMY_CXT_
\&    _aMY_CXT
\&    aTHX
\&    aTHX_
\&    AvFILLp
\&    boolSV(b)
\&    call_argv
\&    call_method
\&    call_pv
\&    call_sv
\&    dAX
\&    DEFSV
\&    dITEMS
\&    dMY_CXT     
\&    dMY_CXT_SV
\&    dNOOP
\&    dTHR
\&    dTHX
\&    dTHXa
\&    dTHXoa
\&    ERRSV
\&    get_av
\&    get_cv
\&    get_hv
\&    get_sv
\&    grok_hex
\&    grok_oct
\&    grok_bin
\&    grok_number
\&    grok_numeric_radix
\&    gv_stashpvn(str,len,flags)
\&    INT2PTR(type,int)
\&    IVdf
\&    MY_CXT
\&    MY_CXT_INIT
\&    newCONSTSUB(stash,name,sv)
\&    newRV_inc(sv)
\&    newRV_noinc(sv)
\&    newSVpvn(data,len)
\&    NOOP
\&    NV 
\&    NVef
\&    NVff
\&    NVgf
\&    PERL_REVISION
\&    PERL_SUBVERSION
\&    PERL_UNUSED_DECL
\&    PERL_VERSION
\&    PL_compiling
\&    PL_copline
\&    PL_curcop
\&    PL_curstash
\&    PL_defgv
\&    PL_dirty
\&    PL_hints
\&    PL_na
\&    PL_perldb
\&    PL_rsfp_filters
\&    PL_rsfpv
\&    PL_stdingv
\&    PL_Sv
\&    PL_sv_no
\&    PL_sv_undef
\&    PL_sv_yes
\&    pMY_CXT
\&    pMY_CXT_
\&    _pMY_CXT
\&    pTHX
\&    pTHX_
\&    PTR2IV(ptr)
\&    PTR2NV(ptr)
\&    PTR2ul(ptr)
\&    PTR2UV(ptr)
\&    SAVE_DEFSV
\&    START_MY_CXT
\&    SvPVbyte(sv,lp) [*]
\&    UVof
\&    UVSIZE
\&    UVuf
\&    UVxf
\&    UVXf
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Version 1.x of Devel::PPPort was written by Kenneth Albanowski.
.PP
Version 2.x was ported to the Perl core by Paul Marquess.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See h2xs.
