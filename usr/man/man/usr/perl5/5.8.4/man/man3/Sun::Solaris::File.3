.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` 
.    ds C' 
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SUN::SOLARIS::FILE 1"
.TH SUN::SOLARIS::FILE 1 "2004-06-14" "perl v5.8.4" "Perl Programmers Reference Guide"
.SH "NAME"
Sun::Solaris::Exacct::File \- exacct file manipulation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Sun::Solaris::Exacct::File qw(:ALL);
\& my $ea_file = Sun::Solaris::Exacct::File->new($myfile, &O_RDONLY);
\& my $ea_obj = $ea_file->get();
.Ve
.PP
This module provides access to the \f(CW\*(C`libexacct(3LIB)\*(C'\fR functions that
manipulate accounting files. The interface is object-oriented and allows the
creation and reading of libexacct files. The C library calls wrapped by this
module are \f(CW\*(C`ea_open(3EAXACCT)\*(C'\fR, \f(CW\*(C`ea_close(3EAXACCT)\*(C'\fR,
\&\f(CW\*(C`ea_next_object(3EAXACCT)\*(C'\fR, \f(CW\*(C`ea_previous_object(3EAXACCT)\*(C'\fR,
\&\f(CW\*(C`ea_write_object(3EAXACCT)\*(C'\fR, \f(CW\*(C`ea_get_object(3EAXACCT)\*(C'\fR,
\&\f(CW\*(C`ea_get_creator(3EAXACCT)\*(C'\fR, and \f(CW\*(C`ea_get_hostname(3EAXACCT)\*(C'\fR. The file read
and write methods all operate on \f(CW\*(C`Sun::Solaris::Exacct::Object\*(C'\fR objects and
perform all the necessary memory management, packing, unpacking, and structure
conversions that are required.
.Sh "Constants"
.IX Subsection "Constants"
\&\f(CW\*(C`EO_HEAD\*(C'\fR, \f(CW\*(C`EO_TAIL\*(C'\fR, \f(CW\*(C`EO_NO_VALID_HDR\*(C'\fR, \f(CW\*(C`EO_POSN_MSK\*(C'\fR, and
\&\f(CW\*(C`EO_VALIDATE_MSK\*(C'\fR. Other constants needed by the \f(CW\*(C`new()\*(C'\fR method below are in
the standard Perl \f(CW\*(C`Fcntl\*(C'\fR module.
.Sh "Functions"
.IX Subsection "Functions"
None.
.Sh "Class methods"
.IX Subsection "Class methods"
\&\fB\f(CB\*(C`new($name, $oflags, creator => $creator,
    aflags => $aflags, mode => $mode)\*(C'\fB\fR
.PP
This method opens a libexacct file as specified by the mandatory parameters
\&\f(CW$name\fR and \f(CW$oflags\fR, and returns a \f(CW\*(C`Sun::Solaris::Exacct::File\*(C'\fR object,
or \f(CW\*(C`undef\*(C'\fR if an error occurs. The parameters \f(CW$creator\fR, \f(CW$aflags\fR, and
\&\f(CW$mode\fR are optional and are passed as \f(CW\*(C`(name =\*(C'\fR value)> pairs. The only
valid values for \f(CW$oflags\fR are the combinations of \f(CW\*(C`O_RDONLY\*(C'\fR, \f(CW\*(C`O_WRONLY\*(C'\fR,
\&\f(CW\*(C`O_RDWR\*(C'\fR, and \f(CW\*(C`O_CREAT\*(C'\fR described below.
.PP
The \f(CW$creator\fR parameter is a string describing the creator of the file. If
it is required (for instance, when writing to a file) but absent, it is set to
the string representation of the caller's \s-1UID\s0. The \f(CW$aflags\fR parameter
describes the required positioning in the file for \f(CW\*(C`O_RDONLY\*(C'\fR access: either
\&\f(CW\*(C`EO_HEAD\*(C'\fR or \f(CW\*(C`EO_TAIL\*(C'\fR are allowed. If absent, \f(CW\*(C`EO_HEAD\*(C'\fR is assumed. The
\&\f(CW$mode\fR parameter is the file creation mode and is ignored unless \f(CW\*(C`O_CREAT\*(C'\fR
is specified in \f(CW$oflags\fR. If \f(CW$mode\fR is unspecified, the file creation mode
is set to \f(CW0666\fR (octal). If an error occurs, it can be retrieved with the
\&\f(CW\*(C`Sun::Solaris::Exacct::ea_error()\*(C'\fR function.
(See \f(CWSun::Solaris::Exacct(3)\fR).
.PP
\&\fB\f(CB\*(C` $oflags             $aflags               Action\*(C'\fB\fR
.PP
.Vb 3
\& O_RDONLY            Absent or EO_HEAD     Open for reading
\&                                           at the start  of
\&                                           the file.
.Ve
.PP
.Vb 3
\& O_RDONLY            EO_TAIL               Open for reading
\&                                           at the end of the
\&                                           file.
.Ve
.PP
.Vb 4
\& O_WRONLY            Ignored               File must exist,
\&                                           open for writing
\&                                           at the end of the
\&                                           file.
.Ve
.PP
.Vb 4
\& O_WRONLY | O_CREAT  Ignored               Create file if it
\&                                           does not exist,
\&                                           otherwise truncate
\&                                           and open for writing.
.Ve
.PP
.Vb 5
\& O_RDWR              Ignored               File must  exist,
\&                                           open for
\&                                           reading/writing,
\&                                           positioned at the
\&                                           end of the file.
.Ve
.PP
.Vb 5
\& O_RDWR | O_CREAT    Ignored               Create file if it
\&                                           does not exist,
\&                                           otherwise truncate
\&                                           and open for
\&                                           reading/writing.
.Ve
.Sh "Object methods"
.IX Subsection "Object methods"
\&\fBNote:\fR Closing a \f(CW\*(C`Sun::Solaris::Exacct::File\*(C'\fR
.PP
There is no explicit \f(CW\*(C`close()\*(C'\fR method for a \f(CW\*(C`Sun::Solaris::Exacct::File\*(C'\fR.
The file is closed when the file handle object is undefined or reassigned.
.PP
\&\fB\f(CB\*(C`creator()\*(C'\fB\fR
.PP
This method returns a string containing the creator of the file or \f(CW\*(C`undef\*(C'\fR if
the file does not contain the information.
.PP
\&\fB\f(CB\*(C`hostname()\*(C'\fB\fR
.PP
This method returns a string containing the hostname on which the file was
created, or \f(CW\*(C`undef\*(C'\fR if the file does not contain the information.
.PP
\&\fB\f(CB\*(C`next()\*(C'\fB\fR
.PP
This method reads the header information of the next record in the file. In a
scalar context the value of the type field is returned as a dual-typed scalar
that will be one of \f(CW\*(C`EO_ITEM\*(C'\fR, \f(CW\*(C`EO_GROUP\*(C'\fR, or \f(CW\*(C`EO_NONE\*(C'\fR. In a list context
it returns a two-element list containing the values of the type and catalog
fields. The type element is a dual-typed scalar. The catalog element is
blessed into the \f(CW\*(C`Sun::Solaris::Exacct::Catalog\*(C'\fR class. If an error occurs,
\&\f(CW\*(C`undef\*(C'\fR or \f(CW\*(C`(undef, undef)\*(C'\fR is returned depending upon context. The status
can be accessed with the \f(CW\*(C`Sun::Solaris::Exacct::ea_error()\*(C'\fR function. (See
\&\f(CWSun::Solaris::Exacct(3)\fR).
.PP
\&\fB\f(CB\*(C`previous()\*(C'\fB\fR
.PP
This method reads the header information of the previous record in the file.
In a scalar context it returns the type field. In a list context it returns
the two element list containing the values of the type and catalog fields, in
the same manner as the \f(CW\*(C`next()\*(C'\fR method. Error are also returned in the same
manner as the \f(CW\*(C`next()\*(C'\fR method.
.PP
\&\fB\f(CB\*(C`get()\*(C'\fB\fR
.PP
This method reads in the libexacct record at the current position in the file
and returns a \f(CW\*(C`Sun::Solaris::Exacct::Object\*(C'\fR containing the unpacked data
from the file. This object can then be further manipulated using its methods.
In case of error \f(CW\*(C`undef\*(C'\fR is returned and the error status is made available
with the \f(CW\*(C`Sun::Solaris::Exacct::ea_error()\*(C'\fR function. After this operation,
the position in the file is set to the start of the next record in the file.
.PP
\&\fB\f(CB\*(C`write(@ea_obj)\*(C'\fB\fR
.PP
This method converts the passed list of \f(CW\*(C`Sun::Solaris::Exacct::Object\*(C'\fRs into
libexacct file format and appends them to the libexacct file, which must be
open for writing. This method returns \f(CW\*(C`true\*(C'\fR if successful and \f(CW\*(C`false\*(C'\fR
otherwise. On failure the error can be examined with the
\&\f(CW\*(C`Sun::Solaris::Exacct::ea_error()\*(C'\fR function.
.Sh "Exports"
.IX Subsection "Exports"
By default nothing is exported from this module. The following tags can be
used to selectively import constants defined in this module:
.PP
.Vb 2
\& :CONSTANTS   EO_HEAD, EO_TAIL,  EO_NO_VALID_HDR,  EO_POSN_MSK,  and
\&              EO_VALIDATE_MSK
.Ve
.PP
.Vb 1
\& :ALL         :CONSTANTS, Fcntl(:DEFAULT).
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
See \f(CWattributes(5)\fR for descriptions of the following attributes:
.PP
.Vb 7
\&  ___________________________________________________________
\& |       ATTRIBUTE TYPE        |       ATTRIBUTE VALUE       |
\& |_____________________________|_____________________________|
\& | Availability                | SUNWpl5u                    |
\& |_____________________________|_____________________________|
\& | Interface Stability         | CPAN (http://www.cpan.org)  |
\& |_____________________________|_____________________________|
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CW\*(C`ea_close(3EXACCT)\*(C'\fR, \f(CW\*(C`ea_get_creator(3EXACCT)\*(C'\fR, \f(CW\*(C`ea_get_hostname(3EXACCT)\*(C'\fR,
\&\f(CW\*(C`ea_get_object(3EXACCT)\*(C'\fR, \f(CW\*(C`ea_next_object(3EXACCT)\*(C'\fR, \f(CW\*(C`ea_open(3EXACCT)\*(C'\fR,
\&\f(CW\*(C`ea_previous_object(3EXACCT)\*(C'\fR, \f(CW\*(C`ea_write_object(3EXACCT)\*(C'\fR,
\&\f(CWSun::Solaris::Exacct(3)\fR, \f(CWSun::Solaris::Exacct::Catalog(3)\fR,
\&\f(CWSun::Solaris::Exacct::Object(3)\fR, \f(CWSun::Solaris::Exacct::Object::Group(3)\fR,
\&\f(CWSun::Solaris::Exacct::Object::Item(3)\fR, \f(CW\*(C`libexacct(3LIB)\*(C'\fR, \f(CWattributes(5)\fR
